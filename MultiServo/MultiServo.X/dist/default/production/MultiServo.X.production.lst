

Microchip Technology PIC18 LITE Macro Assembler V1.33 build 59893 
                                                                                               Sun Feb 25 12:24:32 2018

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	18F2520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    42                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    45                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    46  0000                     
    47                           	psect	idataCOMRAM
    48  002034                     __pidataCOMRAM:
    49                           	opt stack 0
    50                           
    51                           ;initializer for PIDcontrol@DisplayCounter
    52  002034  0019               	dw	25
    53                           
    54                           ;initializer for _channel
    55  002036  00                 	db	0
    56  002037  01                 	db	1
    57                           
    58                           	psect	idataBANK0
    59  002038                     __pidataBANK0:
    60                           	opt stack 0
    61                           
    62                           ;initializer for _servoIDselect
    63  002038  01                 	db	1
    64                           
    65                           	psect	smallconst
    66  000600                     __psmallconst:
    67                           	opt stack 0
    68  000600  00                 	db	0
    69  000601                     _dpowers:
    70                           	opt stack 0
    71  000601  0001               	dw	1
    72  000603  000A               	dw	10
    73  000605  0064               	dw	100
    74  000607  03E8               	dw	1000
    75  000609  2710               	dw	10000
    76  00060B                     __end_of_dpowers:
    77                           	opt stack 0
    78  0000                     _ADCON0	set	4034
    79  0000                     _ADCON0bits	set	4034
    80  0000                     _ADCON1	set	4033
    81  0000                     _ADCON2	set	4032
    82  0000                     _ADRESH	set	4036
    83  0000                     _ADRESL	set	4035
    84  0000                     _CCP1CON	set	4029
    85  0000                     _CCP1CONbits	set	4029
    86  0000                     _CCP2CON	set	4026
    87  0000                     _CCP2CONbits	set	4026
    88  0000                     _CCPR1L	set	4030
    89  0000                     _CCPR2L	set	4027
    90  0000                     _INTCON	set	4082
    91  0000                     _LATBbits	set	3978
    92  0000                     _PIE1	set	3997
    93  0000                     _PIR1bits	set	3998
    94  0000                     _PORTCbits	set	3970
    95  0000                     _PR2	set	4043
    96  0000                     _RCREG	set	4014
    97  0000                     _SPBRG	set	4015
    98  0000                     _T2CON	set	4042
    99  0000                     _T2CONbits	set	4042
   100  0000                     _TRISA	set	3986
   101  0000                     _TRISB	set	3987
   102  0000                     _TRISC	set	3988
   103  0000                     _TXREG	set	4013
   104  0000                     _ADIE	set	31982
   105  0000                     _ADIF	set	31990
   106  0000                     _BRGH	set	32098
   107  0000                     _CREN	set	32092
   108  0000                     _GIE	set	32663
   109  0000                     _OERR	set	32089
   110  0000                     _PEIE	set	32662
   111  0000                     _RBPU	set	32655
   112  0000                     _RCIE	set	31981
   113  0000                     _RCIF	set	31989
   114  0000                     _RX9	set	32094
   115  0000                     _SPEN	set	32095
   116  0000                     _SREN	set	32093
   117  0000                     _SSPIE	set	31979
   118  0000                     _SYNC	set	32100
   119  0000                     _TMR1IE	set	31976
   120  0000                     _TMR2IE	set	31977
   121  0000                     _TMR2IF	set	31985
   122  0000                     _TX9	set	32102
   123  0000                     _TXEN	set	32101
   124  0000                     _TXIE	set	31980
   125  0000                     _TXIF	set	31988
   126  00060B                     __stringdata:
   127                           	opt stack 0
   128  00060B                     STR_8:
   129  00060B  0D                 	db	13
   130  00060C  45                 	db	69	;'E'
   131  00060D  52                 	db	82	;'R'
   132  00060E  52                 	db	82	;'R'
   133  00060F  3A                 	db	58	;':'
   134  000610  20                 	db	32
   135  000611  25                 	db	37
   136  000612  64                 	db	100	;'d'
   137  000613  2C                 	db	44
   138  000614  20                 	db	32
   139  000615  50                 	db	80	;'P'
   140  000616  3A                 	db	58	;':'
   141  000617  20                 	db	32
   142  000618  25                 	db	37
   143  000619  64                 	db	100	;'d'
   144  00061A  2C                 	db	44
   145  00061B  20                 	db	32
   146  00061C  49                 	db	73	;'I'
   147  00061D  20                 	db	32
   148  00061E  25                 	db	37
   149  00061F  64                 	db	100	;'d'
   150  000620  2C                 	db	44
   151  000621  20                 	db	32
   152  000622  44                 	db	68	;'D'
   153  000623  3A                 	db	58	;':'
   154  000624  20                 	db	32
   155  000625  25                 	db	37
   156  000626  64                 	db	100	;'d'
   157  000627  2C                 	db	44
   158  000628  20                 	db	32
   159  000629  50                 	db	80	;'P'
   160  00062A  57                 	db	87	;'W'
   161  00062B  4D                 	db	77	;'M'
   162  00062C  3A                 	db	58	;':'
   163  00062D  20                 	db	32
   164  00062E  25                 	db	37
   165  00062F  64                 	db	100	;'d'
   166  000630  00                 	db	0
   167  000631                     STR_7:
   168  000631  0D                 	db	13
   169  000632  6B                 	db	107	;'k'
   170  000633  50                 	db	80	;'P'
   171  000634  3D                 	db	61	;'='
   172  000635  25                 	db	37
   173  000636  64                 	db	100	;'d'
   174  000637  2C                 	db	44
   175  000638  20                 	db	32
   176  000639  6B                 	db	107	;'k'
   177  00063A  49                 	db	73	;'I'
   178  00063B  3D                 	db	61	;'='
   179  00063C  25                 	db	37
   180  00063D  64                 	db	100	;'d'
   181  00063E  2C                 	db	44
   182  00063F  20                 	db	32
   183  000640  6B                 	db	107	;'k'
   184  000641  44                 	db	68	;'D'
   185  000642  3D                 	db	61	;'='
   186  000643  25                 	db	37
   187  000644  64                 	db	100	;'d'
   188  000645  2C                 	db	44
   189  000646  20                 	db	32
   190  000647  4F                 	db	79	;'O'
   191  000648  46                 	db	70	;'F'
   192  000649  46                 	db	70	;'F'
   193  00064A  53                 	db	83	;'S'
   194  00064B  45                 	db	69	;'E'
   195  00064C  54                 	db	84	;'T'
   196  00064D  3A                 	db	58	;':'
   197  00064E  20                 	db	32
   198  00064F  25                 	db	37
   199  000650  64                 	db	100	;'d'
   200  000651  00                 	db	0
   201  000652                     STR_1:
   202  000652  0D                 	db	13
   203  000653  0D                 	db	13
   204  000654  54                 	db	84	;'T'
   205  000655  65                 	db	101	;'e'
   206  000656  73                 	db	115	;'s'
   207  000657  74                 	db	116	;'t'
   208  000658  69                 	db	105	;'i'
   209  000659  6E                 	db	110	;'n'
   210  00065A  67                 	db	103	;'g'
   211  00065B  20                 	db	32
   212  00065C  50                 	db	80	;'P'
   213  00065D  49                 	db	73	;'I'
   214  00065E  44                 	db	68	;'D'
   215  00065F  20                 	db	32
   216  000660  52                 	db	82	;'R'
   217  000661  55                 	db	85	;'U'
   218  000662  4E                 	db	78	;'N'
   219  000663  20                 	db	32
   220  000664  6D                 	db	109	;'m'
   221  000665  6F                 	db	111	;'o'
   222  000666  64                 	db	100	;'d'
   223  000667  65                 	db	101	;'e'
   224  000668  2E                 	db	46
   225  000669  0D                 	db	13
   226  00066A  00                 	db	0
   227  00066B                     STR_4:
   228  00066B  0D                 	db	13
   229  00066C  44                 	db	68	;'D'
   230  00066D  69                 	db	105	;'i'
   231  00066E  73                 	db	115	;'s'
   232  00066F  70                 	db	112	;'p'
   233  000670  6C                 	db	108	;'l'
   234  000671  61                 	db	97	;'a'
   235  000672  79                 	db	121	;'y'
   236  000673  20                 	db	32
   237  000674  4F                 	db	79	;'O'
   238  000675  46                 	db	70	;'F'
   239  000676  46                 	db	70	;'F'
   240  000677  00                 	db	0
   241  000678                     STR_6:
   242  000678  0D                 	db	13
   243  000679  43                 	db	67	;'C'
   244  00067A  6F                 	db	111	;'o'
   245  00067B  6D                 	db	109	;'m'
   246  00067C  6D                 	db	109	;'m'
   247  00067D  61                 	db	97	;'a'
   248  00067E  6E                 	db	110	;'n'
   249  00067F  64                 	db	100	;'d'
   250  000680  3A                 	db	58	;':'
   251  000681  20                 	db	32
   252  000682  25                 	db	37
   253  000683  63                 	db	99	;'c'
   254  000684  00                 	db	0
   255  000685                     STR_5:
   256  000685  0D                 	db	13
   257  000686  44                 	db	68	;'D'
   258  000687  69                 	db	105	;'i'
   259  000688  73                 	db	115	;'s'
   260  000689  70                 	db	112	;'p'
   261  00068A  6C                 	db	108	;'l'
   262  00068B  61                 	db	97	;'a'
   263  00068C  79                 	db	121	;'y'
   264  00068D  20                 	db	32
   265  00068E  4F                 	db	79	;'O'
   266  00068F  4E                 	db	78	;'N'
   267  000690  00                 	db	0
   268  000691                     STR_2:
   269  000691  0D                 	db	13
   270  000692  48                 	db	72	;'H'
   271  000693  41                 	db	65	;'A'
   272  000694  4C                 	db	76	;'L'
   273  000695  54                 	db	84	;'T'
   274  000696  00                 	db	0
   275  000697                     STR_3:
   276  000697  0D                 	db	13
   277  000698  52                 	db	82	;'R'
   278  000699  55                 	db	85	;'U'
   279  00069A  4E                 	db	78	;'N'
   280  00069B  00                 	db	0
   281  00069C                     __end_of__stringdata:
   282                           	opt stack 0
   283                           
   284                           ; #config settings
   285  00069C  00                 	db	0	; dummy byte at the end
   286  0000                     
   287                           	psect	cinit
   288  001D06                     __pcinit:
   289                           	opt stack 0
   290  001D06                     start_initialization:
   291                           	opt stack 0
   292  001D06                     __initialization:
   293                           	opt stack 0
   294                           
   295                           ; Clear objects allocated to BANK1 (54 bytes)
   296  001D06  EE01  F056         	lfsr	0,__pbssBANK1
   297  001D0A  0E36               	movlw	54
   298  001D0C                     clear_0:
   299  001D0C  6AEE               	clrf	postinc0,c
   300  001D0E  06E8               	decf	wreg,f,c
   301  001D10  E1FD               	bnz	clear_0
   302                           
   303                           ; Clear objects allocated to BANK0 (37 bytes)
   304  001D12  EE00  F080         	lfsr	0,__pbssBANK0
   305  001D16  0E25               	movlw	37
   306  001D18                     clear_1:
   307  001D18  6AEE               	clrf	postinc0,c
   308  001D1A  06E8               	decf	wreg,f,c
   309  001D1C  E1FD               	bnz	clear_1
   310                           
   311                           ; Clear objects allocated to COMRAM (15 bytes)
   312  001D1E  EE00  F048         	lfsr	0,__pbssCOMRAM
   313  001D22  0E0F               	movlw	15
   314  001D24                     clear_2:
   315  001D24  6AEE               	clrf	postinc0,c
   316  001D26  06E8               	decf	wreg,f,c
   317  001D28  E1FD               	bnz	clear_2
   318                           
   319                           ; Initialize objects allocated to BANK0 (1 bytes)
   320                           ; load TBLPTR registers with __pidataBANK0
   321  001D2A  0E38               	movlw	low __pidataBANK0
   322  001D2C  6EF6               	movwf	tblptrl,c
   323  001D2E  0E20               	movlw	high __pidataBANK0
   324  001D30  6EF7               	movwf	tblptrh,c
   325  001D32  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   326  001D34  6EF8               	movwf	tblptru,c
   327  001D36  0009               	tblrd		*+	;fetch initializer
   328  001D38  CFF5 F0C9          	movff	tablat,__pdataBANK0
   329                           
   330                           ; Initialize objects allocated to COMRAM (4 bytes)
   331                           ; load TBLPTR registers with __pidataCOMRAM
   332  001D3C  0E34               	movlw	low __pidataCOMRAM
   333  001D3E  6EF6               	movwf	tblptrl,c
   334  001D40  0E20               	movlw	high __pidataCOMRAM
   335  001D42  6EF7               	movwf	tblptrh,c
   336  001D44  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   337  001D46  6EF8               	movwf	tblptru,c
   338  001D48  EE00  F057         	lfsr	0,__pdataCOMRAM
   339  001D4C  EE10 F004          	lfsr	1,4
   340  001D50                     copy_data0:
   341  001D50  0009               	tblrd		*+
   342  001D52  CFF5 FFEE          	movff	tablat,postinc0
   343  001D56  50E5               	movf	postdec1,w,c
   344  001D58  50E1               	movf	fsr1l,w,c
   345  001D5A  E1FA               	bnz	copy_data0
   346  001D5C                     end_of_initialization:
   347                           	opt stack 0
   348  001D5C                     __end_of__initialization:
   349                           	opt stack 0
   350  001D5C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   351  001D5E  6EF8               	movwf	tblptru,c
   352  001D60  0100               	movlb	0
   353  001D62  EF15  F007         	goto	_main	;jump to C main() function
   354                           tblptru	equ	0xFF8
   355                           tblptrh	equ	0xFF7
   356                           tblptrl	equ	0xFF6
   357                           tablat	equ	0xFF5
   358                           postinc0	equ	0xFEE
   359                           wreg	equ	0xFE8
   360                           postdec1	equ	0xFE5
   361                           fsr1l	equ	0xFE1
   362                           
   363                           	psect	bssCOMRAM
   364  000048                     __pbssCOMRAM:
   365                           	opt stack 0
   366  000048                     _errorDerivative:
   367                           	opt stack 0
   368  000048                     	ds	12
   369  000054                     isr@Timer2Counter:
   370                           	opt stack 0
   371  000054                     	ds	2
   372  000056                     isr@i:
   373                           	opt stack 0
   374  000056                     	ds	1
   375                           tblptru	equ	0xFF8
   376                           tblptrh	equ	0xFF7
   377                           tblptrl	equ	0xFF6
   378                           tablat	equ	0xFF5
   379                           postinc0	equ	0xFEE
   380                           wreg	equ	0xFE8
   381                           postdec1	equ	0xFE5
   382                           fsr1l	equ	0xFE1
   383                           
   384                           	psect	dataCOMRAM
   385  000057                     __pdataCOMRAM:
   386                           	opt stack 0
   387  000057                     PIDcontrol@DisplayCounter:
   388                           	opt stack 0
   389  000057                     	ds	2
   390  000059                     _channel:
   391                           	opt stack 0
   392  000059                     	ds	2
   393                           tblptru	equ	0xFF8
   394                           tblptrh	equ	0xFF7
   395                           tblptrl	equ	0xFF6
   396                           tablat	equ	0xFF5
   397                           postinc0	equ	0xFEE
   398                           wreg	equ	0xFE8
   399                           postdec1	equ	0xFE5
   400                           fsr1l	equ	0xFE1
   401                           
   402                           	psect	bssBANK0
   403  000080                     __pbssBANK0:
   404                           	opt stack 0
   405  000080                     _PID:
   406                           	opt stack 0
   407  000080                     	ds	30
   408  00009E                     _commandPot:
   409                           	opt stack 0
   410  00009E                     	ds	2
   411  0000A0                     _value:
   412                           	opt stack 0
   413  0000A0                     	ds	2
   414  0000A2                     _Timer2Flag:
   415                           	opt stack 0
   416  0000A2                     	ds	1
   417  0000A3                     _UARTflag:
   418                           	opt stack 0
   419  0000A3                     	ds	1
   420  0000A4                     _displayFlag:
   421                           	opt stack 0
   422  0000A4                     	ds	1
   423                           tblptru	equ	0xFF8
   424                           tblptrh	equ	0xFF7
   425                           tblptrl	equ	0xFF6
   426                           tablat	equ	0xFF5
   427                           postinc0	equ	0xFEE
   428                           wreg	equ	0xFE8
   429                           postdec1	equ	0xFE5
   430                           fsr1l	equ	0xFE1
   431                           
   432                           	psect	dataBANK0
   433  0000C9                     __pdataBANK0:
   434                           	opt stack 0
   435  0000C9                     _servoIDselect:
   436                           	opt stack 0
   437  0000C9                     	ds	1
   438                           tblptru	equ	0xFF8
   439                           tblptrh	equ	0xFF7
   440                           tblptrl	equ	0xFF6
   441                           tablat	equ	0xFF5
   442                           postinc0	equ	0xFEE
   443                           wreg	equ	0xFE8
   444                           postdec1	equ	0xFE5
   445                           fsr1l	equ	0xFE1
   446                           
   447                           	psect	bssBANK1
   448  000156                     __pbssBANK1:
   449                           	opt stack 0
   450  000156                     _servoWindowArray:
   451                           	opt stack 0
   452  000156                     	ds	28
   453  000172                     _UARTbuffer:
   454                           	opt stack 0
   455  000172                     	ds	9
   456  00017B                     _NUMbuffer:
   457                           	opt stack 0
   458  00017B                     	ds	17
   459                           tblptru	equ	0xFF8
   460                           tblptrh	equ	0xFF7
   461                           tblptrl	equ	0xFF6
   462                           tablat	equ	0xFF5
   463                           postinc0	equ	0xFEE
   464                           wreg	equ	0xFE8
   465                           postdec1	equ	0xFE5
   466                           fsr1l	equ	0xFE1
   467                           
   468                           	psect	cstackBANK1
   469  000100                     __pcstackBANK1:
   470                           	opt stack 0
   471  000100                     main@arrFilter:
   472                           	opt stack 0
   473                           
   474                           ; 64 bytes @ 0x0
   475  000100                     	ds	64
   476  000140                     main@servoPot:
   477                           	opt stack 0
   478                           
   479                           ; 2 bytes @ 0x40
   480  000140                     	ds	2
   481  000142                     main@error:
   482                           	opt stack 0
   483                           
   484                           ; 2 bytes @ 0x42
   485  000142                     	ds	2
   486  000144                     main@PWMout:
   487                           	opt stack 0
   488                           
   489                           ; 2 bytes @ 0x44
   490  000144                     	ds	2
   491  000146                     main@runEnable:
   492                           	opt stack 0
   493                           
   494                           ; 1 bytes @ 0x46
   495  000146                     	ds	1
   496  000147                     main@windowFilterIndex:
   497                           	opt stack 0
   498                           
   499                           ; 1 bytes @ 0x47
   500  000147                     	ds	1
   501  000148                     main@mode:
   502                           	opt stack 0
   503                           
   504                           ; 1 bytes @ 0x48
   505  000148                     	ds	1
   506  000149                     main@filterSum:
   507                           	opt stack 0
   508                           
   509                           ; 4 bytes @ 0x49
   510  000149                     	ds	4
   511  00014D                     main@i:
   512                           	opt stack 0
   513                           
   514                           ; 1 bytes @ 0x4D
   515  00014D                     	ds	1
   516  00014E                     main@p:
   517                           	opt stack 0
   518                           
   519                           ; 1 bytes @ 0x4E
   520  00014E                     	ds	1
   521  00014F                     main@command:
   522                           	opt stack 0
   523                           
   524                           ; 1 bytes @ 0x4F
   525  00014F                     	ds	1
   526  000150                     main@filterIndex:
   527                           	opt stack 0
   528                           
   529                           ; 1 bytes @ 0x50
   530  000150                     	ds	1
   531  000151                     main@servoID:
   532                           	opt stack 0
   533                           
   534                           ; 1 bytes @ 0x51
   535  000151                     	ds	1
   536  000152                     main@q:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x52
   540  000152                     	ds	1
   541  000153                     main@ch:
   542                           	opt stack 0
   543                           
   544                           ; 1 bytes @ 0x53
   545  000153                     	ds	1
   546  000154                     main@i_552:
   547                           	opt stack 0
   548                           
   549                           ; 2 bytes @ 0x54
   550  000154                     	ds	2
   551                           tblptru	equ	0xFF8
   552                           tblptrh	equ	0xFF7
   553                           tblptrl	equ	0xFF6
   554                           tablat	equ	0xFF5
   555                           postinc0	equ	0xFEE
   556                           wreg	equ	0xFE8
   557                           postdec1	equ	0xFE5
   558                           fsr1l	equ	0xFE1
   559                           
   560                           	psect	cstackBANK0
   561  0000A5                     __pcstackBANK0:
   562                           	opt stack 0
   563  0000A5                     PIDcontrol@diffError:
   564                           	opt stack 0
   565                           
   566                           ; 4 bytes @ 0x0
   567  0000A5                     	ds	4
   568  0000A9                     PIDcontrol@pastError:
   569                           	opt stack 0
   570                           
   571                           ; 4 bytes @ 0x4
   572  0000A9                     	ds	4
   573  0000AD                     PIDcontrol@intPCorr:
   574                           	opt stack 0
   575                           
   576                           ; 2 bytes @ 0x8
   577  0000AD                     	ds	2
   578  0000AF                     PIDcontrol@intICorr:
   579                           	opt stack 0
   580                           
   581                           ; 2 bytes @ 0xA
   582  0000AF                     	ds	2
   583  0000B1                     PIDcontrol@intDCorr:
   584                           	opt stack 0
   585                           
   586                           ; 2 bytes @ 0xC
   587  0000B1                     	ds	2
   588  0000B3                     PIDcontrol@PCorr:
   589                           	opt stack 0
   590                           
   591                           ; 4 bytes @ 0xE
   592  0000B3                     	ds	4
   593  0000B7                     PIDcontrol@ICorr:
   594                           	opt stack 0
   595                           
   596                           ; 4 bytes @ 0x12
   597  0000B7                     	ds	4
   598  0000BB                     PIDcontrol@DCorr:
   599                           	opt stack 0
   600                           
   601                           ; 4 bytes @ 0x16
   602  0000BB                     	ds	4
   603  0000BF                     PIDcontrol@PWMout:
   604                           	opt stack 0
   605                           
   606                           ; 2 bytes @ 0x1A
   607  0000BF                     	ds	2
   608  0000C1                     PIDcontrol@lngError:
   609                           	opt stack 0
   610                           
   611                           ; 4 bytes @ 0x1C
   612  0000C1                     	ds	4
   613  0000C5                     PIDcontrol@PIDcorrection:
   614                           	opt stack 0
   615                           
   616                           ; 4 bytes @ 0x20
   617  0000C5                     	ds	4
   618                           tblptru	equ	0xFF8
   619                           tblptrh	equ	0xFF7
   620                           tblptrl	equ	0xFF6
   621                           tablat	equ	0xFF5
   622                           postinc0	equ	0xFEE
   623                           wreg	equ	0xFE8
   624                           postdec1	equ	0xFE5
   625                           fsr1l	equ	0xFE1
   626                           
   627                           	psect	cstackCOMRAM
   628  000001                     __pcstackCOMRAM:
   629                           	opt stack 0
   630  000001                     i2toupper@c:
   631                           	opt stack 0
   632                           
   633                           ; 1 bytes @ 0x0
   634  000001                     	ds	1
   635  000002                     ??_isr:
   636                           
   637                           ; 0 bytes @ 0x1
   638  000002                     	ds	14
   639  000010                     isr@dummy:
   640                           	opt stack 0
   641                           
   642                           ; 1 bytes @ 0xF
   643  000010                     	ds	1
   644  000011                     isr@ch:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0x10
   648  000011                     	ds	1
   649  000012                     ??_isdigit:
   650  000012                     ??_isupper:
   651  000012                     ?_readAD:
   652                           	opt stack 0
   653  000012                     ?_abs:
   654                           	opt stack 0
   655  000012                     ?___wmul:
   656                           	opt stack 0
   657  000012                     ?___lwdiv:
   658                           	opt stack 0
   659  000012                     ?___aldiv:
   660                           	opt stack 0
   661  000012                     putch@byte:
   662                           	opt stack 0
   663  000012                     ADsetChannel@channel:
   664                           	opt stack 0
   665  000012                     toupper@c:
   666                           	opt stack 0
   667  000012                     SetDutyPWM_B@dutyCycle:
   668                           	opt stack 0
   669  000012                     SetDutyPWM_A@dutyCycle:
   670                           	opt stack 0
   671  000012                     ___wmul@multiplier:
   672                           	opt stack 0
   673  000012                     abs@a:
   674                           	opt stack 0
   675  000012                     ___lwdiv@dividend:
   676                           	opt stack 0
   677  000012                     ___aldiv@dividend:
   678                           	opt stack 0
   679                           
   680                           ; 4 bytes @ 0x11
   681  000012                     	ds	1
   682  000013                     _isdigit$978:
   683                           	opt stack 0
   684  000013                     _isupper$981:
   685                           	opt stack 0
   686                           
   687                           ; 1 bytes @ 0x12
   688  000013                     	ds	1
   689  000014                     ??_SetDutyPWM_A:
   690  000014                     ??_SetDutyPWM_B:
   691  000014                     ??_readAD:
   692  000014                     ??_abs:
   693  000014                     isdigit@c:
   694                           	opt stack 0
   695  000014                     isupper@c:
   696                           	opt stack 0
   697  000014                     ___wmul@multiplicand:
   698                           	opt stack 0
   699  000014                     ___lwdiv@divisor:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0x13
   703  000014                     	ds	1
   704  000015                     ??_isalpha:
   705                           
   706                           ; 0 bytes @ 0x14
   707  000015                     	ds	1
   708  000016                     _isalpha$975:
   709                           	opt stack 0
   710  000016                     ___lwdiv@counter:
   711                           	opt stack 0
   712  000016                     SetDutyPWM_B@lowBits:
   713                           	opt stack 0
   714  000016                     SetDutyPWM_A@lowBits:
   715                           	opt stack 0
   716  000016                     readAD@ADresult:
   717                           	opt stack 0
   718  000016                     ___wmul@product:
   719                           	opt stack 0
   720  000016                     ___aldiv@divisor:
   721                           	opt stack 0
   722                           
   723                           ; 4 bytes @ 0x15
   724  000016                     	ds	1
   725  000017                     isalpha@c:
   726                           	opt stack 0
   727  000017                     ___lwdiv@quotient:
   728                           	opt stack 0
   729                           
   730                           ; 2 bytes @ 0x16
   731  000017                     	ds	1
   732  000018                     ??_initializeErrorArrays:
   733  000018                     ?_atoi:
   734                           	opt stack 0
   735  000018                     ?_windowFilter:
   736                           	opt stack 0
   737  000018                     ?___lmul:
   738                           	opt stack 0
   739  000018                     SetDutyPWM_B@maskReg:
   740                           	opt stack 0
   741  000018                     SetDutyPWM_A@maskReg:
   742                           	opt stack 0
   743  000018                     windowFilter@servoID:
   744                           	opt stack 0
   745  000018                     atoi@s:
   746                           	opt stack 0
   747  000018                     ___lmul@multiplier:
   748                           	opt stack 0
   749                           
   750                           ; 4 bytes @ 0x17
   751  000018                     	ds	1
   752  000019                     ?___lwmod:
   753                           	opt stack 0
   754  000019                     SetDutyPWM_B@ndutyCycle:
   755                           	opt stack 0
   756  000019                     SetDutyPWM_A@ndutyCycle:
   757                           	opt stack 0
   758  000019                     ___lwmod@dividend:
   759                           	opt stack 0
   760                           
   761                           ; 2 bytes @ 0x18
   762  000019                     	ds	1
   763  00001A                     ??_atoi:
   764  00001A                     ??_windowFilter:
   765  00001A                     ___aldiv@counter:
   766                           	opt stack 0
   767  00001A                     initializeErrorArrays@i:
   768                           	opt stack 0
   769                           
   770                           ; 2 bytes @ 0x19
   771  00001A                     	ds	1
   772  00001B                     ___aldiv@sign:
   773                           	opt stack 0
   774  00001B                     setServoPWM@PWMout:
   775                           	opt stack 0
   776  00001B                     ___lwmod@divisor:
   777                           	opt stack 0
   778                           
   779                           ; 2 bytes @ 0x1A
   780  00001B                     	ds	1
   781  00001C                     atoi@sign:
   782                           	opt stack 0
   783  00001C                     initializeErrorArrays@j:
   784                           	opt stack 0
   785  00001C                     ___lmul@multiplicand:
   786                           	opt stack 0
   787  00001C                     ___aldiv@quotient:
   788                           	opt stack 0
   789  00001C                     windowFilter@sortArr:
   790                           	opt stack 0
   791                           
   792                           ; 14 bytes @ 0x1B
   793  00001C                     	ds	1
   794  00001D                     setServoPWM@servoID:
   795                           	opt stack 0
   796  00001D                     ___lwmod@counter:
   797                           	opt stack 0
   798  00001D                     atoi@a:
   799                           	opt stack 0
   800                           
   801                           ; 2 bytes @ 0x1C
   802  00001D                     	ds	1
   803  00001E                     ?_printf:
   804                           	opt stack 0
   805  00001E                     printf@f:
   806                           	opt stack 0
   807                           
   808                           ; 2 bytes @ 0x1D
   809  00001E                     	ds	2
   810  000020                     ___lmul@product:
   811                           	opt stack 0
   812                           
   813                           ; 4 bytes @ 0x1F
   814  000020                     	ds	10
   815  00002A                     ??_printf:
   816  00002A                     windowFilter@midData:
   817                           	opt stack 0
   818                           
   819                           ; 2 bytes @ 0x29
   820  00002A                     	ds	2
   821  00002C                     printf@flag:
   822                           	opt stack 0
   823  00002C                     windowFilter@lowData:
   824                           	opt stack 0
   825                           
   826                           ; 2 bytes @ 0x2B
   827  00002C                     	ds	1
   828  00002D                     printf@prec:
   829                           	opt stack 0
   830                           
   831                           ; 1 bytes @ 0x2C
   832  00002D                     	ds	1
   833  00002E                     windowFilter@highData:
   834                           	opt stack 0
   835  00002E                     printf@ap:
   836                           	opt stack 0
   837                           
   838                           ; 2 bytes @ 0x2D
   839  00002E                     	ds	2
   840  000030                     windowFilter@j:
   841                           	opt stack 0
   842  000030                     printf@_val:
   843                           	opt stack 0
   844                           
   845                           ; 5 bytes @ 0x2F
   846  000030                     	ds	1
   847  000031                     windowFilter@i:
   848                           	opt stack 0
   849                           
   850                           ; 1 bytes @ 0x30
   851  000031                     	ds	1
   852  000032                     ?_readServoPot:
   853                           	opt stack 0
   854  000032                     readServoPot@servoID:
   855                           	opt stack 0
   856                           
   857                           ; 2 bytes @ 0x31
   858  000032                     	ds	2
   859  000034                     readServoPot@filterIndex:
   860                           	opt stack 0
   861                           
   862                           ; 1 bytes @ 0x33
   863  000034                     	ds	1
   864  000035                     ??_readServoPot:
   865  000035                     printf@c:
   866                           	opt stack 0
   867                           
   868                           ; 1 bytes @ 0x34
   869  000035                     	ds	1
   870  000036                     ?_PIDcontrol:
   871                           	opt stack 0
   872  000036                     PIDcontrol@servoID:
   873                           	opt stack 0
   874                           
   875                           ; 2 bytes @ 0x35
   876  000036                     	ds	1
   877  000037                     readServoPot@servoPotValue:
   878                           	opt stack 0
   879                           
   880                           ; 2 bytes @ 0x36
   881  000037                     	ds	1
   882  000038                     PIDcontrol@error:
   883                           	opt stack 0
   884                           
   885                           ; 2 bytes @ 0x37
   886  000038                     	ds	1
   887  000039                     readServoPot@servoPotFiltered:
   888                           	opt stack 0
   889                           
   890                           ; 2 bytes @ 0x38
   891  000039                     	ds	1
   892  00003A                     ??_PIDcontrol:
   893                           
   894                           ; 0 bytes @ 0x39
   895  00003A                     	ds	8
   896  000042                     ??_main:
   897                           
   898                           ; 0 bytes @ 0x41
   899  000042                     	ds	6
   900                           tblptru	equ	0xFF8
   901                           tblptrh	equ	0xFF7
   902                           tblptrl	equ	0xFF6
   903                           tablat	equ	0xFF5
   904                           postinc0	equ	0xFEE
   905                           wreg	equ	0xFE8
   906                           postdec1	equ	0xFE5
   907                           fsr1l	equ	0xFE1
   908                           
   909 ;;
   910 ;;Main: autosize = 0, tempsize = 6, incstack = 0, save=0
   911 ;;
   912 ;; *************** function _main *****************
   913 ;; Defined at:
   914 ;;		line 122 in file "../main.c"
   915 ;; Parameters:    Size  Location     Type
   916 ;;		None
   917 ;; Auto vars:     Size  Location     Type
   918 ;;  i               2   84[BANK1 ] int 
   919 ;;  arrFilter      64    0[BANK1 ] short [32]
   920 ;;  filterSum       4   73[BANK1 ] long 
   921 ;;  PWMout          2   68[BANK1 ] short 
   922 ;;  error           2   66[BANK1 ] short 
   923 ;;  servoPot        2   64[BANK1 ] short 
   924 ;;  ch              1   83[BANK1 ] unsigned char 
   925 ;;  q               1   82[BANK1 ] unsigned char 
   926 ;;  servoID         1   81[BANK1 ] unsigned char 
   927 ;;  filterIndex     1   80[BANK1 ] unsigned char 
   928 ;;  command         1   79[BANK1 ] unsigned char 
   929 ;;  p               1   78[BANK1 ] unsigned char 
   930 ;;  i               1   77[BANK1 ] unsigned char 
   931 ;;  mode            1   72[BANK1 ] unsigned char 
   932 ;;  windowFilter    1   71[BANK1 ] unsigned char 
   933 ;;  runEnable       1   70[BANK1 ] unsigned char 
   934 ;; Return value:  Size  Location     Type
   935 ;;		None               void
   936 ;; Registers used:
   937 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   938 ;; Tracked objects:
   939 ;;		On entry : 0/0
   940 ;;		On exit  : 0/0
   941 ;;		Unchanged: 0/0
   942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   943 ;;      Params:         0       0       0       0       0       0       0
   944 ;;      Locals:         0       0      86       0       0       0       0
   945 ;;      Temps:          6       0       0       0       0       0       0
   946 ;;      Totals:         6       0      86       0       0       0       0
   947 ;;Total ram usage:       92 bytes
   948 ;; Hardware stack levels required when called:    5
   949 ;; This function calls:
   950 ;;		_ADsetChannel
   951 ;;		_PIDcontrol
   952 ;;		_SetDutyPWM_A
   953 ;;		_SetDutyPWM_B
   954 ;;		___aldiv
   955 ;;		___wmul
   956 ;;		_atoi
   957 ;;		_initializeErrorArrays
   958 ;;		_initializePorts
   959 ;;		_isalpha
   960 ;;		_isdigit
   961 ;;		_printf
   962 ;;		_putch
   963 ;;		_readAD
   964 ;;		_readServoPot
   965 ;;		_setServoPWM
   966 ;;		_toupper
   967 ;; This function is called by:
   968 ;;		Startup code after reset
   969 ;; This function uses a non-reentrant model
   970 ;;
   971                           
   972                           	psect	text0
   973  000E2A                     __ptext0:
   974                           	opt stack 0
   975  000E2A                     _main:
   976                           	opt stack 26
   977                           
   978                           ;main.c: 123: unsigned char i = 0, filterIndex = 0, servoID = 0, windowFilterIndex = 0, 
      +                          p = 0, q = 0, command, ch;
   979                           
   980                           ;incstack = 0
   981  000E2A  0E00               	movlw	0
   982  000E2C  0101               	movlb	1	; () banked
   983  000E2E  6F4D               	movwf	main@i& (0+255),b
   984  000E30  0E00               	movlw	0
   985  000E32  0101               	movlb	1	; () banked
   986  000E34  6F50               	movwf	main@filterIndex& (0+255),b
   987  000E36  0E00               	movlw	0
   988  000E38  0101               	movlb	1	; () banked
   989  000E3A  6F51               	movwf	main@servoID& (0+255),b
   990  000E3C  0E00               	movlw	0
   991  000E3E  0101               	movlb	1	; () banked
   992  000E40  6F47               	movwf	main@windowFilterIndex& (0+255),b
   993  000E42  0E00               	movlw	0
   994  000E44  0101               	movlb	1	; () banked
   995  000E46  6F4E               	movwf	main@p& (0+255),b
   996  000E48  0E00               	movlw	0
   997  000E4A  0101               	movlb	1	; () banked
   998  000E4C  6F52               	movwf	main@q& (0+255),b
   999                           
  1000                           ;main.c: 124: short servoPot, PWMout = 0, error;
  1001  000E4E  0E00               	movlw	0
  1002  000E50  0101               	movlb	1	; () banked
  1003  000E52  6F45               	movwf	(main@PWMout+1)& (0+255),b
  1004  000E54  0E00               	movlw	0
  1005  000E56  0101               	movlb	1	; () banked
  1006  000E58  6F44               	movwf	main@PWMout& (0+255),b
  1007                           
  1008                           ;main.c: 125: unsigned char mode = !0;
  1009  000E5A  0E01               	movlw	1
  1010  000E5C  0101               	movlb	1	; () banked
  1011  000E5E  6F48               	movwf	main@mode& (0+255),b
  1012                           
  1013                           ;main.c: 126: unsigned char runEnable = 0;
  1014  000E60  0E00               	movlw	0
  1015  000E62  0101               	movlb	1	; () banked
  1016  000E64  6F46               	movwf	main@runEnable& (0+255),b
  1017                           
  1018                           ;main.c: 128: short arrFilter[32];
  1019                           ;main.c: 129: long filterSum = 0;
  1020  000E66  0E00               	movlw	0
  1021  000E68  0101               	movlb	1	; () banked
  1022  000E6A  6F49               	movwf	main@filterSum& (0+255),b
  1023  000E6C  0E00               	movlw	0
  1024  000E6E  0101               	movlb	1	; () banked
  1025  000E70  6F4A               	movwf	(main@filterSum+1)& (0+255),b
  1026  000E72  0E00               	movlw	0
  1027  000E74  0101               	movlb	1	; () banked
  1028  000E76  6F4B               	movwf	(main@filterSum+2)& (0+255),b
  1029  000E78  0E00               	movlw	0
  1030  000E7A  0101               	movlb	1	; () banked
  1031  000E7C  6F4C               	movwf	(main@filterSum+3)& (0+255),b
  1032                           
  1033                           ;main.c: 131: for(i = 0; i < 32; i++) arrFilter[i] = 0;
  1034  000E7E  0E00               	movlw	0
  1035  000E80  0101               	movlb	1	; () banked
  1036  000E82  6F4D               	movwf	main@i& (0+255),b
  1037  000E84  D011               	goto	L6
  1038  000E86                     l3052:
  1039                           
  1040                           ; BSR set to: 1
  1041  000E86  0101               	movlb	1	; () banked
  1042  000E88  514D               	movf	main@i& (0+255),w,b
  1043  000E8A  0D02               	mullw	2
  1044  000E8C  0101               	movlb	1	; () banked
  1045  000E8E  0E00               	movlw	low main@arrFilter
  1046  000E90  24F3               	addwf	prodl,w,c
  1047  000E92  6ED9               	movwf	fsr2l,c
  1048  000E94  0101               	movlb	1	; () banked
  1049  000E96  0E01               	movlw	high main@arrFilter
  1050  000E98  20F4               	addwfc	prodh,w,c
  1051  000E9A  6EDA               	movwf	fsr2h,c
  1052  000E9C  0E00               	movlw	0
  1053  000E9E  6EDE               	movwf	postinc2,c
  1054  000EA0  0E00               	movlw	0
  1055  000EA2  6EDD               	movwf	postdec2,c
  1056                           
  1057                           ; BSR set to: 1
  1058  000EA4  0101               	movlb	1	; () banked
  1059  000EA6  2B4D               	incf	main@i& (0+255),f,b
  1060  000EA8                     L6:
  1061                           
  1062                           ; BSR set to: 1
  1063  000EA8  0E1F               	movlw	31
  1064  000EAA  0101               	movlb	1	; () banked
  1065  000EAC  654D               	cpfsgt	main@i& (0+255),b
  1066  000EAE  D7EB               	goto	l3052
  1067                           
  1068                           ; BSR set to: 1
  1069                           ;main.c: 133: for (int i = 0; i < 2; i++)
  1070                           
  1071                           ; BSR set to: 1
  1072  000EB0  0E00               	movlw	0
  1073  000EB2  0101               	movlb	1	; () banked
  1074  000EB4  6F55               	movwf	(main@i_552+1)& (0+255),b
  1075  000EB6  0E00               	movlw	0
  1076  000EB8  0101               	movlb	1	; () banked
  1077  000EBA  6F54               	movwf	main@i_552& (0+255),b
  1078  000EBC                     
  1079                           ; BSR set to: 1
  1080  000EBC  0101               	movlb	1	; () banked
  1081  000EBE  5155               	movf	(main@i_552+1)& (0+255),w,b
  1082  000EC0  0A80               	xorlw	128
  1083  000EC2  0F80               	addlw	-128
  1084  000EC4  0E02               	movlw	2
  1085  000EC6  B4D8               	btfsc	status,2,c
  1086  000EC8  5D54               	subwf	main@i_552& (0+255),w,b
  1087  000ECA  B0D8               	btfsc	status,0,c
  1088  000ECC  D0B4               	goto	l3070
  1089                           
  1090                           ; BSR set to: 1
  1091                           ;main.c: 134: {
  1092                           ;main.c: 135: PID[i].sumError = 0;
  1093                           
  1094                           ; BSR set to: 1
  1095                           
  1096                           ; BSR set to: 1
  1097  000ECE  C154  F012         	movff	main@i_552,___wmul@multiplier
  1098  000ED2  C155  F013         	movff	main@i_552+1,___wmul@multiplier+1
  1099  000ED6  0E00               	movlw	0
  1100  000ED8  6E15               	movwf	___wmul@multiplicand+1,c
  1101  000EDA  0E0F               	movlw	15
  1102  000EDC  6E14               	movwf	___wmul@multiplicand,c
  1103  000EDE  ECC1  F00F         	call	___wmul	;wreg free
  1104  000EE2  0100               	movlb	0	; () banked
  1105  000EE4  0E80               	movlw	low _PID
  1106  000EE6  2412               	addwf	?___wmul,w,c
  1107  000EE8  6ED9               	movwf	fsr2l,c
  1108  000EEA  0100               	movlb	0	; () banked
  1109  000EEC  0E00               	movlw	high _PID
  1110  000EEE  2013               	addwfc	?___wmul+1,w,c
  1111  000EF0  6EDA               	movwf	fsr2h,c
  1112  000EF2  6ADE               	clrf	postinc2,c
  1113  000EF4  6ADE               	clrf	postinc2,c
  1114  000EF6  6ADE               	clrf	postinc2,c
  1115  000EF8  6ADD               	clrf	postdec2,c
  1116                           
  1117                           ;main.c: 136: PID[i].derIndex = 0;
  1118  000EFA  C154  F012         	movff	main@i_552,___wmul@multiplier
  1119  000EFE  C155  F013         	movff	main@i_552+1,___wmul@multiplier+1
  1120  000F02  0E00               	movlw	0
  1121  000F04  6E15               	movwf	___wmul@multiplicand+1,c
  1122  000F06  0E0F               	movlw	15
  1123  000F08  6E14               	movwf	___wmul@multiplicand,c
  1124  000F0A  ECC1  F00F         	call	___wmul	;wreg free
  1125  000F0E  0E04               	movlw	4
  1126  000F10  2612               	addwf	?___wmul,f,c
  1127  000F12  0E00               	movlw	0
  1128  000F14  2213               	addwfc	?___wmul+1,f,c
  1129  000F16  0100               	movlb	0	; () banked
  1130  000F18  0E80               	movlw	low _PID
  1131  000F1A  2412               	addwf	?___wmul,w,c
  1132  000F1C  6ED9               	movwf	fsr2l,c
  1133  000F1E  0100               	movlb	0	; () banked
  1134  000F20  0E00               	movlw	high _PID
  1135  000F22  2013               	addwfc	?___wmul+1,w,c
  1136  000F24  6EDA               	movwf	fsr2h,c
  1137  000F26  0E00               	movlw	0
  1138  000F28  6EDE               	movwf	postinc2,c
  1139  000F2A  0E00               	movlw	0
  1140  000F2C  6EDD               	movwf	postdec2,c
  1141                           
  1142                           ;main.c: 137: PID[i].saturationFlag = 0;
  1143  000F2E  C154  F012         	movff	main@i_552,___wmul@multiplier
  1144  000F32  C155  F013         	movff	main@i_552+1,___wmul@multiplier+1
  1145  000F36  0E00               	movlw	0
  1146  000F38  6E15               	movwf	___wmul@multiplicand+1,c
  1147  000F3A  0E0F               	movlw	15
  1148  000F3C  6E14               	movwf	___wmul@multiplicand,c
  1149  000F3E  ECC1  F00F         	call	___wmul	;wreg free
  1150  000F42  0E06               	movlw	6
  1151  000F44  2612               	addwf	?___wmul,f,c
  1152  000F46  0E00               	movlw	0
  1153  000F48  2213               	addwfc	?___wmul+1,f,c
  1154  000F4A  0100               	movlb	0	; () banked
  1155  000F4C  0E80               	movlw	low _PID
  1156  000F4E  2412               	addwf	?___wmul,w,c
  1157  000F50  6ED9               	movwf	fsr2l,c
  1158  000F52  0100               	movlb	0	; () banked
  1159  000F54  0E00               	movlw	high _PID
  1160  000F56  2013               	addwfc	?___wmul+1,w,c
  1161  000F58  6EDA               	movwf	fsr2h,c
  1162  000F5A  0E00               	movlw	0
  1163  000F5C  6EDF               	movwf	indf2,c
  1164                           
  1165                           ;main.c: 138: PID[i].kP = 2000;
  1166  000F5E  C154  F012         	movff	main@i_552,___wmul@multiplier
  1167  000F62  C155  F013         	movff	main@i_552+1,___wmul@multiplier+1
  1168  000F66  0E00               	movlw	0
  1169  000F68  6E15               	movwf	___wmul@multiplicand+1,c
  1170  000F6A  0E0F               	movlw	15
  1171  000F6C  6E14               	movwf	___wmul@multiplicand,c
  1172  000F6E  ECC1  F00F         	call	___wmul	;wreg free
  1173  000F72  0E07               	movlw	7
  1174  000F74  2612               	addwf	?___wmul,f,c
  1175  000F76  0E00               	movlw	0
  1176  000F78  2213               	addwfc	?___wmul+1,f,c
  1177  000F7A  0100               	movlb	0	; () banked
  1178  000F7C  0E80               	movlw	low _PID
  1179  000F7E  2412               	addwf	?___wmul,w,c
  1180  000F80  6ED9               	movwf	fsr2l,c
  1181  000F82  0100               	movlb	0	; () banked
  1182  000F84  0E00               	movlw	high _PID
  1183  000F86  2013               	addwfc	?___wmul+1,w,c
  1184  000F88  6EDA               	movwf	fsr2h,c
  1185  000F8A  0ED0               	movlw	208
  1186  000F8C  6EDE               	movwf	postinc2,c
  1187  000F8E  0E07               	movlw	7
  1188  000F90  6EDD               	movwf	postdec2,c
  1189                           
  1190                           ;main.c: 139: PID[i].kI = 20;
  1191  000F92  C154  F012         	movff	main@i_552,___wmul@multiplier
  1192  000F96  C155  F013         	movff	main@i_552+1,___wmul@multiplier+1
  1193  000F9A  0E00               	movlw	0
  1194  000F9C  6E15               	movwf	___wmul@multiplicand+1,c
  1195  000F9E  0E0F               	movlw	15
  1196  000FA0  6E14               	movwf	___wmul@multiplicand,c
  1197  000FA2  ECC1  F00F         	call	___wmul	;wreg free
  1198  000FA6  0E09               	movlw	9
  1199  000FA8  2612               	addwf	?___wmul,f,c
  1200  000FAA  0E00               	movlw	0
  1201  000FAC  2213               	addwfc	?___wmul+1,f,c
  1202  000FAE  0100               	movlb	0	; () banked
  1203  000FB0  0E80               	movlw	low _PID
  1204  000FB2  2412               	addwf	?___wmul,w,c
  1205  000FB4  6ED9               	movwf	fsr2l,c
  1206  000FB6  0100               	movlb	0	; () banked
  1207  000FB8  0E00               	movlw	high _PID
  1208  000FBA  2013               	addwfc	?___wmul+1,w,c
  1209  000FBC  6EDA               	movwf	fsr2h,c
  1210  000FBE  0E14               	movlw	20
  1211  000FC0  6EDE               	movwf	postinc2,c
  1212  000FC2  0E00               	movlw	0
  1213  000FC4  6EDD               	movwf	postdec2,c
  1214                           
  1215                           ;main.c: 140: PID[i].kD = 6000;
  1216  000FC6  C154  F012         	movff	main@i_552,___wmul@multiplier
  1217  000FCA  C155  F013         	movff	main@i_552+1,___wmul@multiplier+1
  1218  000FCE  0E00               	movlw	0
  1219  000FD0  6E15               	movwf	___wmul@multiplicand+1,c
  1220  000FD2  0E0F               	movlw	15
  1221  000FD4  6E14               	movwf	___wmul@multiplicand,c
  1222  000FD6  ECC1  F00F         	call	___wmul	;wreg free
  1223  000FDA  0E0B               	movlw	11
  1224  000FDC  2612               	addwf	?___wmul,f,c
  1225  000FDE  0E00               	movlw	0
  1226  000FE0  2213               	addwfc	?___wmul+1,f,c
  1227  000FE2  0100               	movlb	0	; () banked
  1228  000FE4  0E80               	movlw	low _PID
  1229  000FE6  2412               	addwf	?___wmul,w,c
  1230  000FE8  6ED9               	movwf	fsr2l,c
  1231  000FEA  0100               	movlb	0	; () banked
  1232  000FEC  0E00               	movlw	high _PID
  1233  000FEE  2013               	addwfc	?___wmul+1,w,c
  1234  000FF0  6EDA               	movwf	fsr2h,c
  1235  000FF2  0E70               	movlw	112
  1236  000FF4  6EDE               	movwf	postinc2,c
  1237  000FF6  0E17               	movlw	23
  1238  000FF8  6EDD               	movwf	postdec2,c
  1239                           
  1240                           ;main.c: 141: PID[i].PWMoffset = 30;
  1241  000FFA  C154  F012         	movff	main@i_552,___wmul@multiplier
  1242  000FFE  C155  F013         	movff	main@i_552+1,___wmul@multiplier+1
  1243  001002  0E00               	movlw	0
  1244  001004  6E15               	movwf	___wmul@multiplicand+1,c
  1245  001006  0E0F               	movlw	15
  1246  001008  6E14               	movwf	___wmul@multiplicand,c
  1247  00100A  ECC1  F00F         	call	___wmul	;wreg free
  1248  00100E  0E0D               	movlw	13
  1249  001010  2612               	addwf	?___wmul,f,c
  1250  001012  0E00               	movlw	0
  1251  001014  2213               	addwfc	?___wmul+1,f,c
  1252  001016  0100               	movlb	0	; () banked
  1253  001018  0E80               	movlw	low _PID
  1254  00101A  2412               	addwf	?___wmul,w,c
  1255  00101C  6ED9               	movwf	fsr2l,c
  1256  00101E  0100               	movlb	0	; () banked
  1257  001020  0E00               	movlw	high _PID
  1258  001022  2013               	addwfc	?___wmul+1,w,c
  1259  001024  6EDA               	movwf	fsr2h,c
  1260  001026  0E1E               	movlw	30
  1261  001028  6EDE               	movwf	postinc2,c
  1262  00102A  0E00               	movlw	0
  1263  00102C  6EDD               	movwf	postdec2,c
  1264                           
  1265                           ; BSR set to: 0
  1266  00102E  0101               	movlb	1	; () banked
  1267  001030  4B54               	infsnz	main@i_552& (0+255),f,b
  1268  001032  2B55               	incf	(main@i_552+1)& (0+255),f,b
  1269  001034  D743               	goto	L1
  1270  001036                     l3070:
  1271                           
  1272                           ; BSR set to: 1
  1273                           ;main.c: 142: }
  1274                           ;main.c: 146: initializePorts();
  1275  001036  EC0A  F00E         	call	_initializePorts	;wreg free
  1276                           
  1277                           ;main.c: 147: initializeErrorArrays();
  1278  00103A  ECD4  F00C         	call	_initializeErrorArrays	;wreg free
  1279                           
  1280                           ;main.c: 148: SetDutyPWM_A(0);
  1281  00103E  0E00               	movlw	0
  1282  001040  6E13               	movwf	SetDutyPWM_A@dutyCycle+1,c
  1283  001042  0E00               	movlw	0
  1284  001044  6E12               	movwf	SetDutyPWM_A@dutyCycle,c
  1285  001046  EC08  F00F         	call	_SetDutyPWM_A	;wreg free
  1286                           
  1287                           ;main.c: 149: SetDutyPWM_B(0);
  1288  00104A  0E00               	movlw	0
  1289  00104C  6E13               	movwf	SetDutyPWM_B@dutyCycle+1,c
  1290  00104E  0E00               	movlw	0
  1291  001050  6E12               	movwf	SetDutyPWM_B@dutyCycle,c
  1292  001052  ECDE  F00E         	call	_SetDutyPWM_B	;wreg free
  1293                           
  1294                           ;main.c: 151: PORTCbits.RC4 = 1;
  1295  001056  8882               	bsf	3970,4,c	;volatile
  1296                           
  1297                           ;main.c: 152: PORTCbits.RC5 = 1;
  1298  001058  8A82               	bsf	3970,5,c	;volatile
  1299                           
  1300                           ;main.c: 153: printf("\r\rTesting PID RUN mode.\r");
  1301  00105A  0E06               	movlw	high STR_1
  1302  00105C  6E1F               	movwf	printf@f+1,c
  1303  00105E  0E52               	movlw	low STR_1
  1304  001060  6E1E               	movwf	printf@f,c
  1305  001062  EC9A  F00A         	call	_printf	;wreg free
  1306  001066                     l3084:
  1307                           
  1308                           ;main.c: 156: if (UARTflag) {
  1309  001066  0100               	movlb	0	; () banked
  1310  001068  51A3               	movf	_UARTflag& (0+255),w,b
  1311  00106A  B4D8               	btfsc	status,2,c
  1312  00106C  D160               	goto	l3180
  1313                           
  1314                           ; BSR set to: 0
  1315                           ;main.c: 157: UARTflag = 0;
  1316  00106E  0E00               	movlw	0
  1317  001070  0100               	movlb	0	; () banked
  1318  001072  6FA3               	movwf	_UARTflag& (0+255),b
  1319                           
  1320                           ;main.c: 158: q = 0;
  1321  001074  0E00               	movlw	0
  1322  001076  0101               	movlb	1	; () banked
  1323  001078  6F52               	movwf	main@q& (0+255),b
  1324                           
  1325                           ;main.c: 159: command = 0;
  1326  00107A  0E00               	movlw	0
  1327  00107C  0101               	movlb	1	; () banked
  1328  00107E  6F4F               	movwf	main@command& (0+255),b
  1329                           
  1330                           ;main.c: 160: for (p = 0; p < 8; p++) {
  1331  001080  0E00               	movlw	0
  1332  001082  0101               	movlb	1	; () banked
  1333  001084  6F4E               	movwf	main@p& (0+255),b
  1334  001086  D051               	goto	L7
  1335  001088                     l3092:
  1336                           
  1337                           ; BSR set to: 1
  1338                           ;main.c: 161: ch = toupper (UARTbuffer[p]);
  1339  001088  0101               	movlb	1	; () banked
  1340  00108A  514E               	movf	main@p& (0+255),w,b
  1341  00108C  0D01               	mullw	1
  1342  00108E  0101               	movlb	1	; () banked
  1343  001090  0E72               	movlw	low _UARTbuffer
  1344  001092  24F3               	addwf	prodl,w,c
  1345  001094  6ED9               	movwf	fsr2l,c
  1346  001096  0101               	movlb	1	; () banked
  1347  001098  0E01               	movlw	high _UARTbuffer
  1348  00109A  20F4               	addwfc	prodh,w,c
  1349  00109C  6EDA               	movwf	fsr2h,c
  1350  00109E  50DF               	movf	indf2,w,c
  1351  0010A0  ECF4  F00F         	call	_toupper
  1352  0010A4  0101               	movlb	1	; () banked
  1353  0010A6  6F53               	movwf	main@ch& (0+255),b
  1354                           
  1355                           ; BSR set to: 1
  1356                           ;main.c: 162: if (isalpha(ch)) command = ch;
  1357  0010A8  0101               	movlb	1	; () banked
  1358  0010AA  5153               	movf	main@ch& (0+255),w,b
  1359  0010AC  EC98  F00F         	call	_isalpha
  1360  0010B0  A0D8               	btfss	status,0,c
  1361  0010B2  D003               	goto	l3098
  1362  0010B4  C153  F14F         	movff	main@ch,main@command
  1363  0010B8  D008               	goto	l3102
  1364  0010BA                     l3098:
  1365                           
  1366                           ;main.c: 163: else if (ch == ' ') command = ' ';
  1367  0010BA  0101               	movlb	1	; () banked
  1368  0010BC  5153               	movf	main@ch& (0+255),w,b
  1369  0010BE  0A20               	xorlw	32
  1370  0010C0  A4D8               	btfss	status,2,c
  1371  0010C2  D003               	goto	l3102
  1372                           
  1373                           ; BSR set to: 1
  1374  0010C4  0E20               	movlw	32
  1375  0010C6  0101               	movlb	1	; () banked
  1376  0010C8  6F4F               	movwf	main@command& (0+255),b
  1377  0010CA                     l3102:
  1378                           
  1379                           ;main.c: 164: putch(ch);
  1380  0010CA  0101               	movlb	1	; () banked
  1381  0010CC  5153               	movf	main@ch& (0+255),w,b
  1382  0010CE  EC14  F010         	call	_putch
  1383                           
  1384                           ;main.c: 165: if (ch == '\r' || ch == ' ')break;
  1385  0010D2  0101               	movlb	1	; () banked
  1386  0010D4  5153               	movf	main@ch& (0+255),w,b
  1387  0010D6  0A0D               	xorlw	13
  1388  0010D8  B4D8               	btfsc	status,2,c
  1389  0010DA  D02B               	goto	l3122
  1390                           
  1391                           ; BSR set to: 1
  1392  0010DC  0101               	movlb	1	; () banked
  1393  0010DE  5153               	movf	main@ch& (0+255),w,b
  1394  0010E0  0A20               	xorlw	32
  1395  0010E2  B4D8               	btfsc	status,2,c
  1396  0010E4  D026               	goto	l3122
  1397                           
  1398                           ; BSR set to: 1
  1399                           ;main.c: 166: if ((isdigit(ch) || ch == '-') && q < 16) NUMbuffer[q++] = ch;
  1400                           
  1401                           ; BSR set to: 1
  1402                           
  1403                           ; BSR set to: 1
  1404  0010E6  0101               	movlb	1	; () banked
  1405  0010E8  5153               	movf	main@ch& (0+255),w,b
  1406  0010EA  ECE4  F00F         	call	_isdigit
  1407  0010EE  B0D8               	btfsc	status,0,c
  1408  0010F0  D005               	goto	l3112
  1409  0010F2  0101               	movlb	1	; () banked
  1410  0010F4  5153               	movf	main@ch& (0+255),w,b
  1411  0010F6  0A2D               	xorlw	45
  1412  0010F8  A4D8               	btfss	status,2,c
  1413  0010FA  D015               	goto	l3118
  1414  0010FC                     l3112:
  1415  0010FC  0E10               	movlw	16
  1416  0010FE  0101               	movlb	1	; () banked
  1417  001100  5D52               	subwf	main@q& (0+255),w,b
  1418  001102  B0D8               	btfsc	status,0,c
  1419  001104  D010               	goto	l3118
  1420                           
  1421                           ; BSR set to: 1
  1422  001106  0101               	movlb	1	; () banked
  1423  001108  5152               	movf	main@q& (0+255),w,b
  1424  00110A  0D01               	mullw	1
  1425  00110C  0101               	movlb	1	; () banked
  1426  00110E  0E7B               	movlw	low _NUMbuffer
  1427  001110  24F3               	addwf	prodl,w,c
  1428  001112  6ED9               	movwf	fsr2l,c
  1429  001114  0101               	movlb	1	; () banked
  1430  001116  0E01               	movlw	high _NUMbuffer
  1431  001118  20F4               	addwfc	prodh,w,c
  1432  00111A  6EDA               	movwf	fsr2h,c
  1433  00111C  0101               	movlb	1	; () banked
  1434  00111E  C153  FFDF         	movff	main@ch,indf2
  1435                           
  1436                           ; BSR set to: 1
  1437  001122  0101               	movlb	1	; () banked
  1438  001124  2B52               	incf	main@q& (0+255),f,b
  1439  001126                     l3118:
  1440                           
  1441                           ; BSR set to: 1
  1442  001126  0101               	movlb	1	; () banked
  1443  001128  2B4E               	incf	main@p& (0+255),f,b
  1444  00112A                     L7:
  1445                           
  1446                           ; BSR set to: 1
  1447  00112A  0E07               	movlw	7
  1448  00112C  0101               	movlb	1	; () banked
  1449  00112E  654E               	cpfsgt	main@p& (0+255),b
  1450  001130  D7AB               	goto	l3092
  1451  001132                     l3122:
  1452                           
  1453                           ; BSR set to: 1
  1454                           ;main.c: 167: }
  1455                           ;main.c: 168: if (q) {
  1456  001132  0101               	movlb	1	; () banked
  1457  001134  5152               	movf	main@q& (0+255),w,b
  1458  001136  B4D8               	btfsc	status,2,c
  1459  001138  D019               	goto	l3128
  1460                           
  1461                           ; BSR set to: 1
  1462                           ;main.c: 169: NUMbuffer[q] = '\0';
  1463  00113A  0101               	movlb	1	; () banked
  1464  00113C  5152               	movf	main@q& (0+255),w,b
  1465  00113E  0D01               	mullw	1
  1466  001140  0101               	movlb	1	; () banked
  1467  001142  0E7B               	movlw	low _NUMbuffer
  1468  001144  24F3               	addwf	prodl,w,c
  1469  001146  6ED9               	movwf	fsr2l,c
  1470  001148  0101               	movlb	1	; () banked
  1471  00114A  0E01               	movlw	high _NUMbuffer
  1472  00114C  20F4               	addwfc	prodh,w,c
  1473  00114E  6EDA               	movwf	fsr2h,c
  1474  001150  0E00               	movlw	0
  1475  001152  6EDF               	movwf	indf2,c
  1476                           
  1477                           ; BSR set to: 1
  1478                           ;main.c: 170: value = atoi(NUMbuffer);
  1479  001154  0101               	movlb	1	; () banked
  1480  001156  0E01               	movlw	high _NUMbuffer
  1481  001158  6E19               	movwf	atoi@s+1,c
  1482  00115A  0101               	movlb	1	; () banked
  1483  00115C  0E7B               	movlw	low _NUMbuffer
  1484  00115E  6E18               	movwf	atoi@s,c
  1485  001160  EC47  F00D         	call	_atoi	;wreg free
  1486  001164  C018  F0A0         	movff	?_atoi,_value
  1487  001168  C019  F0A1         	movff	?_atoi+1,_value+1
  1488  00116C                     l3128:
  1489                           
  1490                           ;main.c: 171: }
  1491                           ;main.c: 172: if (command) {
  1492  00116C  0101               	movlb	1	; () banked
  1493  00116E  514F               	movf	main@command& (0+255),w,b
  1494  001170  A4D8               	btfss	status,2,c
  1495  001172  D070               	goto	l3172
  1496  001174  D0D9               	goto	l3178
  1497  001176                     l3132:
  1498                           
  1499                           ; BSR set to: 1
  1500                           ;main.c: 175: if (q) PID[servoIDselect].kP = value;
  1501  001176  0101               	movlb	1	; () banked
  1502  001178  5152               	movf	main@q& (0+255),w,b
  1503  00117A  B4D8               	btfsc	status,2,c
  1504  00117C  D080               	goto	l3174
  1505                           
  1506                           ; BSR set to: 1
  1507  00117E  0100               	movlb	0	; () banked
  1508  001180  51C9               	movf	_servoIDselect& (0+255),w,b
  1509  001182  0D0F               	mullw	15
  1510  001184  0E07               	movlw	7
  1511  001186  D01A               	goto	L4
  1512  001188                     l3136:
  1513                           
  1514                           ;main.c: 178: if (q) PID[servoIDselect].kI = value;
  1515  001188  0101               	movlb	1	; () banked
  1516  00118A  5152               	movf	main@q& (0+255),w,b
  1517  00118C  B4D8               	btfsc	status,2,c
  1518  00118E  D077               	goto	l3174
  1519                           
  1520                           ; BSR set to: 1
  1521  001190  0100               	movlb	0	; () banked
  1522  001192  51C9               	movf	_servoIDselect& (0+255),w,b
  1523  001194  0D0F               	mullw	15
  1524  001196  0E09               	movlw	9
  1525  001198  D011               	goto	L4
  1526  00119A                     l3140:
  1527                           
  1528                           ;main.c: 181: if (q) PID[servoIDselect].kD = value;
  1529  00119A  0101               	movlb	1	; () banked
  1530  00119C  5152               	movf	main@q& (0+255),w,b
  1531  00119E  B4D8               	btfsc	status,2,c
  1532  0011A0  D06E               	goto	l3174
  1533                           
  1534                           ; BSR set to: 1
  1535  0011A2  0100               	movlb	0	; () banked
  1536  0011A4  51C9               	movf	_servoIDselect& (0+255),w,b
  1537  0011A6  0D0F               	mullw	15
  1538  0011A8  0E0B               	movlw	11
  1539  0011AA  D008               	goto	L4
  1540  0011AC                     l3144:
  1541                           
  1542                           ;main.c: 184: if (q) PID[servoIDselect].PWMoffset = value;
  1543  0011AC  0101               	movlb	1	; () banked
  1544  0011AE  5152               	movf	main@q& (0+255),w,b
  1545  0011B0  B4D8               	btfsc	status,2,c
  1546  0011B2  D065               	goto	l3174
  1547                           
  1548                           ; BSR set to: 1
  1549  0011B4  0100               	movlb	0	; () banked
  1550  0011B6  51C9               	movf	_servoIDselect& (0+255),w,b
  1551  0011B8  0D0F               	mullw	15
  1552  0011BA  0E0D               	movlw	13
  1553  0011BC                     L4:
  1554  0011BC  26F3               	addwf	prodl,f,c
  1555  0011BE  0E00               	movlw	0
  1556  0011C0  22F4               	addwfc	prodh,f,c
  1557  0011C2  0100               	movlb	0	; () banked
  1558  0011C4  0E80               	movlw	low _PID
  1559  0011C6  24F3               	addwf	prodl,w,c
  1560  0011C8  6ED9               	movwf	fsr2l,c
  1561  0011CA  0100               	movlb	0	; () banked
  1562  0011CC  0E00               	movlw	high _PID
  1563  0011CE  20F4               	addwfc	prodh,w,c
  1564  0011D0  6EDA               	movwf	fsr2h,c
  1565  0011D2  0100               	movlb	0	; () banked
  1566  0011D4  C0A0  FFDE         	movff	_value,postinc2
  1567  0011D8  0100               	movlb	0	; () banked
  1568  0011DA  C0A1  FFDD         	movff	_value+1,postdec2
  1569  0011DE  D04F               	goto	l3174
  1570  0011E0                     l3148:
  1571                           
  1572                           ;main.c: 187: if (mode){
  1573  0011E0  0101               	movlb	1	; () banked
  1574  0011E2  5148               	movf	main@mode& (0+255),w,b
  1575  0011E4  B4D8               	btfsc	status,2,c
  1576  0011E6  D00A               	goto	l3154
  1577                           
  1578                           ; BSR set to: 1
  1579                           ;main.c: 188: mode = 0;
  1580  0011E8  0E00               	movlw	0
  1581  0011EA  0101               	movlb	1	; () banked
  1582  0011EC  6F48               	movwf	main@mode& (0+255),b
  1583                           
  1584                           ; BSR set to: 1
  1585                           ;main.c: 189: printf("\rHALT");
  1586  0011EE  0E06               	movlw	high STR_2
  1587  0011F0  6E1F               	movwf	printf@f+1,c
  1588  0011F2  0E91               	movlw	low STR_2
  1589  0011F4  6E1E               	movwf	printf@f,c
  1590  0011F6  EC9A  F00A         	call	_printf	;wreg free
  1591                           
  1592                           ;main.c: 190: }
  1593  0011FA  D041               	goto	l3174
  1594  0011FC                     l3154:
  1595                           
  1596                           ;main.c: 191: else {
  1597                           ;main.c: 192: mode = !0;
  1598  0011FC  0E01               	movlw	1
  1599  0011FE  0101               	movlb	1	; () banked
  1600  001200  6F48               	movwf	main@mode& (0+255),b
  1601                           
  1602                           ; BSR set to: 1
  1603                           ;main.c: 193: printf("\rRUN");
  1604  001202  0E06               	movlw	high STR_3
  1605  001204  6E1F               	movwf	printf@f+1,c
  1606  001206  0E97               	movlw	low STR_3
  1607  001208  6E1E               	movwf	printf@f,c
  1608  00120A  EC9A  F00A         	call	_printf	;wreg free
  1609  00120E  D037               	goto	l3174
  1610  001210                     l3158:
  1611                           
  1612                           ;main.c: 197: if (displayFlag){
  1613  001210  0100               	movlb	0	; () banked
  1614  001212  51A4               	movf	_displayFlag& (0+255),w,b
  1615  001214  B4D8               	btfsc	status,2,c
  1616  001216  D00A               	goto	l3164
  1617                           
  1618                           ; BSR set to: 0
  1619                           ;main.c: 198: displayFlag = 0;
  1620  001218  0E00               	movlw	0
  1621  00121A  0100               	movlb	0	; () banked
  1622  00121C  6FA4               	movwf	_displayFlag& (0+255),b
  1623                           
  1624                           ; BSR set to: 0
  1625                           ;main.c: 199: printf("\rDisplay OFF");
  1626  00121E  0E06               	movlw	high STR_4
  1627  001220  6E1F               	movwf	printf@f+1,c
  1628  001222  0E6B               	movlw	low STR_4
  1629  001224  6E1E               	movwf	printf@f,c
  1630  001226  EC9A  F00A         	call	_printf	;wreg free
  1631                           
  1632                           ;main.c: 200: }
  1633  00122A  D009               	goto	l3168
  1634  00122C                     l3164:
  1635                           
  1636                           ;main.c: 201: else {
  1637                           ;main.c: 202: displayFlag = !0;
  1638  00122C  0E01               	movlw	1
  1639  00122E  0100               	movlb	0	; () banked
  1640  001230  6FA4               	movwf	_displayFlag& (0+255),b
  1641                           
  1642                           ; BSR set to: 0
  1643                           ;main.c: 203: printf("\rDisplay ON");
  1644  001232  0E06               	movlw	high STR_5
  1645  001234  6E1F               	movwf	printf@f+1,c
  1646  001236  0E85               	movlw	low STR_5
  1647  001238  6E1E               	movwf	printf@f,c
  1648  00123A  EC9A  F00A         	call	_printf	;wreg free
  1649  00123E                     l3168:
  1650                           
  1651                           ;main.c: 206: printf("\rCommand: %c", command);
  1652  00123E  0E06               	movlw	high STR_6
  1653  001240  6E1F               	movwf	printf@f+1,c
  1654  001242  0E78               	movlw	low STR_6
  1655  001244  6E1E               	movwf	printf@f,c
  1656  001246  0101               	movlb	1	; () banked
  1657  001248  C14F  F020         	movff	main@command,?_printf+2
  1658  00124C  6A21               	clrf	?_printf+3,c
  1659  00124E  EC9A  F00A         	call	_printf	;wreg free
  1660                           
  1661                           ;main.c: 207: break;
  1662  001252  D015               	goto	l3174
  1663  001254                     l3172:
  1664  001254  0101               	movlb	1	; () banked
  1665  001256  514F               	movf	main@command& (0+255),w,b
  1666                           
  1667                           ; Switch size 1, requested type "space"
  1668                           ; Number of cases is 6, Range of values is 32 to 80
  1669                           ; switch strategies available:
  1670                           ; Name         Instructions Cycles
  1671                           ; simple_byte           19    10 (average)
  1672                           ;	Chosen strategy is simple_byte
  1673  001258  0A20               	xorlw	32	; case 32
  1674  00125A  B4D8               	btfsc	status,2,c
  1675  00125C  D7C1               	goto	l3148
  1676  00125E  0A64               	xorlw	100	; case 68
  1677  001260  B4D8               	btfsc	status,2,c
  1678  001262  D79B               	goto	l3140
  1679  001264  0A0D               	xorlw	13	; case 73
  1680  001266  B4D8               	btfsc	status,2,c
  1681  001268  D78F               	goto	l3136
  1682  00126A  0A04               	xorlw	4	; case 77
  1683  00126C  B4D8               	btfsc	status,2,c
  1684  00126E  D7D0               	goto	l3158
  1685  001270  0A02               	xorlw	2	; case 79
  1686  001272  B4D8               	btfsc	status,2,c
  1687  001274  D79B               	goto	l3144
  1688  001276  0A1F               	xorlw	31	; case 80
  1689  001278  B4D8               	btfsc	status,2,c
  1690  00127A  D77D               	goto	l3132
  1691  00127C  D7E0               	goto	l3168
  1692  00127E                     l3174:
  1693                           
  1694                           ;main.c: 209: printf("\rkP=%d, kI=%d, kD=%d, OFFSET: %d", PID[servoIDselect].kP, PID[ser
      +                          voIDselect].kI, PID[servoIDselect].kD, PID[servoIDselect].PWMoffset);
  1695  00127E  0E06               	movlw	high STR_7
  1696  001280  6E1F               	movwf	printf@f+1,c
  1697  001282  0E31               	movlw	low STR_7
  1698  001284  6E1E               	movwf	printf@f,c
  1699  001286  0100               	movlb	0	; () banked
  1700  001288  51C9               	movf	_servoIDselect& (0+255),w,b
  1701  00128A  0D0F               	mullw	15
  1702  00128C  0E07               	movlw	7
  1703  00128E  26F3               	addwf	prodl,f,c
  1704  001290  0E00               	movlw	0
  1705  001292  22F4               	addwfc	prodh,f,c
  1706  001294  0100               	movlb	0	; () banked
  1707  001296  0E80               	movlw	low _PID
  1708  001298  24F3               	addwf	prodl,w,c
  1709  00129A  6ED9               	movwf	fsr2l,c
  1710  00129C  0100               	movlb	0	; () banked
  1711  00129E  0E00               	movlw	high _PID
  1712  0012A0  20F4               	addwfc	prodh,w,c
  1713  0012A2  6EDA               	movwf	fsr2h,c
  1714  0012A4  CFDE F020          	movff	postinc2,?_printf+2
  1715  0012A8  CFDD F021          	movff	postdec2,?_printf+3
  1716  0012AC  0100               	movlb	0	; () banked
  1717  0012AE  51C9               	movf	_servoIDselect& (0+255),w,b
  1718  0012B0  0D0F               	mullw	15
  1719  0012B2  0E09               	movlw	9
  1720  0012B4  26F3               	addwf	prodl,f,c
  1721  0012B6  0E00               	movlw	0
  1722  0012B8  22F4               	addwfc	prodh,f,c
  1723  0012BA  0100               	movlb	0	; () banked
  1724  0012BC  0E80               	movlw	low _PID
  1725  0012BE  24F3               	addwf	prodl,w,c
  1726  0012C0  6ED9               	movwf	fsr2l,c
  1727  0012C2  0100               	movlb	0	; () banked
  1728  0012C4  0E00               	movlw	high _PID
  1729  0012C6  20F4               	addwfc	prodh,w,c
  1730  0012C8  6EDA               	movwf	fsr2h,c
  1731  0012CA  CFDE F022          	movff	postinc2,?_printf+4
  1732  0012CE  CFDD F023          	movff	postdec2,?_printf+5
  1733  0012D2  0100               	movlb	0	; () banked
  1734  0012D4  51C9               	movf	_servoIDselect& (0+255),w,b
  1735  0012D6  0D0F               	mullw	15
  1736  0012D8  0E0B               	movlw	11
  1737  0012DA  26F3               	addwf	prodl,f,c
  1738  0012DC  0E00               	movlw	0
  1739  0012DE  22F4               	addwfc	prodh,f,c
  1740  0012E0  0100               	movlb	0	; () banked
  1741  0012E2  0E80               	movlw	low _PID
  1742  0012E4  24F3               	addwf	prodl,w,c
  1743  0012E6  6ED9               	movwf	fsr2l,c
  1744  0012E8  0100               	movlb	0	; () banked
  1745  0012EA  0E00               	movlw	high _PID
  1746  0012EC  20F4               	addwfc	prodh,w,c
  1747  0012EE  6EDA               	movwf	fsr2h,c
  1748  0012F0  CFDE F024          	movff	postinc2,?_printf+6
  1749  0012F4  CFDD F025          	movff	postdec2,?_printf+7
  1750  0012F8  0100               	movlb	0	; () banked
  1751  0012FA  51C9               	movf	_servoIDselect& (0+255),w,b
  1752  0012FC  0D0F               	mullw	15
  1753  0012FE  0E0D               	movlw	13
  1754  001300  26F3               	addwf	prodl,f,c
  1755  001302  0E00               	movlw	0
  1756  001304  22F4               	addwfc	prodh,f,c
  1757  001306  0100               	movlb	0	; () banked
  1758  001308  0E80               	movlw	low _PID
  1759  00130A  24F3               	addwf	prodl,w,c
  1760  00130C  6ED9               	movwf	fsr2l,c
  1761  00130E  0100               	movlb	0	; () banked
  1762  001310  0E00               	movlw	high _PID
  1763  001312  20F4               	addwfc	prodh,w,c
  1764  001314  6EDA               	movwf	fsr2h,c
  1765  001316  CFDE F026          	movff	postinc2,?_printf+8
  1766  00131A  CFDD F027          	movff	postdec2,?_printf+9
  1767  00131E  EC9A  F00A         	call	_printf	;wreg free
  1768                           
  1769                           ;main.c: 210: command = 0;
  1770  001322  0E00               	movlw	0
  1771  001324  0101               	movlb	1	; () banked
  1772  001326  6F4F               	movwf	main@command& (0+255),b
  1773  001328                     l3178:
  1774                           
  1775                           ; BSR set to: 1
  1776                           ;main.c: 211: }
  1777                           ;main.c: 213: putch('\r');
  1778  001328  0E0D               	movlw	13
  1779  00132A  EC14  F010         	call	_putch
  1780  00132E                     l3180:
  1781                           
  1782                           ;main.c: 214: }
  1783                           ;main.c: 217: if (!mode) SetDutyPWM_B(0);
  1784  00132E  0101               	movlb	1	; () banked
  1785  001330  6748               	tstfsz	main@mode& (0+255),b
  1786  001332  D007               	goto	l3184
  1787                           
  1788                           ; BSR set to: 1
  1789  001334  0E00               	movlw	0
  1790  001336  6E13               	movwf	SetDutyPWM_B@dutyCycle+1,c
  1791  001338  0E00               	movlw	0
  1792  00133A  6E12               	movwf	SetDutyPWM_B@dutyCycle,c
  1793  00133C  ECDE  F00E         	call	_SetDutyPWM_B	;wreg free
  1794  001340  D692               	goto	l3084
  1795  001342                     l3184:
  1796                           
  1797                           ;main.c: 218: else if (Timer2Flag) {
  1798  001342  0100               	movlb	0	; () banked
  1799  001344  51A2               	movf	_Timer2Flag& (0+255),w,b
  1800  001346  B4D8               	btfsc	status,2,c
  1801  001348  D68E               	goto	l3084
  1802                           
  1803                           ; BSR set to: 0
  1804                           ;main.c: 219: Timer2Flag = 0;
  1805  00134A  0E00               	movlw	0
  1806  00134C  0100               	movlb	0	; () banked
  1807  00134E  6FA2               	movwf	_Timer2Flag& (0+255),b
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;main.c: 221: if (LATBbits.LATB0) LATBbits.LATB0 = 0;
  1811  001350  A08A               	btfss	3978,0,c	;volatile
  1812  001352  D002               	goto	l205
  1813                           
  1814                           ; BSR set to: 0
  1815  001354  908A               	bcf	3978,0,c	;volatile
  1816  001356  D001               	goto	l3192
  1817  001358                     l205:
  1818                           
  1819                           ; BSR set to: 0
  1820                           ;main.c: 222: else LATBbits.LATB0 = 1;
  1821  001358  808A               	bsf	3978,0,c	;volatile
  1822  00135A                     l3192:
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;main.c: 225: ADsetChannel(2);
  1826  00135A  0E02               	movlw	2
  1827  00135C  EC0A  F010         	call	_ADsetChannel
  1828                           
  1829                           ;main.c: 226: filterSum = filterSum - (long) arrFilter[filterIndex];
  1830  001360  0101               	movlb	1	; () banked
  1831  001362  5150               	movf	main@filterIndex& (0+255),w,b
  1832  001364  0D02               	mullw	2
  1833  001366  0101               	movlb	1	; () banked
  1834  001368  0E00               	movlw	low main@arrFilter
  1835  00136A  24F3               	addwf	prodl,w,c
  1836  00136C  6ED9               	movwf	fsr2l,c
  1837  00136E  0101               	movlb	1	; () banked
  1838  001370  0E01               	movlw	high main@arrFilter
  1839  001372  20F4               	addwfc	prodh,w,c
  1840  001374  6EDA               	movwf	fsr2h,c
  1841  001376  CFDE F042          	movff	postinc2,??_main
  1842  00137A  CFDD F043          	movff	postdec2,??_main+1
  1843  00137E  C042  F044         	movff	??_main,??_main+2
  1844  001382  C043  F045         	movff	??_main+1,??_main+3
  1845  001386  0E00               	movlw	0
  1846  001388  BE45               	btfsc	(??_main+3)& (0+255),7,c
  1847  00138A  0EFF               	movlw	255
  1848  00138C  6E46               	movwf	(??_main+4)& (0+255),c
  1849  00138E  6E47               	movwf	(??_main+5)& (0+255),c
  1850  001390  1E44               	comf	??_main+2,f,c
  1851  001392  1E45               	comf	??_main+3,f,c
  1852  001394  1E46               	comf	??_main+4,f,c
  1853  001396  1E47               	comf	??_main+5,f,c
  1854  001398  2A44               	incf	??_main+2,f,c
  1855  00139A  0E00               	movlw	0
  1856  00139C  2245               	addwfc	??_main+3,f,c
  1857  00139E  2246               	addwfc	??_main+4,f,c
  1858  0013A0  2247               	addwfc	??_main+5,f,c
  1859  0013A2  0101               	movlb	1	; () banked
  1860  0013A4  5149               	movf	main@filterSum& (0+255),w,b
  1861  0013A6  2444               	addwf	??_main+2,w,c
  1862  0013A8  0101               	movlb	1	; () banked
  1863  0013AA  6F49               	movwf	main@filterSum& (0+255),b
  1864  0013AC  0101               	movlb	1	; () banked
  1865  0013AE  514A               	movf	(main@filterSum+1)& (0+255),w,b
  1866  0013B0  2045               	addwfc	??_main+3,w,c
  1867  0013B2  0101               	movlb	1	; () banked
  1868  0013B4  6F4A               	movwf	(main@filterSum+1)& (0+255),b
  1869  0013B6  0101               	movlb	1	; () banked
  1870  0013B8  514B               	movf	(main@filterSum+2)& (0+255),w,b
  1871  0013BA  2046               	addwfc	??_main+4,w,c
  1872  0013BC  0101               	movlb	1	; () banked
  1873  0013BE  6F4B               	movwf	(main@filterSum+2)& (0+255),b
  1874  0013C0  0101               	movlb	1	; () banked
  1875  0013C2  514C               	movf	(main@filterSum+3)& (0+255),w,b
  1876  0013C4  2047               	addwfc	??_main+5,w,c
  1877  0013C6  0101               	movlb	1	; () banked
  1878  0013C8  6F4C               	movwf	(main@filterSum+3)& (0+255),b
  1879                           
  1880                           ; BSR set to: 1
  1881                           ;main.c: 227: arrFilter[filterIndex] = readAD();
  1882  0013CA  ECAE  F00F         	call	_readAD	;wreg free
  1883  0013CE  0101               	movlb	1	; () banked
  1884  0013D0  5150               	movf	main@filterIndex& (0+255),w,b
  1885  0013D2  0D02               	mullw	2
  1886  0013D4  0101               	movlb	1	; () banked
  1887  0013D6  0E00               	movlw	low main@arrFilter
  1888  0013D8  24F3               	addwf	prodl,w,c
  1889  0013DA  6ED9               	movwf	fsr2l,c
  1890  0013DC  0101               	movlb	1	; () banked
  1891  0013DE  0E01               	movlw	high main@arrFilter
  1892  0013E0  20F4               	addwfc	prodh,w,c
  1893  0013E2  6EDA               	movwf	fsr2h,c
  1894  0013E4  C012  FFDE         	movff	?_readAD,postinc2
  1895  0013E8  C013  FFDD         	movff	?_readAD+1,postdec2
  1896                           
  1897                           ; BSR set to: 1
  1898                           ;main.c: 228: filterSum = filterSum + (long) arrFilter[filterIndex];
  1899  0013EC  0101               	movlb	1	; () banked
  1900  0013EE  5150               	movf	main@filterIndex& (0+255),w,b
  1901  0013F0  0D02               	mullw	2
  1902  0013F2  0101               	movlb	1	; () banked
  1903  0013F4  0E00               	movlw	low main@arrFilter
  1904  0013F6  24F3               	addwf	prodl,w,c
  1905  0013F8  6ED9               	movwf	fsr2l,c
  1906  0013FA  0101               	movlb	1	; () banked
  1907  0013FC  0E01               	movlw	high main@arrFilter
  1908  0013FE  20F4               	addwfc	prodh,w,c
  1909  001400  6EDA               	movwf	fsr2h,c
  1910  001402  CFDE F042          	movff	postinc2,??_main
  1911  001406  CFDD F043          	movff	postdec2,??_main+1
  1912  00140A  C042  F044         	movff	??_main,??_main+2
  1913  00140E  C043  F045         	movff	??_main+1,??_main+3
  1914  001412  0E00               	movlw	0
  1915  001414  BE45               	btfsc	(??_main+3)& (0+255),7,c
  1916  001416  0EFF               	movlw	255
  1917  001418  6E46               	movwf	(??_main+4)& (0+255),c
  1918  00141A  6E47               	movwf	(??_main+5)& (0+255),c
  1919  00141C  0101               	movlb	1	; () banked
  1920  00141E  5149               	movf	main@filterSum& (0+255),w,b
  1921  001420  2444               	addwf	??_main+2,w,c
  1922  001422  0101               	movlb	1	; () banked
  1923  001424  6F49               	movwf	main@filterSum& (0+255),b
  1924  001426  0101               	movlb	1	; () banked
  1925  001428  514A               	movf	(main@filterSum+1)& (0+255),w,b
  1926  00142A  2045               	addwfc	??_main+3,w,c
  1927  00142C  0101               	movlb	1	; () banked
  1928  00142E  6F4A               	movwf	(main@filterSum+1)& (0+255),b
  1929  001430  0101               	movlb	1	; () banked
  1930  001432  514B               	movf	(main@filterSum+2)& (0+255),w,b
  1931  001434  2046               	addwfc	??_main+4,w,c
  1932  001436  0101               	movlb	1	; () banked
  1933  001438  6F4B               	movwf	(main@filterSum+2)& (0+255),b
  1934  00143A  0101               	movlb	1	; () banked
  1935  00143C  514C               	movf	(main@filterSum+3)& (0+255),w,b
  1936  00143E  2047               	addwfc	??_main+5,w,c
  1937  001440  0101               	movlb	1	; () banked
  1938  001442  6F4C               	movwf	(main@filterSum+3)& (0+255),b
  1939                           
  1940                           ; BSR set to: 1
  1941                           ;main.c: 229: filterIndex++;
  1942  001444  0101               	movlb	1	; () banked
  1943  001446  2B50               	incf	main@filterIndex& (0+255),f,b
  1944                           
  1945                           ; BSR set to: 1
  1946                           ;main.c: 230: if (filterIndex >= 32)
  1947  001448  0E1F               	movlw	31
  1948  00144A  0101               	movlb	1	; () banked
  1949  00144C  6550               	cpfsgt	main@filterIndex& (0+255),b
  1950  00144E  D006               	goto	l3206
  1951                           
  1952                           ; BSR set to: 1
  1953                           ;main.c: 231: {
  1954                           ;main.c: 232: runEnable = !0;
  1955  001450  0E01               	movlw	1
  1956  001452  0101               	movlb	1	; () banked
  1957  001454  6F46               	movwf	main@runEnable& (0+255),b
  1958                           
  1959                           ;main.c: 233: filterIndex = 0;
  1960  001456  0E00               	movlw	0
  1961  001458  0101               	movlb	1	; () banked
  1962  00145A  6F50               	movwf	main@filterIndex& (0+255),b
  1963  00145C                     l3206:
  1964                           
  1965                           ; BSR set to: 1
  1966                           ;main.c: 234: }
  1967                           ;main.c: 235: commandPot = (short)(filterSum / 32);
  1968  00145C  C149  F012         	movff	main@filterSum,___aldiv@dividend
  1969  001460  C14A  F013         	movff	main@filterSum+1,___aldiv@dividend+1
  1970  001464  C14B  F014         	movff	main@filterSum+2,___aldiv@dividend+2
  1971  001468  C14C  F015         	movff	main@filterSum+3,___aldiv@dividend+3
  1972  00146C  0E20               	movlw	32
  1973  00146E  6E16               	movwf	___aldiv@divisor,c
  1974  001470  0E00               	movlw	0
  1975  001472  6E17               	movwf	___aldiv@divisor+1,c
  1976  001474  0E00               	movlw	0
  1977  001476  6E18               	movwf	___aldiv@divisor+2,c
  1978  001478  0E00               	movlw	0
  1979  00147A  6E19               	movwf	___aldiv@divisor+3,c
  1980  00147C  EC56  F00C         	call	___aldiv	;wreg free
  1981  001480  C012  F042         	movff	?___aldiv,??_main
  1982  001484  C013  F043         	movff	?___aldiv+1,??_main+1
  1983  001488  C014  F044         	movff	?___aldiv+2,??_main+2
  1984  00148C  C015  F045         	movff	?___aldiv+3,??_main+3
  1985  001490  C042  F09E         	movff	??_main,_commandPot
  1986  001494  C043  F09F         	movff	??_main+1,_commandPot+1
  1987                           
  1988                           ;main.c: 237: if (runEnable)
  1989  001498  0101               	movlb	1	; () banked
  1990  00149A  5146               	movf	main@runEnable& (0+255),w,b
  1991  00149C  B4D8               	btfsc	status,2,c
  1992  00149E  D040               	goto	l3228
  1993                           
  1994                           ; BSR set to: 1
  1995                           ;main.c: 238: {
  1996                           ;main.c: 239: for (servoID = 1; servoID < 2; servoID++){
  1997  0014A0  0E01               	movlw	1
  1998  0014A2  0101               	movlb	1	; () banked
  1999  0014A4  6F51               	movwf	main@servoID& (0+255),b
  2000  0014A6  D038               	goto	L8
  2001  0014A8                     l3216:
  2002                           
  2003                           ; BSR set to: 1
  2004                           ;main.c: 242: servoPot = readServoPot(servoID, windowFilterIndex);
  2005  0014A8  0101               	movlb	1	; () banked
  2006  0014AA  C151  F032         	movff	main@servoID,readServoPot@servoID
  2007  0014AE  6A33               	clrf	readServoPot@servoID+1,c
  2008  0014B0  C147  F034         	movff	main@windowFilterIndex,readServoPot@filterIndex
  2009  0014B4  EC47  F00E         	call	_readServoPot	;wreg free
  2010  0014B8  C032  F140         	movff	?_readServoPot,main@servoPot
  2011  0014BC  C033  F141         	movff	?_readServoPot+1,main@servoPot+1
  2012                           
  2013                           ;main.c: 245: error = servoPot - commandPot;
  2014  0014C0  0100               	movlb	0	; () banked
  2015  0014C2  C09E  F042         	movff	_commandPot,??_main
  2016  0014C6  0100               	movlb	0	; () banked
  2017  0014C8  C09F  F043         	movff	_commandPot+1,??_main+1
  2018  0014CC  1E42               	comf	??_main,f,c
  2019  0014CE  1E43               	comf	??_main+1,f,c
  2020  0014D0  4A42               	infsnz	??_main,f,c
  2021  0014D2  2A43               	incf	??_main+1,f,c
  2022  0014D4  0101               	movlb	1	; () banked
  2023  0014D6  5140               	movf	main@servoPot& (0+255),w,b
  2024  0014D8  2442               	addwf	??_main,w,c
  2025  0014DA  0101               	movlb	1	; () banked
  2026  0014DC  6F42               	movwf	main@error& (0+255),b
  2027  0014DE  0101               	movlb	1	; () banked
  2028  0014E0  5141               	movf	(main@servoPot+1)& (0+255),w,b
  2029  0014E2  2043               	addwfc	??_main+1,w,c
  2030  0014E4  0101               	movlb	1	; () banked
  2031  0014E6  6F43               	movwf	(main@error+1)& (0+255),b
  2032                           
  2033                           ; BSR set to: 1
  2034                           ;main.c: 248: PWMout = PIDcontrol(servoID, error);
  2035  0014E8  0101               	movlb	1	; () banked
  2036  0014EA  C151  F036         	movff	main@servoID,PIDcontrol@servoID
  2037  0014EE  6A37               	clrf	PIDcontrol@servoID+1,c
  2038  0014F0  C142  F038         	movff	main@error,PIDcontrol@error
  2039  0014F4  C143  F039         	movff	main@error+1,PIDcontrol@error+1
  2040  0014F8  EC4F  F003         	call	_PIDcontrol	;wreg free
  2041  0014FC  C036  F144         	movff	?_PIDcontrol,main@PWMout
  2042  001500  C037  F145         	movff	?_PIDcontrol+1,main@PWMout+1
  2043                           
  2044                           ;main.c: 251: setServoPWM (servoID, PWMout);
  2045  001504  C144  F01B         	movff	main@PWMout,setServoPWM@PWMout
  2046  001508  C145  F01C         	movff	main@PWMout+1,setServoPWM@PWMout+1
  2047  00150C  0101               	movlb	1	; () banked
  2048  00150E  5151               	movf	main@servoID& (0+255),w,b
  2049  001510  ECAC  F00D         	call	_setServoPWM
  2050  001514  0101               	movlb	1	; () banked
  2051  001516  2B51               	incf	main@servoID& (0+255),f,b
  2052  001518                     L8:
  2053                           
  2054                           ; BSR set to: 1
  2055  001518  0E01               	movlw	1
  2056  00151A  0101               	movlb	1	; () banked
  2057  00151C  6551               	cpfsgt	main@servoID& (0+255),b
  2058  00151E  D7C4               	goto	l3216
  2059  001520                     l3228:
  2060                           
  2061                           ; BSR set to: 1
  2062                           ;main.c: 254: }
  2063                           ;main.c: 255: }
  2064                           ;main.c: 256: windowFilterIndex++; if (windowFilterIndex >= 7)windowFilterIndex = 0;
  2065  001520  0101               	movlb	1	; () banked
  2066  001522  2B47               	incf	main@windowFilterIndex& (0+255),f,b
  2067                           
  2068                           ; BSR set to: 1
  2069  001524  0E06               	movlw	6
  2070  001526  0101               	movlb	1	; () banked
  2071  001528  6547               	cpfsgt	main@windowFilterIndex& (0+255),b
  2072  00152A  D59D               	goto	l3084
  2073                           
  2074                           ; BSR set to: 1
  2075  00152C  0E00               	movlw	0
  2076  00152E  0101               	movlb	1	; () banked
  2077  001530  6F47               	movwf	main@windowFilterIndex& (0+255),b
  2078  001532  D599               	goto	l3084
  2079  001534                     __end_of_main:
  2080                           	opt stack 0
  2081                           tblptru	equ	0xFF8
  2082                           tblptrh	equ	0xFF7
  2083                           tblptrl	equ	0xFF6
  2084                           tablat	equ	0xFF5
  2085                           prodh	equ	0xFF4
  2086                           prodl	equ	0xFF3
  2087                           postinc0	equ	0xFEE
  2088                           wreg	equ	0xFE8
  2089                           postdec1	equ	0xFE5
  2090                           fsr1l	equ	0xFE1
  2091                           indf2	equ	0xFDF
  2092                           postinc2	equ	0xFDE
  2093                           postdec2	equ	0xFDD
  2094                           fsr2h	equ	0xFDA
  2095                           fsr2l	equ	0xFD9
  2096                           status	equ	0xFD8
  2097                           
  2098 ;; *************** function _toupper *****************
  2099 ;; Defined at:
  2100 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\toupper.c"
  2101 ;; Parameters:    Size  Location     Type
  2102 ;;  c               1    wreg     unsigned char 
  2103 ;; Auto vars:     Size  Location     Type
  2104 ;;  c               1   17[COMRAM] unsigned char 
  2105 ;; Return value:  Size  Location     Type
  2106 ;;                  1    wreg      unsigned char 
  2107 ;; Registers used:
  2108 ;;		wreg, status,2, status,0
  2109 ;; Tracked objects:
  2110 ;;		On entry : 0/0
  2111 ;;		On exit  : 0/0
  2112 ;;		Unchanged: 0/0
  2113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2114 ;;      Params:         0       0       0       0       0       0       0
  2115 ;;      Locals:         1       0       0       0       0       0       0
  2116 ;;      Temps:          0       0       0       0       0       0       0
  2117 ;;      Totals:         1       0       0       0       0       0       0
  2118 ;;Total ram usage:        1 bytes
  2119 ;; Hardware stack levels used:    1
  2120 ;; Hardware stack levels required when called:    2
  2121 ;; This function calls:
  2122 ;;		Nothing
  2123 ;; This function is called by:
  2124 ;;		_main
  2125 ;; This function uses a non-reentrant model
  2126 ;;
  2127                           
  2128                           	psect	text1
  2129  001FE8                     __ptext1:
  2130                           	opt stack 0
  2131  001FE8                     _toupper:
  2132                           	opt stack 28
  2133                           
  2134                           ; BSR set to: 1
  2135                           ;incstack = 0
  2136                           ;toupper@c stored from wreg
  2137  001FE8  6E12               	movwf	toupper@c,c
  2138  001FEA  0E7B               	movlw	123
  2139  001FEC  5C12               	subwf	toupper@c,w,c
  2140  001FEE  B0D8               	btfsc	status,0,c
  2141  001FF0  D004               	goto	l2898
  2142  001FF2  0E60               	movlw	96
  2143  001FF4  6412               	cpfsgt	toupper@c,c
  2144  001FF6  D001               	goto	l2898
  2145  001FF8  9A12               	bcf	toupper@c,5,c
  2146  001FFA                     l2898:
  2147  001FFA  5012               	movf	toupper@c,w,c
  2148  001FFC  0012               	return	
  2149  001FFE                     __end_of_toupper:
  2150                           	opt stack 0
  2151                           tblptru	equ	0xFF8
  2152                           tblptrh	equ	0xFF7
  2153                           tblptrl	equ	0xFF6
  2154                           tablat	equ	0xFF5
  2155                           prodh	equ	0xFF4
  2156                           prodl	equ	0xFF3
  2157                           postinc0	equ	0xFEE
  2158                           wreg	equ	0xFE8
  2159                           postdec1	equ	0xFE5
  2160                           fsr1l	equ	0xFE1
  2161                           indf2	equ	0xFDF
  2162                           postinc2	equ	0xFDE
  2163                           postdec2	equ	0xFDD
  2164                           fsr2h	equ	0xFDA
  2165                           fsr2l	equ	0xFD9
  2166                           status	equ	0xFD8
  2167                           
  2168 ;; *************** function _setServoPWM *****************
  2169 ;; Defined at:
  2170 ;;		line 261 in file "../main.c"
  2171 ;; Parameters:    Size  Location     Type
  2172 ;;  servoID         1    wreg     unsigned char 
  2173 ;;  PWMout          2   26[COMRAM] short 
  2174 ;; Auto vars:     Size  Location     Type
  2175 ;;  servoID         1   28[COMRAM] unsigned char 
  2176 ;; Return value:  Size  Location     Type
  2177 ;;		None               void
  2178 ;; Registers used:
  2179 ;;		wreg, status,2, status,0, prodl, cstack
  2180 ;; Tracked objects:
  2181 ;;		On entry : 0/0
  2182 ;;		On exit  : 0/0
  2183 ;;		Unchanged: 0/0
  2184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2185 ;;      Params:         2       0       0       0       0       0       0
  2186 ;;      Locals:         1       0       0       0       0       0       0
  2187 ;;      Temps:          0       0       0       0       0       0       0
  2188 ;;      Totals:         3       0       0       0       0       0       0
  2189 ;;Total ram usage:        3 bytes
  2190 ;; Hardware stack levels used:    1
  2191 ;; Hardware stack levels required when called:    3
  2192 ;; This function calls:
  2193 ;;		_SetDutyPWM_A
  2194 ;;		_SetDutyPWM_B
  2195 ;;		_abs
  2196 ;; This function is called by:
  2197 ;;		_main
  2198 ;; This function uses a non-reentrant model
  2199 ;;
  2200                           
  2201                           	psect	text2
  2202  001B58                     __ptext2:
  2203                           	opt stack 0
  2204  001B58                     _setServoPWM:
  2205                           	opt stack 27
  2206                           
  2207                           ;incstack = 0
  2208                           ;setServoPWM@servoID stored from wreg
  2209  001B58  6E1D               	movwf	setServoPWM@servoID,c
  2210                           
  2211                           ;main.c: 263: switch(servoID)
  2212  001B5A  D054               	goto	l3044
  2213  001B5C                     l218:
  2214                           
  2215                           ;main.c: 266: if (PWMout < 0)
  2216  001B5C  501C               	movf	setServoPWM@PWMout+1,w,c
  2217  001B5E  0A80               	xorlw	128
  2218  001B60  6EF3               	movwf	prodl,c
  2219  001B62  0E80               	movlw	128
  2220  001B64  5CF3               	subwf	prodl,w,c
  2221  001B66  0E00               	movlw	0
  2222  001B68  B4D8               	btfsc	status,2,c
  2223  001B6A  5C1B               	subwf	setServoPWM@PWMout,w,c
  2224  001B6C  B0D8               	btfsc	status,0,c
  2225  001B6E  D00C               	goto	l219
  2226                           
  2227                           ;main.c: 267: {
  2228                           ;main.c: 268: PWMout = abs(PWMout);
  2229  001B70  C01B  F012         	movff	setServoPWM@PWMout,abs@a
  2230  001B74  C01C  F013         	movff	setServoPWM@PWMout+1,abs@a+1
  2231  001B78  EC7C  F00F         	call	_abs	;wreg free
  2232  001B7C  C012  F01B         	movff	?_abs,setServoPWM@PWMout
  2233  001B80  C013  F01C         	movff	?_abs+1,setServoPWM@PWMout+1
  2234                           
  2235                           ;main.c: 269: PORTCbits.RC4 = 1;
  2236  001B84  8882               	bsf	3970,4,c	;volatile
  2237                           
  2238                           ;main.c: 270: }
  2239  001B86  D001               	goto	l3024
  2240  001B88                     l219:
  2241                           
  2242                           ;main.c: 271: else PORTCbits.RC4 = 0;
  2243  001B88  9882               	bcf	3970,4,c	;volatile
  2244  001B8A                     l3024:
  2245                           
  2246                           ;main.c: 272: if (PWMout > 1000) PWMout = 1000;
  2247  001B8A  501C               	movf	setServoPWM@PWMout+1,w,c
  2248  001B8C  0A80               	xorlw	128
  2249  001B8E  0F7D               	addlw	-131
  2250  001B90  0EE9               	movlw	233
  2251  001B92  B4D8               	btfsc	status,2,c
  2252  001B94  5C1B               	subwf	setServoPWM@PWMout,w,c
  2253  001B96  A0D8               	btfss	status,0,c
  2254  001B98  D004               	goto	l3028
  2255  001B9A  0E03               	movlw	3
  2256  001B9C  6E1C               	movwf	setServoPWM@PWMout+1,c
  2257  001B9E  0EE8               	movlw	232
  2258  001BA0  6E1B               	movwf	setServoPWM@PWMout,c
  2259  001BA2                     l3028:
  2260                           
  2261                           ;main.c: 273: SetDutyPWM_A(PWMout);
  2262  001BA2  C01B  F012         	movff	setServoPWM@PWMout,SetDutyPWM_A@dutyCycle
  2263  001BA6  C01C  F013         	movff	setServoPWM@PWMout+1,SetDutyPWM_A@dutyCycle+1
  2264  001BAA  EC08  F00F         	call	_SetDutyPWM_A	;wreg free
  2265                           
  2266                           ;main.c: 274: break;
  2267  001BAE  D031               	goto	l228
  2268  001BB0                     l3030:
  2269                           
  2270                           ;main.c: 277: if (PWMout < 0)
  2271  001BB0  501C               	movf	setServoPWM@PWMout+1,w,c
  2272  001BB2  0A80               	xorlw	128
  2273  001BB4  6EF3               	movwf	prodl,c
  2274  001BB6  0E80               	movlw	128
  2275  001BB8  5CF3               	subwf	prodl,w,c
  2276  001BBA  0E00               	movlw	0
  2277  001BBC  B4D8               	btfsc	status,2,c
  2278  001BBE  5C1B               	subwf	setServoPWM@PWMout,w,c
  2279  001BC0  B0D8               	btfsc	status,0,c
  2280  001BC2  D00C               	goto	l224
  2281                           
  2282                           ;main.c: 278: {
  2283                           ;main.c: 279: PWMout = abs(PWMout);
  2284  001BC4  C01B  F012         	movff	setServoPWM@PWMout,abs@a
  2285  001BC8  C01C  F013         	movff	setServoPWM@PWMout+1,abs@a+1
  2286  001BCC  EC7C  F00F         	call	_abs	;wreg free
  2287  001BD0  C012  F01B         	movff	?_abs,setServoPWM@PWMout
  2288  001BD4  C013  F01C         	movff	?_abs+1,setServoPWM@PWMout+1
  2289                           
  2290                           ;main.c: 280: PORTCbits.RC5 = 1;
  2291  001BD8  8A82               	bsf	3970,5,c	;volatile
  2292                           
  2293                           ;main.c: 281: }
  2294  001BDA  D001               	goto	l3036
  2295  001BDC                     l224:
  2296                           
  2297                           ;main.c: 282: else PORTCbits.RC5 = 0;
  2298  001BDC  9A82               	bcf	3970,5,c	;volatile
  2299  001BDE                     l3036:
  2300                           
  2301                           ;main.c: 283: if (PWMout > 1000) PWMout = 1000;
  2302  001BDE  501C               	movf	setServoPWM@PWMout+1,w,c
  2303  001BE0  0A80               	xorlw	128
  2304  001BE2  0F7D               	addlw	-131
  2305  001BE4  0EE9               	movlw	233
  2306  001BE6  B4D8               	btfsc	status,2,c
  2307  001BE8  5C1B               	subwf	setServoPWM@PWMout,w,c
  2308  001BEA  A0D8               	btfss	status,0,c
  2309  001BEC  D004               	goto	l3040
  2310  001BEE  0E03               	movlw	3
  2311  001BF0  6E1C               	movwf	setServoPWM@PWMout+1,c
  2312  001BF2  0EE8               	movlw	232
  2313  001BF4  6E1B               	movwf	setServoPWM@PWMout,c
  2314  001BF6                     l3040:
  2315                           
  2316                           ;main.c: 284: SetDutyPWM_B(PWMout);
  2317  001BF6  C01B  F012         	movff	setServoPWM@PWMout,SetDutyPWM_B@dutyCycle
  2318  001BFA  C01C  F013         	movff	setServoPWM@PWMout+1,SetDutyPWM_B@dutyCycle+1
  2319  001BFE  ECDE  F00E         	call	_SetDutyPWM_B	;wreg free
  2320                           
  2321                           ;main.c: 285: break;
  2322  001C02  D007               	goto	l228
  2323  001C04                     l3044:
  2324  001C04  501D               	movf	setServoPWM@servoID,w,c
  2325                           
  2326                           ; Switch size 1, requested type "space"
  2327                           ; Number of cases is 2, Range of values is 0 to 1
  2328                           ; switch strategies available:
  2329                           ; Name         Instructions Cycles
  2330                           ; simple_byte            7     4 (average)
  2331                           ;	Chosen strategy is simple_byte
  2332  001C06  0A00               	xorlw	0	; case 0
  2333  001C08  B4D8               	btfsc	status,2,c
  2334  001C0A  D7A8               	goto	l218
  2335  001C0C  0A01               	xorlw	1	; case 1
  2336  001C0E  B4D8               	btfsc	status,2,c
  2337  001C10  D7CF               	goto	l3030
  2338  001C12                     l228:
  2339  001C12  0012               	return	
  2340  001C14                     __end_of_setServoPWM:
  2341                           	opt stack 0
  2342                           tblptru	equ	0xFF8
  2343                           tblptrh	equ	0xFF7
  2344                           tblptrl	equ	0xFF6
  2345                           tablat	equ	0xFF5
  2346                           prodh	equ	0xFF4
  2347                           prodl	equ	0xFF3
  2348                           postinc0	equ	0xFEE
  2349                           wreg	equ	0xFE8
  2350                           postdec1	equ	0xFE5
  2351                           fsr1l	equ	0xFE1
  2352                           indf2	equ	0xFDF
  2353                           postinc2	equ	0xFDE
  2354                           postdec2	equ	0xFDD
  2355                           fsr2h	equ	0xFDA
  2356                           fsr2l	equ	0xFD9
  2357                           status	equ	0xFD8
  2358                           
  2359 ;; *************** function _abs *****************
  2360 ;; Defined at:
  2361 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\abs.c"
  2362 ;; Parameters:    Size  Location     Type
  2363 ;;  a               2   17[COMRAM] int 
  2364 ;; Auto vars:     Size  Location     Type
  2365 ;;		None
  2366 ;; Return value:  Size  Location     Type
  2367 ;;                  2   17[COMRAM] int 
  2368 ;; Registers used:
  2369 ;;		wreg, status,2, status,0, prodl
  2370 ;; Tracked objects:
  2371 ;;		On entry : 0/0
  2372 ;;		On exit  : 0/0
  2373 ;;		Unchanged: 0/0
  2374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2375 ;;      Params:         2       0       0       0       0       0       0
  2376 ;;      Locals:         0       0       0       0       0       0       0
  2377 ;;      Temps:          2       0       0       0       0       0       0
  2378 ;;      Totals:         4       0       0       0       0       0       0
  2379 ;;Total ram usage:        4 bytes
  2380 ;; Hardware stack levels used:    1
  2381 ;; Hardware stack levels required when called:    2
  2382 ;; This function calls:
  2383 ;;		Nothing
  2384 ;; This function is called by:
  2385 ;;		_setServoPWM
  2386 ;; This function uses a non-reentrant model
  2387 ;;
  2388                           
  2389                           	psect	text3
  2390  001EF8                     __ptext3:
  2391                           	opt stack 0
  2392  001EF8                     _abs:
  2393                           	opt stack 27
  2394                           
  2395                           ;incstack = 0
  2396  001EF8  5013               	movf	abs@a+1,w,c
  2397  001EFA  0A80               	xorlw	128
  2398  001EFC  6EF3               	movwf	prodl,c
  2399  001EFE  0E80               	movlw	128
  2400  001F00  5CF3               	subwf	prodl,w,c
  2401  001F02  0E00               	movlw	0
  2402  001F04  B4D8               	btfsc	status,2,c
  2403  001F06  5C12               	subwf	abs@a,w,c
  2404  001F08  B0D8               	btfsc	status,0,c
  2405  001F0A  D00D               	goto	l388
  2406  001F0C  C012  F014         	movff	abs@a,??_abs
  2407  001F10  C013  F015         	movff	abs@a+1,??_abs+1
  2408  001F14  1E14               	comf	??_abs,f,c
  2409  001F16  1E15               	comf	??_abs+1,f,c
  2410  001F18  4A14               	infsnz	??_abs,f,c
  2411  001F1A  2A15               	incf	??_abs+1,f,c
  2412  001F1C  C014  F012         	movff	??_abs,?_abs
  2413  001F20  C015  F013         	movff	??_abs+1,?_abs+1
  2414  001F24  D004               	goto	l389
  2415  001F26                     l388:
  2416  001F26  C012  F012         	movff	abs@a,?_abs
  2417  001F2A  C013  F013         	movff	abs@a+1,?_abs+1
  2418  001F2E                     l389:
  2419  001F2E  0012               	return	
  2420  001F30                     __end_of_abs:
  2421                           	opt stack 0
  2422                           tblptru	equ	0xFF8
  2423                           tblptrh	equ	0xFF7
  2424                           tblptrl	equ	0xFF6
  2425                           tablat	equ	0xFF5
  2426                           prodh	equ	0xFF4
  2427                           prodl	equ	0xFF3
  2428                           postinc0	equ	0xFEE
  2429                           wreg	equ	0xFE8
  2430                           postdec1	equ	0xFE5
  2431                           fsr1l	equ	0xFE1
  2432                           indf2	equ	0xFDF
  2433                           postinc2	equ	0xFDE
  2434                           postdec2	equ	0xFDD
  2435                           fsr2h	equ	0xFDA
  2436                           fsr2l	equ	0xFD9
  2437                           status	equ	0xFD8
  2438                           
  2439 ;; *************** function _SetDutyPWM_B *****************
  2440 ;; Defined at:
  2441 ;;		line 436 in file "../main.c"
  2442 ;; Parameters:    Size  Location     Type
  2443 ;;  dutyCycle       2   17[COMRAM] unsigned short 
  2444 ;; Auto vars:     Size  Location     Type
  2445 ;;  ndutyCycle      2   24[COMRAM] unsigned short 
  2446 ;;  lowBits         2   21[COMRAM] unsigned short 
  2447 ;;  maskReg         1   23[COMRAM] unsigned char 
  2448 ;; Return value:  Size  Location     Type
  2449 ;;		None               void
  2450 ;; Registers used:
  2451 ;;		wreg, status,2, status,0
  2452 ;; Tracked objects:
  2453 ;;		On entry : 0/0
  2454 ;;		On exit  : 0/0
  2455 ;;		Unchanged: 0/0
  2456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2457 ;;      Params:         2       0       0       0       0       0       0
  2458 ;;      Locals:         5       0       0       0       0       0       0
  2459 ;;      Temps:          2       0       0       0       0       0       0
  2460 ;;      Totals:         9       0       0       0       0       0       0
  2461 ;;Total ram usage:        9 bytes
  2462 ;; Hardware stack levels used:    1
  2463 ;; Hardware stack levels required when called:    2
  2464 ;; This function calls:
  2465 ;;		Nothing
  2466 ;; This function is called by:
  2467 ;;		_main
  2468 ;;		_setServoPWM
  2469 ;; This function uses a non-reentrant model
  2470 ;;
  2471                           
  2472                           	psect	text4
  2473  001DBC                     __ptext4:
  2474                           	opt stack 0
  2475  001DBC                     _SetDutyPWM_B:
  2476                           	opt stack 27
  2477                           
  2478                           ;main.c: 437: unsigned short lowBits;
  2479                           ;main.c: 438: unsigned short ndutyCycle;
  2480                           ;main.c: 439: unsigned char maskReg = 0x00;
  2481                           
  2482                           ;incstack = 0
  2483  001DBC  0E00               	movlw	0
  2484  001DBE  6E18               	movwf	SetDutyPWM_B@maskReg,c
  2485                           
  2486                           ;main.c: 441: ndutyCycle = dutyCycle;
  2487  001DC0  C012  F019         	movff	SetDutyPWM_B@dutyCycle,SetDutyPWM_B@ndutyCycle
  2488  001DC4  C013  F01A         	movff	SetDutyPWM_B@dutyCycle+1,SetDutyPWM_B@ndutyCycle+1
  2489                           
  2490                           ;main.c: 443: CCPR1L = (ndutyCycle >> 2) & 0xFF;
  2491  001DC8  C019  F014         	movff	SetDutyPWM_B@ndutyCycle,??_SetDutyPWM_B
  2492  001DCC  C01A  F015         	movff	SetDutyPWM_B@ndutyCycle+1,??_SetDutyPWM_B+1
  2493  001DD0  90D8               	bcf	status,0,c
  2494  001DD2  3215               	rrcf	??_SetDutyPWM_B+1,f,c
  2495  001DD4  3214               	rrcf	??_SetDutyPWM_B,f,c
  2496  001DD6  90D8               	bcf	status,0,c
  2497  001DD8  3215               	rrcf	??_SetDutyPWM_B+1,f,c
  2498  001DDA  3214               	rrcf	??_SetDutyPWM_B,f,c
  2499  001DDC  5014               	movf	??_SetDutyPWM_B,w,c
  2500  001DDE  6EBE               	movwf	4030,c	;volatile
  2501                           
  2502                           ;main.c: 444: lowBits = (ndutyCycle << 4) & 0b00110000;
  2503  001DE0  C019  F014         	movff	SetDutyPWM_B@ndutyCycle,??_SetDutyPWM_B
  2504  001DE4  C01A  F015         	movff	SetDutyPWM_B@ndutyCycle+1,??_SetDutyPWM_B+1
  2505  001DE8  3A14               	swapf	??_SetDutyPWM_B,f,c
  2506  001DEA  3A15               	swapf	??_SetDutyPWM_B+1,f,c
  2507  001DEC  0EF0               	movlw	240
  2508  001DEE  1615               	andwf	??_SetDutyPWM_B+1,f,c
  2509  001DF0  5014               	movf	??_SetDutyPWM_B,w,c
  2510  001DF2  0B0F               	andlw	15
  2511  001DF4  1215               	iorwf	??_SetDutyPWM_B+1,f,c
  2512  001DF6  0EF0               	movlw	240
  2513  001DF8  1614               	andwf	??_SetDutyPWM_B,f,c
  2514  001DFA  0E30               	movlw	48
  2515  001DFC  1414               	andwf	??_SetDutyPWM_B,w,c
  2516  001DFE  6E16               	movwf	SetDutyPWM_B@lowBits,c
  2517  001E00  6A17               	clrf	SetDutyPWM_B@lowBits+1,c
  2518                           
  2519                           ;main.c: 445: maskReg = CCP1CON & 0b11001111;
  2520  001E02  50BD               	movf	4029,w,c	;volatile
  2521  001E04  0BCF               	andlw	207
  2522  001E06  6E18               	movwf	SetDutyPWM_B@maskReg,c
  2523                           
  2524                           ;main.c: 446: CCP1CON = maskReg | lowBits;
  2525  001E08  5018               	movf	SetDutyPWM_B@maskReg,w,c
  2526  001E0A  1016               	iorwf	SetDutyPWM_B@lowBits,w,c
  2527  001E0C  6EBD               	movwf	4029,c	;volatile
  2528  001E0E  0012               	return	
  2529  001E10                     __end_of_SetDutyPWM_B:
  2530                           	opt stack 0
  2531                           tblptru	equ	0xFF8
  2532                           tblptrh	equ	0xFF7
  2533                           tblptrl	equ	0xFF6
  2534                           tablat	equ	0xFF5
  2535                           prodh	equ	0xFF4
  2536                           prodl	equ	0xFF3
  2537                           postinc0	equ	0xFEE
  2538                           wreg	equ	0xFE8
  2539                           postdec1	equ	0xFE5
  2540                           fsr1l	equ	0xFE1
  2541                           indf2	equ	0xFDF
  2542                           postinc2	equ	0xFDE
  2543                           postdec2	equ	0xFDD
  2544                           fsr2h	equ	0xFDA
  2545                           fsr2l	equ	0xFD9
  2546                           status	equ	0xFD8
  2547                           
  2548 ;; *************** function _SetDutyPWM_A *****************
  2549 ;; Defined at:
  2550 ;;		line 449 in file "../main.c"
  2551 ;; Parameters:    Size  Location     Type
  2552 ;;  dutyCycle       2   17[COMRAM] unsigned short 
  2553 ;; Auto vars:     Size  Location     Type
  2554 ;;  ndutyCycle      2   24[COMRAM] unsigned short 
  2555 ;;  lowBits         2   21[COMRAM] unsigned short 
  2556 ;;  maskReg         1   23[COMRAM] unsigned char 
  2557 ;; Return value:  Size  Location     Type
  2558 ;;		None               void
  2559 ;; Registers used:
  2560 ;;		wreg, status,2, status,0
  2561 ;; Tracked objects:
  2562 ;;		On entry : 0/0
  2563 ;;		On exit  : 0/0
  2564 ;;		Unchanged: 0/0
  2565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2566 ;;      Params:         2       0       0       0       0       0       0
  2567 ;;      Locals:         5       0       0       0       0       0       0
  2568 ;;      Temps:          2       0       0       0       0       0       0
  2569 ;;      Totals:         9       0       0       0       0       0       0
  2570 ;;Total ram usage:        9 bytes
  2571 ;; Hardware stack levels used:    1
  2572 ;; Hardware stack levels required when called:    2
  2573 ;; This function calls:
  2574 ;;		Nothing
  2575 ;; This function is called by:
  2576 ;;		_main
  2577 ;;		_setServoPWM
  2578 ;; This function uses a non-reentrant model
  2579 ;;
  2580                           
  2581                           	psect	text5
  2582  001E10                     __ptext5:
  2583                           	opt stack 0
  2584  001E10                     _SetDutyPWM_A:
  2585                           	opt stack 27
  2586                           
  2587                           ;main.c: 450: unsigned short lowBits;
  2588                           ;main.c: 451: unsigned short ndutyCycle;
  2589                           ;main.c: 452: unsigned char maskReg = 0x00;
  2590                           
  2591                           ;incstack = 0
  2592  001E10  0E00               	movlw	0
  2593  001E12  6E18               	movwf	SetDutyPWM_A@maskReg,c
  2594                           
  2595                           ;main.c: 454: ndutyCycle = dutyCycle;
  2596  001E14  C012  F019         	movff	SetDutyPWM_A@dutyCycle,SetDutyPWM_A@ndutyCycle
  2597  001E18  C013  F01A         	movff	SetDutyPWM_A@dutyCycle+1,SetDutyPWM_A@ndutyCycle+1
  2598                           
  2599                           ;main.c: 456: CCPR2L = (ndutyCycle >> 2) & 0xFF;
  2600  001E1C  C019  F014         	movff	SetDutyPWM_A@ndutyCycle,??_SetDutyPWM_A
  2601  001E20  C01A  F015         	movff	SetDutyPWM_A@ndutyCycle+1,??_SetDutyPWM_A+1
  2602  001E24  90D8               	bcf	status,0,c
  2603  001E26  3215               	rrcf	??_SetDutyPWM_A+1,f,c
  2604  001E28  3214               	rrcf	??_SetDutyPWM_A,f,c
  2605  001E2A  90D8               	bcf	status,0,c
  2606  001E2C  3215               	rrcf	??_SetDutyPWM_A+1,f,c
  2607  001E2E  3214               	rrcf	??_SetDutyPWM_A,f,c
  2608  001E30  5014               	movf	??_SetDutyPWM_A,w,c
  2609  001E32  6EBB               	movwf	4027,c	;volatile
  2610                           
  2611                           ;main.c: 457: lowBits = (ndutyCycle << 4) & 0b00110000;
  2612  001E34  C019  F014         	movff	SetDutyPWM_A@ndutyCycle,??_SetDutyPWM_A
  2613  001E38  C01A  F015         	movff	SetDutyPWM_A@ndutyCycle+1,??_SetDutyPWM_A+1
  2614  001E3C  3A14               	swapf	??_SetDutyPWM_A,f,c
  2615  001E3E  3A15               	swapf	??_SetDutyPWM_A+1,f,c
  2616  001E40  0EF0               	movlw	240
  2617  001E42  1615               	andwf	??_SetDutyPWM_A+1,f,c
  2618  001E44  5014               	movf	??_SetDutyPWM_A,w,c
  2619  001E46  0B0F               	andlw	15
  2620  001E48  1215               	iorwf	??_SetDutyPWM_A+1,f,c
  2621  001E4A  0EF0               	movlw	240
  2622  001E4C  1614               	andwf	??_SetDutyPWM_A,f,c
  2623  001E4E  0E30               	movlw	48
  2624  001E50  1414               	andwf	??_SetDutyPWM_A,w,c
  2625  001E52  6E16               	movwf	SetDutyPWM_A@lowBits,c
  2626  001E54  6A17               	clrf	SetDutyPWM_A@lowBits+1,c
  2627                           
  2628                           ;main.c: 458: maskReg = CCP2CON & 0b11001111;
  2629  001E56  50BA               	movf	4026,w,c	;volatile
  2630  001E58  0BCF               	andlw	207
  2631  001E5A  6E18               	movwf	SetDutyPWM_A@maskReg,c
  2632                           
  2633                           ;main.c: 459: CCP2CON = maskReg | lowBits;
  2634  001E5C  5018               	movf	SetDutyPWM_A@maskReg,w,c
  2635  001E5E  1016               	iorwf	SetDutyPWM_A@lowBits,w,c
  2636  001E60  6EBA               	movwf	4026,c	;volatile
  2637  001E62  0012               	return	
  2638  001E64                     __end_of_SetDutyPWM_A:
  2639                           	opt stack 0
  2640                           tblptru	equ	0xFF8
  2641                           tblptrh	equ	0xFF7
  2642                           tblptrl	equ	0xFF6
  2643                           tablat	equ	0xFF5
  2644                           prodh	equ	0xFF4
  2645                           prodl	equ	0xFF3
  2646                           postinc0	equ	0xFEE
  2647                           wreg	equ	0xFE8
  2648                           postdec1	equ	0xFE5
  2649                           fsr1l	equ	0xFE1
  2650                           indf2	equ	0xFDF
  2651                           postinc2	equ	0xFDE
  2652                           postdec2	equ	0xFDD
  2653                           fsr2h	equ	0xFDA
  2654                           fsr2l	equ	0xFD9
  2655                           status	equ	0xFD8
  2656                           
  2657 ;; *************** function _readServoPot *****************
  2658 ;; Defined at:
  2659 ;;		line 291 in file "../main.c"
  2660 ;; Parameters:    Size  Location     Type
  2661 ;;  servoID         2   49[COMRAM] short 
  2662 ;;  filterIndex     1   51[COMRAM] unsigned char 
  2663 ;; Auto vars:     Size  Location     Type
  2664 ;;  servoPotFilt    2   56[COMRAM] short 
  2665 ;;  servoPotValu    2   54[COMRAM] short 
  2666 ;; Return value:  Size  Location     Type
  2667 ;;                  2   49[COMRAM] short 
  2668 ;; Registers used:
  2669 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2670 ;; Tracked objects:
  2671 ;;		On entry : 0/0
  2672 ;;		On exit  : 0/0
  2673 ;;		Unchanged: 0/0
  2674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2675 ;;      Params:         3       0       0       0       0       0       0
  2676 ;;      Locals:         4       0       0       0       0       0       0
  2677 ;;      Temps:          2       0       0       0       0       0       0
  2678 ;;      Totals:         9       0       0       0       0       0       0
  2679 ;;Total ram usage:        9 bytes
  2680 ;; Hardware stack levels used:    1
  2681 ;; Hardware stack levels required when called:    4
  2682 ;; This function calls:
  2683 ;;		_ADsetChannel
  2684 ;;		___wmul
  2685 ;;		_readAD
  2686 ;;		_windowFilter
  2687 ;; This function is called by:
  2688 ;;		_main
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           	psect	text6
  2693  001C8E                     __ptext6:
  2694                           	opt stack 0
  2695  001C8E                     _readServoPot:
  2696                           	opt stack 26
  2697                           
  2698                           ;main.c: 293: short servoPotValue, servoPotFiltered;
  2699                           ;main.c: 295: ADsetChannel(channel[servoID]);
  2700                           
  2701                           ;incstack = 0
  2702  001C8E  0E59               	movlw	low _channel
  2703  001C90  2432               	addwf	readServoPot@servoID,w,c
  2704  001C92  6ED9               	movwf	fsr2l,c
  2705  001C94  0E00               	movlw	high _channel
  2706  001C96  2033               	addwfc	readServoPot@servoID+1,w,c
  2707  001C98  6EDA               	movwf	fsr2h,c
  2708  001C9A  50DF               	movf	indf2,w,c
  2709  001C9C  EC0A  F010         	call	_ADsetChannel
  2710                           
  2711                           ;main.c: 296: servoPotValue = readAD();
  2712  001CA0  ECAE  F00F         	call	_readAD	;wreg free
  2713  001CA4  C012  F037         	movff	?_readAD,readServoPot@servoPotValue
  2714  001CA8  C013  F038         	movff	?_readAD+1,readServoPot@servoPotValue+1
  2715                           
  2716                           ;main.c: 297: servoWindowArray[servoID][filterIndex] = servoPotValue;
  2717  001CAC  C032  F012         	movff	readServoPot@servoID,___wmul@multiplier
  2718  001CB0  C033  F013         	movff	readServoPot@servoID+1,___wmul@multiplier+1
  2719  001CB4  0E00               	movlw	0
  2720  001CB6  6E15               	movwf	___wmul@multiplicand+1,c
  2721  001CB8  0E0E               	movlw	14
  2722  001CBA  6E14               	movwf	___wmul@multiplicand,c
  2723  001CBC  ECC1  F00F         	call	___wmul	;wreg free
  2724  001CC0  0E56               	movlw	low _servoWindowArray
  2725  001CC2  6E35               	movwf	??_readServoPot& (0+255),c
  2726  001CC4  0E01               	movlw	high _servoWindowArray
  2727  001CC6  6E36               	movwf	(??_readServoPot+1)& (0+255),c
  2728  001CC8  5012               	movf	?___wmul,w,c
  2729  001CCA  2635               	addwf	??_readServoPot,f,c
  2730  001CCC  5013               	movf	?___wmul+1,w,c
  2731  001CCE  2236               	addwfc	??_readServoPot+1,f,c
  2732  001CD0  5034               	movf	readServoPot@filterIndex,w,c
  2733  001CD2  0D02               	mullw	2
  2734  001CD4  50F3               	movf	prodl,w,c
  2735  001CD6  2435               	addwf	??_readServoPot,w,c
  2736  001CD8  6ED9               	movwf	fsr2l,c
  2737  001CDA  50F4               	movf	prodh,w,c
  2738  001CDC  2036               	addwfc	??_readServoPot+1,w,c
  2739  001CDE  6EDA               	movwf	fsr2h,c
  2740  001CE0  C037  FFDE         	movff	readServoPot@servoPotValue,postinc2
  2741  001CE4  C038  FFDD         	movff	readServoPot@servoPotValue+1,postdec2
  2742                           
  2743                           ;main.c: 298: servoPotFiltered = windowFilter(servoID);
  2744  001CE8  C032  F018         	movff	readServoPot@servoID,windowFilter@servoID
  2745  001CEC  C033  F019         	movff	readServoPot@servoID+1,windowFilter@servoID+1
  2746  001CF0  ECD8  F00B         	call	_windowFilter	;wreg free
  2747  001CF4  C018  F039         	movff	?_windowFilter,readServoPot@servoPotFiltered
  2748  001CF8  C019  F03A         	movff	?_windowFilter+1,readServoPot@servoPotFiltered+1
  2749                           
  2750                           ;main.c: 300: return servoPotFiltered;
  2751  001CFC  C039  F032         	movff	readServoPot@servoPotFiltered,?_readServoPot
  2752  001D00  C03A  F033         	movff	readServoPot@servoPotFiltered+1,?_readServoPot+1
  2753  001D04  0012               	return	
  2754  001D06                     __end_of_readServoPot:
  2755                           	opt stack 0
  2756                           tblptru	equ	0xFF8
  2757                           tblptrh	equ	0xFF7
  2758                           tblptrl	equ	0xFF6
  2759                           tablat	equ	0xFF5
  2760                           prodh	equ	0xFF4
  2761                           prodl	equ	0xFF3
  2762                           postinc0	equ	0xFEE
  2763                           wreg	equ	0xFE8
  2764                           postdec1	equ	0xFE5
  2765                           fsr1l	equ	0xFE1
  2766                           indf2	equ	0xFDF
  2767                           postinc2	equ	0xFDE
  2768                           postdec2	equ	0xFDD
  2769                           fsr2h	equ	0xFDA
  2770                           fsr2l	equ	0xFD9
  2771                           status	equ	0xFD8
  2772                           
  2773 ;; *************** function _windowFilter *****************
  2774 ;; Defined at:
  2775 ;;		line 533 in file "../main.c"
  2776 ;; Parameters:    Size  Location     Type
  2777 ;;  servoID         2   23[COMRAM] short 
  2778 ;; Auto vars:     Size  Location     Type
  2779 ;;  sortArr        14   27[COMRAM] short [7]
  2780 ;;  highData        2   45[COMRAM] short 
  2781 ;;  lowData         2   43[COMRAM] short 
  2782 ;;  midData         2   41[COMRAM] short 
  2783 ;;  i               1   48[COMRAM] unsigned char 
  2784 ;;  j               1   47[COMRAM] unsigned char 
  2785 ;; Return value:  Size  Location     Type
  2786 ;;                  2   23[COMRAM] short 
  2787 ;; Registers used:
  2788 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2789 ;; Tracked objects:
  2790 ;;		On entry : 0/0
  2791 ;;		On exit  : 0/0
  2792 ;;		Unchanged: 0/0
  2793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2794 ;;      Params:         2       0       0       0       0       0       0
  2795 ;;      Locals:        22       0       0       0       0       0       0
  2796 ;;      Temps:          2       0       0       0       0       0       0
  2797 ;;      Totals:        26       0       0       0       0       0       0
  2798 ;;Total ram usage:       26 bytes
  2799 ;; Hardware stack levels used:    1
  2800 ;; Hardware stack levels required when called:    3
  2801 ;; This function calls:
  2802 ;;		___wmul
  2803 ;; This function is called by:
  2804 ;;		_readServoPot
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           	psect	text7
  2809  0017B0                     __ptext7:
  2810                           	opt stack 0
  2811  0017B0                     _windowFilter:
  2812                           	opt stack 26
  2813                           
  2814                           ;main.c: 535: short sortArr[7];
  2815                           ;main.c: 536: short lowData, highData, midData;
  2816                           ;main.c: 537: unsigned char i, j;
  2817                           ;main.c: 539: for (i = 0; i < 7; i++)
  2818                           
  2819                           ;incstack = 0
  2820  0017B0  0E00               	movlw	0
  2821  0017B2  6E31               	movwf	windowFilter@i,c
  2822  0017B4  D027               	goto	L10
  2823  0017B6                     l2686:
  2824                           
  2825                           ;main.c: 540: sortArr[i] = servoWindowArray[servoID][i];
  2826  0017B6  C018  F012         	movff	windowFilter@servoID,___wmul@multiplier
  2827  0017BA  C019  F013         	movff	windowFilter@servoID+1,___wmul@multiplier+1
  2828  0017BE  0E00               	movlw	0
  2829  0017C0  6E15               	movwf	___wmul@multiplicand+1,c
  2830  0017C2  0E0E               	movlw	14
  2831  0017C4  6E14               	movwf	___wmul@multiplicand,c
  2832  0017C6  ECC1  F00F         	call	___wmul	;wreg free
  2833  0017CA  0E56               	movlw	low _servoWindowArray
  2834  0017CC  6E1A               	movwf	??_windowFilter& (0+255),c
  2835  0017CE  0E01               	movlw	high _servoWindowArray
  2836  0017D0  6E1B               	movwf	(??_windowFilter+1)& (0+255),c
  2837  0017D2  5012               	movf	?___wmul,w,c
  2838  0017D4  261A               	addwf	??_windowFilter,f,c
  2839  0017D6  5013               	movf	?___wmul+1,w,c
  2840  0017D8  221B               	addwfc	??_windowFilter+1,f,c
  2841  0017DA  5031               	movf	windowFilter@i,w,c
  2842  0017DC  0D02               	mullw	2
  2843  0017DE  50F3               	movf	prodl,w,c
  2844  0017E0  241A               	addwf	??_windowFilter,w,c
  2845  0017E2  6ED9               	movwf	fsr2l,c
  2846  0017E4  50F4               	movf	prodh,w,c
  2847  0017E6  201B               	addwfc	??_windowFilter+1,w,c
  2848  0017E8  6EDA               	movwf	fsr2h,c
  2849  0017EA  5031               	movf	windowFilter@i,w,c
  2850  0017EC  0D02               	mullw	2
  2851  0017EE  0E1C               	movlw	low windowFilter@sortArr
  2852  0017F0  24F3               	addwf	prodl,w,c
  2853  0017F2  6EE1               	movwf	fsr1l,c
  2854  0017F4  0E00               	movlw	high windowFilter@sortArr
  2855  0017F6  20F4               	addwfc	prodh,w,c
  2856  0017F8  6EE2               	movwf	fsr1h,c
  2857  0017FA  CFDE FFE6          	movff	postinc2,postinc1
  2858  0017FE  CFDD FFE5          	movff	postdec2,postdec1
  2859  001802  2A31               	incf	windowFilter@i,f,c
  2860  001804                     L10:
  2861  001804  0E06               	movlw	6
  2862  001806  6431               	cpfsgt	windowFilter@i,c
  2863  001808  D7D6               	goto	l2686
  2864                           
  2865                           ;main.c: 542: for (i = 0; i < 7; i++) {
  2866  00180A  0E00               	movlw	0
  2867  00180C  6E31               	movwf	windowFilter@i,c
  2868  00180E  D042               	goto	L9
  2869  001810                     l2698:
  2870                           
  2871                           ;main.c: 543: lowData = sortArr[i];
  2872  001810  5031               	movf	windowFilter@i,w,c
  2873  001812  0D02               	mullw	2
  2874  001814  0E1C               	movlw	low windowFilter@sortArr
  2875  001816  24F3               	addwf	prodl,w,c
  2876  001818  6ED9               	movwf	fsr2l,c
  2877  00181A  0E00               	movlw	high windowFilter@sortArr
  2878  00181C  20F4               	addwfc	prodh,w,c
  2879  00181E  6EDA               	movwf	fsr2h,c
  2880  001820  CFDE F02C          	movff	postinc2,windowFilter@lowData
  2881  001824  CFDD F02D          	movff	postdec2,windowFilter@lowData+1
  2882                           
  2883                           ;main.c: 544: j = i + 1;
  2884  001828  2831               	incf	windowFilter@i,w,c
  2885  00182A  6E30               	movwf	windowFilter@j,c
  2886                           
  2887                           ;main.c: 545: while (j < 7) {
  2888  00182C  D02F               	goto	l2710
  2889  00182E                     l2702:
  2890                           
  2891                           ;main.c: 546: highData = sortArr[j];
  2892  00182E  5030               	movf	windowFilter@j,w,c
  2893  001830  0D02               	mullw	2
  2894  001832  0E1C               	movlw	low windowFilter@sortArr
  2895  001834  24F3               	addwf	prodl,w,c
  2896  001836  6ED9               	movwf	fsr2l,c
  2897  001838  0E00               	movlw	high windowFilter@sortArr
  2898  00183A  20F4               	addwfc	prodh,w,c
  2899  00183C  6EDA               	movwf	fsr2h,c
  2900  00183E  CFDE F02E          	movff	postinc2,windowFilter@highData
  2901  001842  CFDD F02F          	movff	postdec2,windowFilter@highData+1
  2902                           
  2903                           ;main.c: 547: if (highData < lowData) {
  2904  001846  502F               	movf	windowFilter@highData+1,w,c
  2905  001848  0A80               	xorlw	128
  2906  00184A  6E1A               	movwf	??_windowFilter& (0+255),c
  2907  00184C  502C               	movf	windowFilter@lowData,w,c
  2908  00184E  5C2E               	subwf	windowFilter@highData,w,c
  2909  001850  502D               	movf	windowFilter@lowData+1,w,c
  2910  001852  0A80               	xorlw	128
  2911  001854  581A               	subwfb	??_windowFilter& (0+255),w,c
  2912  001856  B0D8               	btfsc	status,0,c
  2913  001858  D018               	goto	l2708
  2914                           
  2915                           ;main.c: 548: sortArr[i] = highData;
  2916  00185A  5031               	movf	windowFilter@i,w,c
  2917  00185C  0D02               	mullw	2
  2918  00185E  0E1C               	movlw	low windowFilter@sortArr
  2919  001860  24F3               	addwf	prodl,w,c
  2920  001862  6ED9               	movwf	fsr2l,c
  2921  001864  0E00               	movlw	high windowFilter@sortArr
  2922  001866  20F4               	addwfc	prodh,w,c
  2923  001868  6EDA               	movwf	fsr2h,c
  2924  00186A  C02E  FFDE         	movff	windowFilter@highData,postinc2
  2925  00186E  C02F  FFDD         	movff	windowFilter@highData+1,postdec2
  2926                           
  2927                           ;main.c: 549: sortArr[j] = lowData;
  2928  001872  5030               	movf	windowFilter@j,w,c
  2929  001874  0D02               	mullw	2
  2930  001876  0E1C               	movlw	low windowFilter@sortArr
  2931  001878  24F3               	addwf	prodl,w,c
  2932  00187A  6ED9               	movwf	fsr2l,c
  2933  00187C  0E00               	movlw	high windowFilter@sortArr
  2934  00187E  20F4               	addwfc	prodh,w,c
  2935  001880  6EDA               	movwf	fsr2h,c
  2936  001882  C02C  FFDE         	movff	windowFilter@lowData,postinc2
  2937  001886  C02D  FFDD         	movff	windowFilter@lowData+1,postdec2
  2938  00188A                     l2708:
  2939                           
  2940                           ;main.c: 550: }
  2941                           ;main.c: 551: j++;
  2942  00188A  2A30               	incf	windowFilter@j,f,c
  2943  00188C                     l2710:
  2944  00188C  0E06               	movlw	6
  2945  00188E  6430               	cpfsgt	windowFilter@j,c
  2946  001890  D7CE               	goto	l2702
  2947  001892  2A31               	incf	windowFilter@i,f,c
  2948  001894                     L9:
  2949  001894  0E06               	movlw	6
  2950  001896  6431               	cpfsgt	windowFilter@i,c
  2951  001898  D7BB               	goto	l2698
  2952                           
  2953                           ;main.c: 552: }
  2954                           ;main.c: 553: }
  2955                           ;main.c: 554: midData = sortArr[((7-1)/2)];
  2956  00189A  C022  F02A         	movff	windowFilter@sortArr+6,windowFilter@midData
  2957  00189E  C023  F02B         	movff	windowFilter@sortArr+7,windowFilter@midData+1
  2958                           
  2959                           ;main.c: 555: return (midData);
  2960  0018A2  C02A  F018         	movff	windowFilter@midData,?_windowFilter
  2961  0018A6  C02B  F019         	movff	windowFilter@midData+1,?_windowFilter+1
  2962  0018AA  0012               	return	
  2963  0018AC                     __end_of_windowFilter:
  2964                           	opt stack 0
  2965                           tblptru	equ	0xFF8
  2966                           tblptrh	equ	0xFF7
  2967                           tblptrl	equ	0xFF6
  2968                           tablat	equ	0xFF5
  2969                           prodh	equ	0xFF4
  2970                           prodl	equ	0xFF3
  2971                           postinc0	equ	0xFEE
  2972                           wreg	equ	0xFE8
  2973                           postinc1	equ	0xFE6
  2974                           postdec1	equ	0xFE5
  2975                           fsr1h	equ	0xFE2
  2976                           fsr1l	equ	0xFE1
  2977                           indf2	equ	0xFDF
  2978                           postinc2	equ	0xFDE
  2979                           postdec2	equ	0xFDD
  2980                           fsr2h	equ	0xFDA
  2981                           fsr2l	equ	0xFD9
  2982                           status	equ	0xFD8
  2983                           
  2984 ;; *************** function _readAD *****************
  2985 ;; Defined at:
  2986 ;;		line 517 in file "../main.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;		None
  2989 ;; Auto vars:     Size  Location     Type
  2990 ;;  ADresult        2   21[COMRAM] short 
  2991 ;; Return value:  Size  Location     Type
  2992 ;;                  2   17[COMRAM] short 
  2993 ;; Registers used:
  2994 ;;		wreg, status,2, status,0
  2995 ;; Tracked objects:
  2996 ;;		On entry : 0/0
  2997 ;;		On exit  : 0/0
  2998 ;;		Unchanged: 0/0
  2999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3000 ;;      Params:         2       0       0       0       0       0       0
  3001 ;;      Locals:         2       0       0       0       0       0       0
  3002 ;;      Temps:          2       0       0       0       0       0       0
  3003 ;;      Totals:         6       0       0       0       0       0       0
  3004 ;;Total ram usage:        6 bytes
  3005 ;; Hardware stack levels used:    1
  3006 ;; Hardware stack levels required when called:    2
  3007 ;; This function calls:
  3008 ;;		Nothing
  3009 ;; This function is called by:
  3010 ;;		_main
  3011 ;;		_readServoPot
  3012 ;; This function uses a non-reentrant model
  3013 ;;
  3014                           
  3015                           	psect	text8
  3016  001F5C                     __ptext8:
  3017                           	opt stack 0
  3018  001F5C                     _readAD:
  3019                           	opt stack 27
  3020  001F5C                     l293:
  3021  001F5C  AC9E               	btfss	3998,6,c	;volatile
  3022  001F5E  D7FE               	goto	l293
  3023                           
  3024                           ;main.c: 520: ADresult = (short) ADRESL;
  3025  001F60  CFC3 F016          	movff	4035,readAD@ADresult	;volatile
  3026  001F64  6A17               	clrf	readAD@ADresult+1,c
  3027                           
  3028                           ;main.c: 521: ADresult = ADresult | (ADRESH << 8);
  3029  001F66  50C4               	movf	4036,w,c	;volatile
  3030  001F68  6E15               	movwf	(??_readAD+1)& (0+255),c
  3031  001F6A  6A14               	clrf	??_readAD& (0+255),c
  3032  001F6C  5016               	movf	readAD@ADresult,w,c
  3033  001F6E  1014               	iorwf	??_readAD,w,c
  3034  001F70  6E16               	movwf	readAD@ADresult,c
  3035  001F72  5017               	movf	readAD@ADresult+1,w,c
  3036  001F74  1015               	iorwf	??_readAD+1,w,c
  3037  001F76  6E17               	movwf	readAD@ADresult+1,c
  3038                           
  3039                           ;main.c: 522: return (ADresult);
  3040  001F78  C016  F012         	movff	readAD@ADresult,?_readAD
  3041  001F7C  C017  F013         	movff	readAD@ADresult+1,?_readAD+1
  3042  001F80  0012               	return	
  3043  001F82                     __end_of_readAD:
  3044                           	opt stack 0
  3045                           tblptru	equ	0xFF8
  3046                           tblptrh	equ	0xFF7
  3047                           tblptrl	equ	0xFF6
  3048                           tablat	equ	0xFF5
  3049                           prodh	equ	0xFF4
  3050                           prodl	equ	0xFF3
  3051                           postinc0	equ	0xFEE
  3052                           wreg	equ	0xFE8
  3053                           postinc1	equ	0xFE6
  3054                           postdec1	equ	0xFE5
  3055                           fsr1h	equ	0xFE2
  3056                           fsr1l	equ	0xFE1
  3057                           indf2	equ	0xFDF
  3058                           postinc2	equ	0xFDE
  3059                           postdec2	equ	0xFDD
  3060                           fsr2h	equ	0xFDA
  3061                           fsr2l	equ	0xFD9
  3062                           status	equ	0xFD8
  3063                           
  3064 ;; *************** function _ADsetChannel *****************
  3065 ;; Defined at:
  3066 ;;		line 425 in file "../main.c"
  3067 ;; Parameters:    Size  Location     Type
  3068 ;;  channel         1    wreg     unsigned char 
  3069 ;; Auto vars:     Size  Location     Type
  3070 ;;  channel         1   17[COMRAM] unsigned char 
  3071 ;; Return value:  Size  Location     Type
  3072 ;;		None               void
  3073 ;; Registers used:
  3074 ;;		wreg, status,2, status,0
  3075 ;; Tracked objects:
  3076 ;;		On entry : 0/0
  3077 ;;		On exit  : 0/0
  3078 ;;		Unchanged: 0/0
  3079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3080 ;;      Params:         0       0       0       0       0       0       0
  3081 ;;      Locals:         1       0       0       0       0       0       0
  3082 ;;      Temps:          0       0       0       0       0       0       0
  3083 ;;      Totals:         1       0       0       0       0       0       0
  3084 ;;Total ram usage:        1 bytes
  3085 ;; Hardware stack levels used:    1
  3086 ;; Hardware stack levels required when called:    2
  3087 ;; This function calls:
  3088 ;;		Nothing
  3089 ;; This function is called by:
  3090 ;;		_main
  3091 ;;		_readServoPot
  3092 ;; This function uses a non-reentrant model
  3093 ;;
  3094                           
  3095                           	psect	text9
  3096  002014                     __ptext9:
  3097                           	opt stack 0
  3098  002014                     _ADsetChannel:
  3099                           	opt stack 27
  3100                           
  3101                           ;incstack = 0
  3102                           ;ADsetChannel@channel stored from wreg
  3103  002014  6E12               	movwf	ADsetChannel@channel,c
  3104                           
  3105                           ;main.c: 426: ADCON0 = (channel << 2) | 0x03;
  3106  002016  4412               	rlncf	ADsetChannel@channel,w,c
  3107  002018  46E8               	rlncf	wreg,f,c
  3108  00201A  0BFC               	andlw	252
  3109  00201C  0903               	iorlw	3
  3110  00201E  6EC2               	movwf	4034,c	;volatile
  3111                           
  3112                           ;main.c: 427: ADCON0bits.ADON = 1;
  3113  002020  80C2               	bsf	4034,0,c	;volatile
  3114                           
  3115                           ;main.c: 428: ADCON0bits.GO_DONE = 1;
  3116  002022  82C2               	bsf	4034,1,c	;volatile
  3117                           
  3118                           ;main.c: 429: PIR1bits.ADIF = 0;
  3119  002024  9C9E               	bcf	3998,6,c	;volatile
  3120  002026  0012               	return	
  3121  002028                     __end_of_ADsetChannel:
  3122                           	opt stack 0
  3123                           tblptru	equ	0xFF8
  3124                           tblptrh	equ	0xFF7
  3125                           tblptrl	equ	0xFF6
  3126                           tablat	equ	0xFF5
  3127                           prodh	equ	0xFF4
  3128                           prodl	equ	0xFF3
  3129                           postinc0	equ	0xFEE
  3130                           wreg	equ	0xFE8
  3131                           postinc1	equ	0xFE6
  3132                           postdec1	equ	0xFE5
  3133                           fsr1h	equ	0xFE2
  3134                           fsr1l	equ	0xFE1
  3135                           indf2	equ	0xFDF
  3136                           postinc2	equ	0xFDE
  3137                           postdec2	equ	0xFDD
  3138                           fsr2h	equ	0xFDA
  3139                           fsr2l	equ	0xFD9
  3140                           status	equ	0xFD8
  3141                           
  3142 ;; *************** function _isalpha *****************
  3143 ;; Defined at:
  3144 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isalpha.c"
  3145 ;; Parameters:    Size  Location     Type
  3146 ;;  c               1    wreg     unsigned char 
  3147 ;; Auto vars:     Size  Location     Type
  3148 ;;  c               1   22[COMRAM] unsigned char 
  3149 ;; Return value:  Size  Location     Type
  3150 ;;		None               void
  3151 ;; Registers used:
  3152 ;;		wreg, status,2, status,0, cstack
  3153 ;; Tracked objects:
  3154 ;;		On entry : 0/0
  3155 ;;		On exit  : 0/0
  3156 ;;		Unchanged: 0/0
  3157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3158 ;;      Params:         0       0       0       0       0       0       0
  3159 ;;      Locals:         2       0       0       0       0       0       0
  3160 ;;      Temps:          1       0       0       0       0       0       0
  3161 ;;      Totals:         3       0       0       0       0       0       0
  3162 ;;Total ram usage:        3 bytes
  3163 ;; Hardware stack levels used:    1
  3164 ;; Hardware stack levels required when called:    3
  3165 ;; This function calls:
  3166 ;;		_isupper
  3167 ;; This function is called by:
  3168 ;;		_main
  3169 ;; This function uses a non-reentrant model
  3170 ;;
  3171                           
  3172                           	psect	text10
  3173  001F30                     __ptext10:
  3174                           	opt stack 0
  3175  001F30                     _isalpha:
  3176                           	opt stack 27
  3177                           
  3178                           ;incstack = 0
  3179                           ;isalpha@c stored from wreg
  3180  001F30  6E17               	movwf	isalpha@c,c
  3181  001F32  0E01               	movlw	1
  3182  001F34  6E16               	movwf	_isalpha$975,c
  3183  001F36  0E7B               	movlw	123
  3184  001F38  5C17               	subwf	isalpha@c,w,c
  3185  001F3A  B0D8               	btfsc	status,0,c
  3186  001F3C  D004               	goto	l2908
  3187  001F3E  0E61               	movlw	97
  3188  001F40  5C17               	subwf	isalpha@c,w,c
  3189  001F42  B0D8               	btfsc	status,0,c
  3190  001F44  D007               	goto	l2912
  3191  001F46                     l2908:
  3192  001F46  5017               	movf	isalpha@c,w,c
  3193  001F48  ECD4  F00F         	call	_isupper
  3194  001F4C  B0D8               	btfsc	status,0,c
  3195  001F4E  D002               	goto	l2912
  3196  001F50  0E00               	movlw	0
  3197  001F52  6E16               	movwf	_isalpha$975,c
  3198  001F54                     l2912:
  3199  001F54  C016  F015         	movff	_isalpha$975,??_isalpha
  3200  001F58  3015               	rrcf	??_isalpha,w,c
  3201  001F5A  0012               	return	
  3202  001F5C                     __end_of_isalpha:
  3203                           	opt stack 0
  3204                           tblptru	equ	0xFF8
  3205                           tblptrh	equ	0xFF7
  3206                           tblptrl	equ	0xFF6
  3207                           tablat	equ	0xFF5
  3208                           prodh	equ	0xFF4
  3209                           prodl	equ	0xFF3
  3210                           postinc0	equ	0xFEE
  3211                           wreg	equ	0xFE8
  3212                           postinc1	equ	0xFE6
  3213                           postdec1	equ	0xFE5
  3214                           fsr1h	equ	0xFE2
  3215                           fsr1l	equ	0xFE1
  3216                           indf2	equ	0xFDF
  3217                           postinc2	equ	0xFDE
  3218                           postdec2	equ	0xFDD
  3219                           fsr2h	equ	0xFDA
  3220                           fsr2l	equ	0xFD9
  3221                           status	equ	0xFD8
  3222                           
  3223 ;; *************** function _isupper *****************
  3224 ;; Defined at:
  3225 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isupper.c"
  3226 ;; Parameters:    Size  Location     Type
  3227 ;;  c               1    wreg     unsigned char 
  3228 ;; Auto vars:     Size  Location     Type
  3229 ;;  c               1   19[COMRAM] unsigned char 
  3230 ;; Return value:  Size  Location     Type
  3231 ;;		None               void
  3232 ;; Registers used:
  3233 ;;		wreg, status,2, status,0
  3234 ;; Tracked objects:
  3235 ;;		On entry : 0/0
  3236 ;;		On exit  : 0/0
  3237 ;;		Unchanged: 0/0
  3238 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3239 ;;      Params:         0       0       0       0       0       0       0
  3240 ;;      Locals:         2       0       0       0       0       0       0
  3241 ;;      Temps:          1       0       0       0       0       0       0
  3242 ;;      Totals:         3       0       0       0       0       0       0
  3243 ;;Total ram usage:        3 bytes
  3244 ;; Hardware stack levels used:    1
  3245 ;; Hardware stack levels required when called:    2
  3246 ;; This function calls:
  3247 ;;		Nothing
  3248 ;; This function is called by:
  3249 ;;		_isalpha
  3250 ;; This function uses a non-reentrant model
  3251 ;;
  3252                           
  3253                           	psect	text11
  3254  001FA8                     __ptext11:
  3255                           	opt stack 0
  3256  001FA8                     _isupper:
  3257                           	opt stack 27
  3258                           
  3259                           ;incstack = 0
  3260                           ;isupper@c stored from wreg
  3261  001FA8  6E14               	movwf	isupper@c,c
  3262  001FAA  0E00               	movlw	0
  3263  001FAC  6E13               	movwf	_isupper$981,c
  3264  001FAE  0E5B               	movlw	91
  3265  001FB0  5C14               	subwf	isupper@c,w,c
  3266  001FB2  B0D8               	btfsc	status,0,c
  3267  001FB4  D005               	goto	l2778
  3268  001FB6  0E40               	movlw	64
  3269  001FB8  6414               	cpfsgt	isupper@c,c
  3270  001FBA  D002               	goto	l2778
  3271  001FBC  0E01               	movlw	1
  3272  001FBE  6E13               	movwf	_isupper$981,c
  3273  001FC0                     l2778:
  3274  001FC0  C013  F012         	movff	_isupper$981,??_isupper
  3275  001FC4  3012               	rrcf	??_isupper,w,c
  3276  001FC6  0012               	return	
  3277  001FC8                     __end_of_isupper:
  3278                           	opt stack 0
  3279                           tblptru	equ	0xFF8
  3280                           tblptrh	equ	0xFF7
  3281                           tblptrl	equ	0xFF6
  3282                           tablat	equ	0xFF5
  3283                           prodh	equ	0xFF4
  3284                           prodl	equ	0xFF3
  3285                           postinc0	equ	0xFEE
  3286                           wreg	equ	0xFE8
  3287                           postinc1	equ	0xFE6
  3288                           postdec1	equ	0xFE5
  3289                           fsr1h	equ	0xFE2
  3290                           fsr1l	equ	0xFE1
  3291                           indf2	equ	0xFDF
  3292                           postinc2	equ	0xFDE
  3293                           postdec2	equ	0xFDD
  3294                           fsr2h	equ	0xFDA
  3295                           fsr2l	equ	0xFD9
  3296                           status	equ	0xFD8
  3297                           
  3298 ;; *************** function _initializePorts *****************
  3299 ;; Defined at:
  3300 ;;		line 303 in file "../main.c"
  3301 ;; Parameters:    Size  Location     Type
  3302 ;;		None
  3303 ;; Auto vars:     Size  Location     Type
  3304 ;;		None
  3305 ;; Return value:  Size  Location     Type
  3306 ;;		None               void
  3307 ;; Registers used:
  3308 ;;		wreg, status,2
  3309 ;; Tracked objects:
  3310 ;;		On entry : 0/0
  3311 ;;		On exit  : 0/0
  3312 ;;		Unchanged: 0/0
  3313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3314 ;;      Params:         0       0       0       0       0       0       0
  3315 ;;      Locals:         0       0       0       0       0       0       0
  3316 ;;      Temps:          0       0       0       0       0       0       0
  3317 ;;      Totals:         0       0       0       0       0       0       0
  3318 ;;Total ram usage:        0 bytes
  3319 ;; Hardware stack levels used:    1
  3320 ;; Hardware stack levels required when called:    2
  3321 ;; This function calls:
  3322 ;;		Nothing
  3323 ;; This function is called by:
  3324 ;;		_main
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           	psect	text12
  3329  001C14                     __ptext12:
  3330                           	opt stack 0
  3331  001C14                     _initializePorts:
  3332                           	opt stack 28
  3333                           
  3334                           ;main.c: 305: ADCON1 = 0b00001010;
  3335                           
  3336                           ;incstack = 0
  3337  001C14  0E0A               	movlw	10
  3338  001C16  6EC1               	movwf	4033,c	;volatile
  3339                           
  3340                           ;main.c: 306: ADCON2 = 0b10111111;
  3341  001C18  0EBF               	movlw	191
  3342  001C1A  6EC0               	movwf	4032,c	;volatile
  3343                           
  3344                           ;main.c: 307: ADCON0 = 0b00000000;
  3345  001C1C  0E00               	movlw	0
  3346  001C1E  6EC2               	movwf	4034,c	;volatile
  3347                           
  3348                           ;main.c: 309: TRISA = 0b11111111;
  3349  001C20  6892               	setf	3986,c	;volatile
  3350                           
  3351                           ;main.c: 310: TRISB = 0b11111110;
  3352  001C22  0EFE               	movlw	254
  3353  001C24  6E93               	movwf	3987,c	;volatile
  3354                           
  3355                           ;main.c: 312: RBPU = 0;
  3356  001C26  9EF1               	bcf	intcon2,7,c	;volatile
  3357                           
  3358                           ;main.c: 313: TRISC = 0b10000001;
  3359  001C28  0E81               	movlw	129
  3360  001C2A  6E94               	movwf	3988,c	;volatile
  3361                           
  3362                           ;main.c: 316: T2CON = 0x00;
  3363  001C2C  0E00               	movlw	0
  3364  001C2E  6ECA               	movwf	4042,c	;volatile
  3365                           
  3366                           ;main.c: 317: T2CONbits.T2OUTPS0 = 1;
  3367  001C30  86CA               	bsf	4042,3,c	;volatile
  3368                           
  3369                           ;main.c: 318: T2CONbits.T2OUTPS1 = 1;
  3370  001C32  88CA               	bsf	4042,4,c	;volatile
  3371                           
  3372                           ;main.c: 319: T2CONbits.T2OUTPS2 = 1;
  3373  001C34  8ACA               	bsf	4042,5,c	;volatile
  3374                           
  3375                           ;main.c: 320: T2CONbits.T2OUTPS3 = 1;
  3376  001C36  8CCA               	bsf	4042,6,c	;volatile
  3377                           
  3378                           ;main.c: 321: T2CONbits.T2CKPS0 = 0;
  3379  001C38  90CA               	bcf	4042,0,c	;volatile
  3380                           
  3381                           ;main.c: 322: T2CONbits.T2CKPS1 = 0;
  3382  001C3A  92CA               	bcf	4042,1,c	;volatile
  3383                           
  3384                           ;main.c: 323: PR2 = 233;
  3385  001C3C  0EE9               	movlw	233
  3386  001C3E  6ECB               	movwf	4043,c	;volatile
  3387                           
  3388                           ;main.c: 324: T2CONbits.TMR2ON = 1;
  3389  001C40  84CA               	bsf	4042,2,c	;volatile
  3390                           
  3391                           ;main.c: 326: CCPR1L = 0x80;
  3392  001C42  0E80               	movlw	128
  3393  001C44  6EBE               	movwf	4030,c	;volatile
  3394                           
  3395                           ;main.c: 327: CCP1CON = 0b00001100;
  3396  001C46  0E0C               	movlw	12
  3397  001C48  6EBD               	movwf	4029,c	;volatile
  3398                           
  3399                           ;main.c: 328: CCPR2L = 0x80;
  3400  001C4A  0E80               	movlw	128
  3401  001C4C  6EBB               	movwf	4027,c	;volatile
  3402                           
  3403                           ;main.c: 329: CCP2CON = 0b00001100;
  3404  001C4E  0E0C               	movlw	12
  3405  001C50  6EBA               	movwf	4026,c	;volatile
  3406                           
  3407                           ;main.c: 331: CCP1CONbits.DC1B0 = 0;
  3408  001C52  98BD               	bcf	4029,4,c	;volatile
  3409                           
  3410                           ;main.c: 332: CCP1CONbits.DC1B1 = 0;
  3411  001C54  9ABD               	bcf	4029,5,c	;volatile
  3412                           
  3413                           ;main.c: 333: CCP2CONbits.DC2B0 = 0;
  3414  001C56  98BA               	bcf	4026,4,c	;volatile
  3415                           
  3416                           ;main.c: 334: CCP2CONbits.DC2B1 = 0;
  3417  001C58  9ABA               	bcf	4026,5,c	;volatile
  3418                           
  3419                           ;main.c: 336: BRGH = 1;
  3420  001C5A  84AC               	bsf	4012,2,c	;volatile
  3421                           
  3422                           ;main.c: 337: SPBRG = 19;
  3423  001C5C  0E13               	movlw	19
  3424  001C5E  6EAF               	movwf	4015,c	;volatile
  3425                           
  3426                           ;main.c: 340: SYNC = 0;
  3427  001C60  98AC               	bcf	4012,4,c	;volatile
  3428                           
  3429                           ;main.c: 341: SPEN = 1;
  3430  001C62  8EAB               	bsf	4011,7,c	;volatile
  3431                           
  3432                           ;main.c: 342: CREN = 1;
  3433  001C64  88AB               	bsf	4011,4,c	;volatile
  3434                           
  3435                           ;main.c: 343: SREN = 0;
  3436  001C66  9AAB               	bcf	4011,5,c	;volatile
  3437                           
  3438                           ;main.c: 344: TXIE = 0;
  3439  001C68  989D               	bcf	3997,4,c	;volatile
  3440                           
  3441                           ;main.c: 345: RCIE = 1;
  3442  001C6A  8A9D               	bsf	3997,5,c	;volatile
  3443                           
  3444                           ;main.c: 346: TX9 = 0;
  3445  001C6C  9CAC               	bcf	4012,6,c	;volatile
  3446                           
  3447                           ;main.c: 347: RX9 = 0;
  3448  001C6E  9CAB               	bcf	4011,6,c	;volatile
  3449                           
  3450                           ;main.c: 348: TXEN = 1;
  3451  001C70  8AAC               	bsf	4012,5,c	;volatile
  3452                           
  3453                           ;main.c: 350: INTCON = 0x00;
  3454  001C72  0E00               	movlw	0
  3455  001C74  6EF2               	movwf	intcon,c	;volatile
  3456                           
  3457                           ;main.c: 351: PIE1 = 0;
  3458  001C76  0E00               	movlw	0
  3459  001C78  6E9D               	movwf	3997,c	;volatile
  3460                           
  3461                           ;main.c: 352: SSPIE = 0;
  3462  001C7A  969D               	bcf	3997,3,c	;volatile
  3463                           
  3464                           ;main.c: 354: TXIE = 0;
  3465  001C7C  989D               	bcf	3997,4,c	;volatile
  3466                           
  3467                           ;main.c: 355: RCIE = 1;
  3468  001C7E  8A9D               	bsf	3997,5,c	;volatile
  3469                           
  3470                           ;main.c: 357: PEIE = 1;
  3471  001C80  8CF2               	bsf	intcon,6,c	;volatile
  3472                           
  3473                           ;main.c: 358: TMR1IE = 0;
  3474  001C82  909D               	bcf	3997,0,c	;volatile
  3475                           
  3476                           ;main.c: 359: TMR2IF = 0;
  3477  001C84  929E               	bcf	3998,1,c	;volatile
  3478                           
  3479                           ;main.c: 360: TMR2IE = 1;
  3480  001C86  829D               	bsf	3997,1,c	;volatile
  3481                           
  3482                           ;main.c: 361: ADIE = 0;
  3483  001C88  9C9D               	bcf	3997,6,c	;volatile
  3484                           
  3485                           ;main.c: 362: GIE = 1;
  3486  001C8A  8EF2               	bsf	intcon,7,c	;volatile
  3487  001C8C  0012               	return	
  3488  001C8E                     __end_of_initializePorts:
  3489                           	opt stack 0
  3490                           tblptru	equ	0xFF8
  3491                           tblptrh	equ	0xFF7
  3492                           tblptrl	equ	0xFF6
  3493                           tablat	equ	0xFF5
  3494                           prodh	equ	0xFF4
  3495                           prodl	equ	0xFF3
  3496                           intcon	equ	0xFF2
  3497                           intcon2	equ	0xFF1
  3498                           postinc0	equ	0xFEE
  3499                           wreg	equ	0xFE8
  3500                           postinc1	equ	0xFE6
  3501                           postdec1	equ	0xFE5
  3502                           fsr1h	equ	0xFE2
  3503                           fsr1l	equ	0xFE1
  3504                           indf2	equ	0xFDF
  3505                           postinc2	equ	0xFDE
  3506                           postdec2	equ	0xFDD
  3507                           fsr2h	equ	0xFDA
  3508                           fsr2l	equ	0xFD9
  3509                           status	equ	0xFD8
  3510                           
  3511 ;; *************** function _initializeErrorArrays *****************
  3512 ;; Defined at:
  3513 ;;		line 102 in file "../main.c"
  3514 ;; Parameters:    Size  Location     Type
  3515 ;;		None
  3516 ;; Auto vars:     Size  Location     Type
  3517 ;;  j               2   27[COMRAM] unsigned short 
  3518 ;;  i               2   25[COMRAM] unsigned short 
  3519 ;; Return value:  Size  Location     Type
  3520 ;;		None               void
  3521 ;; Registers used:
  3522 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3523 ;; Tracked objects:
  3524 ;;		On entry : 0/0
  3525 ;;		On exit  : 0/0
  3526 ;;		Unchanged: 0/0
  3527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3528 ;;      Params:         0       0       0       0       0       0       0
  3529 ;;      Locals:         4       0       0       0       0       0       0
  3530 ;;      Temps:          2       0       0       0       0       0       0
  3531 ;;      Totals:         6       0       0       0       0       0       0
  3532 ;;Total ram usage:        6 bytes
  3533 ;; Hardware stack levels used:    1
  3534 ;; Hardware stack levels required when called:    3
  3535 ;; This function calls:
  3536 ;;		___wmul
  3537 ;; This function is called by:
  3538 ;;		_main
  3539 ;; This function uses a non-reentrant model
  3540 ;;
  3541                           
  3542                           	psect	text13
  3543  0019A8                     __ptext13:
  3544                           	opt stack 0
  3545  0019A8                     _initializeErrorArrays:
  3546                           	opt stack 27
  3547                           
  3548                           ;main.c: 103: unsigned short i, j;
  3549                           ;main.c: 105: for(j = 0; j < 2; j++){
  3550                           
  3551                           ;incstack = 0
  3552  0019A8  0E00               	movlw	0
  3553  0019AA  6E1D               	movwf	initializeErrorArrays@j+1,c
  3554  0019AC  0E00               	movlw	0
  3555  0019AE  6E1C               	movwf	initializeErrorArrays@j,c
  3556  0019B0  0E02               	movlw	2
  3557  0019B2  5C1C               	subwf	initializeErrorArrays@j,w,c
  3558  0019B4  0E00               	movlw	0
  3559  0019B6  581D               	subwfb	initializeErrorArrays@j+1,w,c
  3560  0019B8  B0D8               	btfsc	status,0,c
  3561  0019BA  D02F               	goto	l2804
  3562                           
  3563                           ;main.c: 106: for(i = 0; i < 3; i++) errorDerivative[j][i] = 0;
  3564  0019BC  0E00               	movlw	0
  3565  0019BE  6E1B               	movwf	initializeErrorArrays@i+1,c
  3566  0019C0  0E00               	movlw	0
  3567  0019C2  6E1A               	movwf	initializeErrorArrays@i,c
  3568  0019C4  0E03               	movlw	3
  3569  0019C6  5C1A               	subwf	initializeErrorArrays@i,w,c
  3570  0019C8  0E00               	movlw	0
  3571  0019CA  581B               	subwfb	initializeErrorArrays@i+1,w,c
  3572  0019CC  B0D8               	btfsc	status,0,c
  3573  0019CE  D022               	goto	l2800
  3574  0019D0  C01C  F012         	movff	initializeErrorArrays@j,___wmul@multiplier
  3575  0019D4  C01D  F013         	movff	initializeErrorArrays@j+1,___wmul@multiplier+1
  3576  0019D8  0E00               	movlw	0
  3577  0019DA  6E15               	movwf	___wmul@multiplicand+1,c
  3578  0019DC  0E06               	movlw	6
  3579  0019DE  6E14               	movwf	___wmul@multiplicand,c
  3580  0019E0  ECC1  F00F         	call	___wmul	;wreg free
  3581  0019E4  0E48               	movlw	low _errorDerivative
  3582  0019E6  6E18               	movwf	??_initializeErrorArrays& (0+255),c
  3583  0019E8  0E00               	movlw	high _errorDerivative
  3584  0019EA  6E19               	movwf	(??_initializeErrorArrays+1)& (0+255),c
  3585  0019EC  5012               	movf	?___wmul,w,c
  3586  0019EE  2618               	addwf	??_initializeErrorArrays,f,c
  3587  0019F0  5013               	movf	?___wmul+1,w,c
  3588  0019F2  2219               	addwfc	??_initializeErrorArrays+1,f,c
  3589  0019F4  90D8               	bcf	status,0,c
  3590  0019F6  341A               	rlcf	initializeErrorArrays@i,w,c
  3591  0019F8  6ED9               	movwf	fsr2l,c
  3592  0019FA  341B               	rlcf	initializeErrorArrays@i+1,w,c
  3593  0019FC  6EDA               	movwf	fsr2h,c
  3594  0019FE  5018               	movf	??_initializeErrorArrays,w,c
  3595  001A00  26D9               	addwf	fsr2l,f,c
  3596  001A02  5019               	movf	??_initializeErrorArrays+1,w,c
  3597  001A04  22DA               	addwfc	fsr2h,f,c
  3598  001A06  0E00               	movlw	0
  3599  001A08  6EDE               	movwf	postinc2,c
  3600  001A0A  0E00               	movlw	0
  3601  001A0C  6EDD               	movwf	postdec2,c
  3602  001A0E  4A1A               	infsnz	initializeErrorArrays@i,f,c
  3603  001A10  2A1B               	incf	initializeErrorArrays@i+1,f,c
  3604  001A12  D7D8               	goto	L11
  3605  001A14                     l2800:
  3606  001A14  4A1C               	infsnz	initializeErrorArrays@j,f,c
  3607  001A16  2A1D               	incf	initializeErrorArrays@j+1,f,c
  3608  001A18  D7CB               	goto	L12
  3609  001A1A                     l2804:
  3610                           
  3611                           ;main.c: 107: }
  3612                           ;main.c: 109: for(j = 0; j < 2; j++){
  3613  001A1A  0E00               	movlw	0
  3614  001A1C  6E1D               	movwf	initializeErrorArrays@j+1,c
  3615  001A1E  0E00               	movlw	0
  3616  001A20  6E1C               	movwf	initializeErrorArrays@j,c
  3617  001A22  0E02               	movlw	2
  3618  001A24  5C1C               	subwf	initializeErrorArrays@j,w,c
  3619  001A26  0E00               	movlw	0
  3620  001A28  581D               	subwfb	initializeErrorArrays@j+1,w,c
  3621  001A2A  B0D8               	btfsc	status,0,c
  3622  001A2C  D02F               	goto	l159
  3623                           
  3624                           ;main.c: 110: for (i = 0; i < 7; i++) servoWindowArray[j][i] = 0;
  3625  001A2E  0E00               	movlw	0
  3626  001A30  6E1B               	movwf	initializeErrorArrays@i+1,c
  3627  001A32  0E00               	movlw	0
  3628  001A34  6E1A               	movwf	initializeErrorArrays@i,c
  3629  001A36  0E07               	movlw	7
  3630  001A38  5C1A               	subwf	initializeErrorArrays@i,w,c
  3631  001A3A  0E00               	movlw	0
  3632  001A3C  581B               	subwfb	initializeErrorArrays@i+1,w,c
  3633  001A3E  B0D8               	btfsc	status,0,c
  3634  001A40  D022               	goto	l2822
  3635  001A42  C01C  F012         	movff	initializeErrorArrays@j,___wmul@multiplier
  3636  001A46  C01D  F013         	movff	initializeErrorArrays@j+1,___wmul@multiplier+1
  3637  001A4A  0E00               	movlw	0
  3638  001A4C  6E15               	movwf	___wmul@multiplicand+1,c
  3639  001A4E  0E0E               	movlw	14
  3640  001A50  6E14               	movwf	___wmul@multiplicand,c
  3641  001A52  ECC1  F00F         	call	___wmul	;wreg free
  3642  001A56  0E56               	movlw	low _servoWindowArray
  3643  001A58  6E18               	movwf	??_initializeErrorArrays& (0+255),c
  3644  001A5A  0E01               	movlw	high _servoWindowArray
  3645  001A5C  6E19               	movwf	(??_initializeErrorArrays+1)& (0+255),c
  3646  001A5E  5012               	movf	?___wmul,w,c
  3647  001A60  2618               	addwf	??_initializeErrorArrays,f,c
  3648  001A62  5013               	movf	?___wmul+1,w,c
  3649  001A64  2219               	addwfc	??_initializeErrorArrays+1,f,c
  3650  001A66  90D8               	bcf	status,0,c
  3651  001A68  341A               	rlcf	initializeErrorArrays@i,w,c
  3652  001A6A  6ED9               	movwf	fsr2l,c
  3653  001A6C  341B               	rlcf	initializeErrorArrays@i+1,w,c
  3654  001A6E  6EDA               	movwf	fsr2h,c
  3655  001A70  5018               	movf	??_initializeErrorArrays,w,c
  3656  001A72  26D9               	addwf	fsr2l,f,c
  3657  001A74  5019               	movf	??_initializeErrorArrays+1,w,c
  3658  001A76  22DA               	addwfc	fsr2h,f,c
  3659  001A78  0E00               	movlw	0
  3660  001A7A  6EDE               	movwf	postinc2,c
  3661  001A7C  0E00               	movlw	0
  3662  001A7E  6EDD               	movwf	postdec2,c
  3663  001A80  4A1A               	infsnz	initializeErrorArrays@i,f,c
  3664  001A82  2A1B               	incf	initializeErrorArrays@i+1,f,c
  3665  001A84  D7D8               	goto	L13
  3666  001A86                     l2822:
  3667  001A86  4A1C               	infsnz	initializeErrorArrays@j,f,c
  3668  001A88  2A1D               	incf	initializeErrorArrays@j+1,f,c
  3669  001A8A  D7CB               	goto	L14
  3670  001A8C                     l159:
  3671  001A8C  0012               	return	
  3672  001A8E                     __end_of_initializeErrorArrays:
  3673                           	opt stack 0
  3674                           tblptru	equ	0xFF8
  3675                           tblptrh	equ	0xFF7
  3676                           tblptrl	equ	0xFF6
  3677                           tablat	equ	0xFF5
  3678                           prodh	equ	0xFF4
  3679                           prodl	equ	0xFF3
  3680                           intcon	equ	0xFF2
  3681                           intcon2	equ	0xFF1
  3682                           postinc0	equ	0xFEE
  3683                           wreg	equ	0xFE8
  3684                           postinc1	equ	0xFE6
  3685                           postdec1	equ	0xFE5
  3686                           fsr1h	equ	0xFE2
  3687                           fsr1l	equ	0xFE1
  3688                           indf2	equ	0xFDF
  3689                           postinc2	equ	0xFDE
  3690                           postdec2	equ	0xFDD
  3691                           fsr2h	equ	0xFDA
  3692                           fsr2l	equ	0xFD9
  3693                           status	equ	0xFD8
  3694                           
  3695 ;; *************** function _atoi *****************
  3696 ;; Defined at:
  3697 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\atoi.c"
  3698 ;; Parameters:    Size  Location     Type
  3699 ;;  s               2   23[COMRAM] PTR const unsigned char 
  3700 ;;		 -> NUMbuffer(17), 
  3701 ;; Auto vars:     Size  Location     Type
  3702 ;;  a               2   28[COMRAM] int 
  3703 ;;  sign            1   27[COMRAM] unsigned char 
  3704 ;; Return value:  Size  Location     Type
  3705 ;;                  2   23[COMRAM] int 
  3706 ;; Registers used:
  3707 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3708 ;; Tracked objects:
  3709 ;;		On entry : 0/0
  3710 ;;		On exit  : 0/0
  3711 ;;		Unchanged: 0/0
  3712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3713 ;;      Params:         2       0       0       0       0       0       0
  3714 ;;      Locals:         3       0       0       0       0       0       0
  3715 ;;      Temps:          2       0       0       0       0       0       0
  3716 ;;      Totals:         7       0       0       0       0       0       0
  3717 ;;Total ram usage:        7 bytes
  3718 ;; Hardware stack levels used:    1
  3719 ;; Hardware stack levels required when called:    3
  3720 ;; This function calls:
  3721 ;;		___wmul
  3722 ;;		_isdigit
  3723 ;; This function is called by:
  3724 ;;		_main
  3725 ;; This function uses a non-reentrant model
  3726 ;;
  3727                           
  3728                           	psect	text14
  3729  001A8E                     __ptext14:
  3730                           	opt stack 0
  3731  001A8E                     _atoi:
  3732                           	opt stack 27
  3733                           
  3734                           ;incstack = 0
  3735  001A8E  D002               	goto	l2920
  3736  001A90                     l2918:
  3737  001A90  4A18               	infsnz	atoi@s,f,c
  3738  001A92  2A19               	incf	atoi@s+1,f,c
  3739  001A94                     l2920:
  3740  001A94  C018  FFD9         	movff	atoi@s,fsr2l
  3741  001A98  C019  FFDA         	movff	atoi@s+1,fsr2h
  3742  001A9C  50DF               	movf	indf2,w,c
  3743  001A9E  0A20               	xorlw	32
  3744  001AA0  B4D8               	btfsc	status,2,c
  3745  001AA2  D7F6               	goto	l2918
  3746  001AA4  C018  FFD9         	movff	atoi@s,fsr2l
  3747  001AA8  C019  FFDA         	movff	atoi@s+1,fsr2h
  3748  001AAC  50DF               	movf	indf2,w,c
  3749  001AAE  0A09               	xorlw	9
  3750  001AB0  B4D8               	btfsc	status,2,c
  3751  001AB2  D7EE               	goto	l2918
  3752  001AB4  0E00               	movlw	0
  3753  001AB6  6E1E               	movwf	atoi@a+1,c
  3754  001AB8  0E00               	movlw	0
  3755  001ABA  6E1D               	movwf	atoi@a,c
  3756  001ABC  0E00               	movlw	0
  3757  001ABE  6E1C               	movwf	atoi@sign,c
  3758  001AC0  0E2D               	movlw	45
  3759  001AC2  C018  FFD9         	movff	atoi@s,fsr2l
  3760  001AC6  C019  FFDA         	movff	atoi@s+1,fsr2h
  3761  001ACA  62DF               	cpfseq	indf2,c
  3762  001ACC  D002               	goto	l2930
  3763  001ACE  2A1C               	incf	atoi@sign,f,c
  3764  001AD0  D023               	goto	L15
  3765  001AD2                     l2930:
  3766  001AD2  0E2B               	movlw	43
  3767  001AD4  C018  FFD9         	movff	atoi@s,fsr2l
  3768  001AD8  C019  FFDA         	movff	atoi@s+1,fsr2h
  3769  001ADC  62DF               	cpfseq	indf2,c
  3770  001ADE  D01E               	goto	l2938
  3771  001AE0  D01B               	goto	L15
  3772  001AE2                     l2934:
  3773  001AE2  C01D  F012         	movff	atoi@a,___wmul@multiplier
  3774  001AE6  C01E  F013         	movff	atoi@a+1,___wmul@multiplier+1
  3775  001AEA  0E00               	movlw	0
  3776  001AEC  6E15               	movwf	___wmul@multiplicand+1,c
  3777  001AEE  0E0A               	movlw	10
  3778  001AF0  6E14               	movwf	___wmul@multiplicand,c
  3779  001AF2  ECC1  F00F         	call	___wmul	;wreg free
  3780  001AF6  C018  FFD9         	movff	atoi@s,fsr2l
  3781  001AFA  C019  FFDA         	movff	atoi@s+1,fsr2h
  3782  001AFE  50DF               	movf	indf2,w,c
  3783  001B00  6E1A               	movwf	??_atoi& (0+255),c
  3784  001B02  6A1B               	clrf	(??_atoi+1)& (0+255),c
  3785  001B04  5012               	movf	?___wmul,w,c
  3786  001B06  261A               	addwf	??_atoi,f,c
  3787  001B08  5013               	movf	?___wmul+1,w,c
  3788  001B0A  221B               	addwfc	??_atoi+1,f,c
  3789  001B0C  0ED0               	movlw	208
  3790  001B0E  241A               	addwf	??_atoi,w,c
  3791  001B10  6E1D               	movwf	atoi@a,c
  3792  001B12  0EFF               	movlw	255
  3793  001B14  201B               	addwfc	??_atoi+1,w,c
  3794  001B16  6E1E               	movwf	atoi@a+1,c
  3795  001B18                     L15:
  3796  001B18  4A18               	infsnz	atoi@s,f,c
  3797  001B1A  2A19               	incf	atoi@s+1,f,c
  3798  001B1C                     l2938:
  3799  001B1C  C018  FFD9         	movff	atoi@s,fsr2l
  3800  001B20  C019  FFDA         	movff	atoi@s+1,fsr2h
  3801  001B24  50DF               	movf	indf2,w,c
  3802  001B26  ECE4  F00F         	call	_isdigit
  3803  001B2A  B0D8               	btfsc	status,0,c
  3804  001B2C  D7DA               	goto	l2934
  3805  001B2E  501C               	movf	atoi@sign,w,c
  3806  001B30  B4D8               	btfsc	status,2,c
  3807  001B32  D00D               	goto	l527
  3808  001B34  C01D  F01A         	movff	atoi@a,??_atoi
  3809  001B38  C01E  F01B         	movff	atoi@a+1,??_atoi+1
  3810  001B3C  1E1A               	comf	??_atoi,f,c
  3811  001B3E  1E1B               	comf	??_atoi+1,f,c
  3812  001B40  4A1A               	infsnz	??_atoi,f,c
  3813  001B42  2A1B               	incf	??_atoi+1,f,c
  3814  001B44  C01A  F018         	movff	??_atoi,?_atoi
  3815  001B48  C01B  F019         	movff	??_atoi+1,?_atoi+1
  3816  001B4C  D004               	goto	l528
  3817  001B4E                     l527:
  3818  001B4E  C01D  F018         	movff	atoi@a,?_atoi
  3819  001B52  C01E  F019         	movff	atoi@a+1,?_atoi+1
  3820  001B56                     l528:
  3821  001B56  0012               	return	
  3822  001B58                     __end_of_atoi:
  3823                           	opt stack 0
  3824                           tblptru	equ	0xFF8
  3825                           tblptrh	equ	0xFF7
  3826                           tblptrl	equ	0xFF6
  3827                           tablat	equ	0xFF5
  3828                           prodh	equ	0xFF4
  3829                           prodl	equ	0xFF3
  3830                           intcon	equ	0xFF2
  3831                           intcon2	equ	0xFF1
  3832                           postinc0	equ	0xFEE
  3833                           wreg	equ	0xFE8
  3834                           postinc1	equ	0xFE6
  3835                           postdec1	equ	0xFE5
  3836                           fsr1h	equ	0xFE2
  3837                           fsr1l	equ	0xFE1
  3838                           indf2	equ	0xFDF
  3839                           postinc2	equ	0xFDE
  3840                           postdec2	equ	0xFDD
  3841                           fsr2h	equ	0xFDA
  3842                           fsr2l	equ	0xFD9
  3843                           status	equ	0xFD8
  3844                           
  3845 ;; *************** function _isdigit *****************
  3846 ;; Defined at:
  3847 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\isdigit.c"
  3848 ;; Parameters:    Size  Location     Type
  3849 ;;  c               1    wreg     unsigned char 
  3850 ;; Auto vars:     Size  Location     Type
  3851 ;;  c               1   19[COMRAM] unsigned char 
  3852 ;; Return value:  Size  Location     Type
  3853 ;;		None               void
  3854 ;; Registers used:
  3855 ;;		wreg, status,2, status,0
  3856 ;; Tracked objects:
  3857 ;;		On entry : 0/0
  3858 ;;		On exit  : 0/0
  3859 ;;		Unchanged: 0/0
  3860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3861 ;;      Params:         0       0       0       0       0       0       0
  3862 ;;      Locals:         2       0       0       0       0       0       0
  3863 ;;      Temps:          1       0       0       0       0       0       0
  3864 ;;      Totals:         3       0       0       0       0       0       0
  3865 ;;Total ram usage:        3 bytes
  3866 ;; Hardware stack levels used:    1
  3867 ;; Hardware stack levels required when called:    2
  3868 ;; This function calls:
  3869 ;;		Nothing
  3870 ;; This function is called by:
  3871 ;;		_main
  3872 ;;		_atoi
  3873 ;; This function uses a non-reentrant model
  3874 ;;
  3875                           
  3876                           	psect	text15
  3877  001FC8                     __ptext15:
  3878                           	opt stack 0
  3879  001FC8                     _isdigit:
  3880                           	opt stack 28
  3881                           
  3882                           ;incstack = 0
  3883                           ;isdigit@c stored from wreg
  3884  001FC8  6E14               	movwf	isdigit@c,c
  3885  001FCA  0E00               	movlw	0
  3886  001FCC  6E13               	movwf	_isdigit$978,c
  3887  001FCE  0E3A               	movlw	58
  3888  001FD0  5C14               	subwf	isdigit@c,w,c
  3889  001FD2  B0D8               	btfsc	status,0,c
  3890  001FD4  D005               	goto	l2656
  3891  001FD6  0E2F               	movlw	47
  3892  001FD8  6414               	cpfsgt	isdigit@c,c
  3893  001FDA  D002               	goto	l2656
  3894  001FDC  0E01               	movlw	1
  3895  001FDE  6E13               	movwf	_isdigit$978,c
  3896  001FE0                     l2656:
  3897  001FE0  C013  F012         	movff	_isdigit$978,??_isdigit
  3898  001FE4  3012               	rrcf	??_isdigit,w,c
  3899  001FE6  0012               	return	
  3900  001FE8                     __end_of_isdigit:
  3901                           	opt stack 0
  3902                           tblptru	equ	0xFF8
  3903                           tblptrh	equ	0xFF7
  3904                           tblptrl	equ	0xFF6
  3905                           tablat	equ	0xFF5
  3906                           prodh	equ	0xFF4
  3907                           prodl	equ	0xFF3
  3908                           intcon	equ	0xFF2
  3909                           intcon2	equ	0xFF1
  3910                           postinc0	equ	0xFEE
  3911                           wreg	equ	0xFE8
  3912                           postinc1	equ	0xFE6
  3913                           postdec1	equ	0xFE5
  3914                           fsr1h	equ	0xFE2
  3915                           fsr1l	equ	0xFE1
  3916                           indf2	equ	0xFDF
  3917                           postinc2	equ	0xFDE
  3918                           postdec2	equ	0xFDD
  3919                           fsr2h	equ	0xFDA
  3920                           fsr2l	equ	0xFD9
  3921                           status	equ	0xFD8
  3922                           
  3923 ;; *************** function _PIDcontrol *****************
  3924 ;; Defined at:
  3925 ;;		line 463 in file "../main.c"
  3926 ;; Parameters:    Size  Location     Type
  3927 ;;  servoID         2   53[COMRAM] short 
  3928 ;;  error           2   55[COMRAM] short 
  3929 ;; Auto vars:     Size  Location     Type
  3930 ;;  PIDcorrectio    4   32[BANK0 ] long 
  3931 ;;  lngError        4   28[BANK0 ] long 
  3932 ;;  DCorr           4   22[BANK0 ] long 
  3933 ;;  ICorr           4   18[BANK0 ] long 
  3934 ;;  PCorr           4   14[BANK0 ] long 
  3935 ;;  pastError       4    4[BANK0 ] long 
  3936 ;;  diffError       4    0[BANK0 ] long 
  3937 ;;  PWMout          2   26[BANK0 ] short 
  3938 ;;  intDCorr        2   12[BANK0 ] short 
  3939 ;;  intICorr        2   10[BANK0 ] short 
  3940 ;;  intPCorr        2    8[BANK0 ] short 
  3941 ;; Return value:  Size  Location     Type
  3942 ;;                  2   53[COMRAM] short 
  3943 ;; Registers used:
  3944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3945 ;; Tracked objects:
  3946 ;;		On entry : 0/0
  3947 ;;		On exit  : 0/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3950 ;;      Params:         4       0       0       0       0       0       0
  3951 ;;      Locals:         0      36       0       0       0       0       0
  3952 ;;      Temps:          8       0       0       0       0       0       0
  3953 ;;      Totals:        12      36       0       0       0       0       0
  3954 ;;Total ram usage:       48 bytes
  3955 ;; Hardware stack levels used:    1
  3956 ;; Hardware stack levels required when called:    4
  3957 ;; This function calls:
  3958 ;;		___aldiv
  3959 ;;		___lmul
  3960 ;;		___wmul
  3961 ;;		_printf
  3962 ;; This function is called by:
  3963 ;;		_main
  3964 ;; This function uses a non-reentrant model
  3965 ;;
  3966                           
  3967                           	psect	text16
  3968  00069E                     __ptext16:
  3969                           	opt stack 0
  3970  00069E                     _PIDcontrol:
  3971                           	opt stack 26
  3972                           
  3973                           ;main.c: 464: short PWMout;
  3974                           ;main.c: 465: long PIDcorrection, lngError;
  3975                           ;main.c: 466: long diffError, pastError;
  3976                           ;main.c: 467: long PCorr = 0, ICorr = 0, DCorr = 0;
  3977                           
  3978                           ;incstack = 0
  3979  00069E  0E00               	movlw	0
  3980  0006A0  0100               	movlb	0	; () banked
  3981  0006A2  6FB3               	movwf	PIDcontrol@PCorr& (0+255),b
  3982  0006A4  0E00               	movlw	0
  3983  0006A6  0100               	movlb	0	; () banked
  3984  0006A8  6FB4               	movwf	(PIDcontrol@PCorr+1)& (0+255),b
  3985  0006AA  0E00               	movlw	0
  3986  0006AC  0100               	movlb	0	; () banked
  3987  0006AE  6FB5               	movwf	(PIDcontrol@PCorr+2)& (0+255),b
  3988  0006B0  0E00               	movlw	0
  3989  0006B2  0100               	movlb	0	; () banked
  3990  0006B4  6FB6               	movwf	(PIDcontrol@PCorr+3)& (0+255),b
  3991  0006B6  0E00               	movlw	0
  3992  0006B8  0100               	movlb	0	; () banked
  3993  0006BA  6FB7               	movwf	PIDcontrol@ICorr& (0+255),b
  3994  0006BC  0E00               	movlw	0
  3995  0006BE  0100               	movlb	0	; () banked
  3996  0006C0  6FB8               	movwf	(PIDcontrol@ICorr+1)& (0+255),b
  3997  0006C2  0E00               	movlw	0
  3998  0006C4  0100               	movlb	0	; () banked
  3999  0006C6  6FB9               	movwf	(PIDcontrol@ICorr+2)& (0+255),b
  4000  0006C8  0E00               	movlw	0
  4001  0006CA  0100               	movlb	0	; () banked
  4002  0006CC  6FBA               	movwf	(PIDcontrol@ICorr+3)& (0+255),b
  4003  0006CE  0E00               	movlw	0
  4004  0006D0  0100               	movlb	0	; () banked
  4005  0006D2  6FBB               	movwf	PIDcontrol@DCorr& (0+255),b
  4006  0006D4  0E00               	movlw	0
  4007  0006D6  0100               	movlb	0	; () banked
  4008  0006D8  6FBC               	movwf	(PIDcontrol@DCorr+1)& (0+255),b
  4009  0006DA  0E00               	movlw	0
  4010  0006DC  0100               	movlb	0	; () banked
  4011  0006DE  6FBD               	movwf	(PIDcontrol@DCorr+2)& (0+255),b
  4012  0006E0  0E00               	movlw	0
  4013  0006E2  0100               	movlb	0	; () banked
  4014  0006E4  6FBE               	movwf	(PIDcontrol@DCorr+3)& (0+255),b
  4015                           
  4016                           ; BSR set to: 0
  4017                           ;main.c: 468: short intPCorr, intICorr, intDCorr;
  4018                           ;main.c: 469: static short DisplayCounter = 25;
  4019                           ;main.c: 471: lngError = (long) error;
  4020  0006E6  0100               	movlb	0	; () banked
  4021  0006E8  C038  F0C1         	movff	PIDcontrol@error,PIDcontrol@lngError
  4022  0006EC  0100               	movlb	0	; () banked
  4023  0006EE  C039  F0C2         	movff	PIDcontrol@error+1,PIDcontrol@lngError+1
  4024  0006F2  0100               	movlb	0	; () banked
  4025  0006F4  0E00               	movlw	0
  4026  0006F6  0100               	movlb	0	; () banked
  4027  0006F8  BFC2               	btfsc	(PIDcontrol@lngError+1)& (0+255),7,b
  4028  0006FA  0EFF               	movlw	-1
  4029  0006FC  0100               	movlb	0	; () banked
  4030  0006FE  6FC3               	movwf	(PIDcontrol@lngError+2)& (0+255),b
  4031  000700  0100               	movlb	0	; () banked
  4032  000702  6FC4               	movwf	(PIDcontrol@lngError+3)& (0+255),b
  4033                           
  4034                           ; BSR set to: 0
  4035                           ;main.c: 472: if (!PID[servoID].saturationFlag) PID[servoID].sumError = PID[servoID].sum
      +                          Error + lngError;
  4036  000704  C036  F012         	movff	PIDcontrol@servoID,___wmul@multiplier
  4037  000708  C037  F013         	movff	PIDcontrol@servoID+1,___wmul@multiplier+1
  4038  00070C  0E00               	movlw	0
  4039  00070E  6E15               	movwf	___wmul@multiplicand+1,c
  4040  000710  0E0F               	movlw	15
  4041  000712  6E14               	movwf	___wmul@multiplicand,c
  4042  000714  ECC1  F00F         	call	___wmul	;wreg free
  4043  000718  0E06               	movlw	6
  4044  00071A  2612               	addwf	?___wmul,f,c
  4045  00071C  0E00               	movlw	0
  4046  00071E  2213               	addwfc	?___wmul+1,f,c
  4047  000720  0100               	movlb	0	; () banked
  4048  000722  0E80               	movlw	low _PID
  4049  000724  2412               	addwf	?___wmul,w,c
  4050  000726  6ED9               	movwf	fsr2l,c
  4051  000728  0100               	movlb	0	; () banked
  4052  00072A  0E00               	movlw	high _PID
  4053  00072C  2013               	addwfc	?___wmul+1,w,c
  4054  00072E  6EDA               	movwf	fsr2h,c
  4055  000730  50DF               	movf	indf2,w,c
  4056  000732  A4D8               	btfss	status,2,c
  4057  000734  D046               	goto	l279
  4058                           
  4059                           ; BSR set to: 0
  4060  000736  C036  F012         	movff	PIDcontrol@servoID,___wmul@multiplier
  4061  00073A  C037  F013         	movff	PIDcontrol@servoID+1,___wmul@multiplier+1
  4062  00073E  0E00               	movlw	0
  4063  000740  6E15               	movwf	___wmul@multiplicand+1,c
  4064  000742  0E0F               	movlw	15
  4065  000744  6E14               	movwf	___wmul@multiplicand,c
  4066  000746  ECC1  F00F         	call	___wmul	;wreg free
  4067  00074A  0100               	movlb	0	; () banked
  4068  00074C  0E80               	movlw	low _PID
  4069  00074E  2412               	addwf	?___wmul,w,c
  4070  000750  6ED9               	movwf	fsr2l,c
  4071  000752  0100               	movlb	0	; () banked
  4072  000754  0E00               	movlw	high _PID
  4073  000756  2013               	addwfc	?___wmul+1,w,c
  4074  000758  6EDA               	movwf	fsr2h,c
  4075  00075A  CFDE F03A          	movff	postinc2,??_PIDcontrol
  4076  00075E  CFDE F03B          	movff	postinc2,??_PIDcontrol+1
  4077  000762  CFDE F03C          	movff	postinc2,??_PIDcontrol+2
  4078  000766  CFDE F03D          	movff	postinc2,??_PIDcontrol+3
  4079  00076A  0100               	movlb	0	; () banked
  4080  00076C  51C1               	movf	PIDcontrol@lngError& (0+255),w,b
  4081  00076E  243A               	addwf	??_PIDcontrol,w,c
  4082  000770  6E3E               	movwf	(??_PIDcontrol+4)& (0+255),c
  4083  000772  0100               	movlb	0	; () banked
  4084  000774  51C2               	movf	(PIDcontrol@lngError+1)& (0+255),w,b
  4085  000776  203B               	addwfc	??_PIDcontrol+1,w,c
  4086  000778  6E3F               	movwf	(??_PIDcontrol+5)& (0+255),c
  4087  00077A  0100               	movlb	0	; () banked
  4088  00077C  51C3               	movf	(PIDcontrol@lngError+2)& (0+255),w,b
  4089  00077E  203C               	addwfc	??_PIDcontrol+2,w,c
  4090  000780  6E40               	movwf	(??_PIDcontrol+6)& (0+255),c
  4091  000782  0100               	movlb	0	; () banked
  4092  000784  51C4               	movf	(PIDcontrol@lngError+3)& (0+255),w,b
  4093  000786  203D               	addwfc	??_PIDcontrol+3,w,c
  4094  000788  6E41               	movwf	(??_PIDcontrol+7)& (0+255),c
  4095  00078A  C036  F012         	movff	PIDcontrol@servoID,___wmul@multiplier
  4096  00078E  C037  F013         	movff	PIDcontrol@servoID+1,___wmul@multiplier+1
  4097  000792  0E00               	movlw	0
  4098  000794  6E15               	movwf	___wmul@multiplicand+1,c
  4099  000796  0E0F               	movlw	15
  4100  000798  6E14               	movwf	___wmul@multiplicand,c
  4101  00079A  ECC1  F00F         	call	___wmul	;wreg free
  4102  00079E  0100               	movlb	0	; () banked
  4103  0007A0  0E80               	movlw	low _PID
  4104  0007A2  2412               	addwf	?___wmul,w,c
  4105  0007A4  6ED9               	movwf	fsr2l,c
  4106  0007A6  0100               	movlb	0	; () banked
  4107  0007A8  0E00               	movlw	high _PID
  4108  0007AA  2013               	addwfc	?___wmul+1,w,c
  4109  0007AC  6EDA               	movwf	fsr2h,c
  4110  0007AE  C03E  FFDE         	movff	??_PIDcontrol+4,postinc2
  4111  0007B2  C03F  FFDE         	movff	??_PIDcontrol+5,postinc2
  4112  0007B6  C040  FFDE         	movff	??_PIDcontrol+6,postinc2
  4113  0007BA  C041  FFDD         	movff	??_PIDcontrol+7,postdec2
  4114  0007BE  06D9               	decf	fsr2l,f,c
  4115  0007C0  06D9               	decf	fsr2l,f,c
  4116  0007C2                     l279:
  4117                           
  4118                           ; BSR set to: 0
  4119                           ;main.c: 474: pastError = (long) errorDerivative[servoID][PID[servoID].derIndex];
  4120  0007C2  C036  F012         	movff	PIDcontrol@servoID,___wmul@multiplier
  4121  0007C6  C037  F013         	movff	PIDcontrol@servoID+1,___wmul@multiplier+1
  4122  0007CA  0E00               	movlw	0
  4123  0007CC  6E15               	movwf	___wmul@multiplicand+1,c
  4124  0007CE  0E0F               	movlw	15
  4125  0007D0  6E14               	movwf	___wmul@multiplicand,c
  4126  0007D2  ECC1  F00F         	call	___wmul	;wreg free
  4127  0007D6  0E04               	movlw	4
  4128  0007D8  2612               	addwf	?___wmul,f,c
  4129  0007DA  0E00               	movlw	0
  4130  0007DC  2213               	addwfc	?___wmul+1,f,c
  4131  0007DE  0100               	movlb	0	; () banked
  4132  0007E0  0E80               	movlw	low _PID
  4133  0007E2  2412               	addwf	?___wmul,w,c
  4134  0007E4  6ED9               	movwf	fsr2l,c
  4135  0007E6  0100               	movlb	0	; () banked
  4136  0007E8  0E00               	movlw	high _PID
  4137  0007EA  2013               	addwfc	?___wmul+1,w,c
  4138  0007EC  6EDA               	movwf	fsr2h,c
  4139  0007EE  CFDE F03A          	movff	postinc2,??_PIDcontrol
  4140  0007F2  CFDD F03B          	movff	postdec2,??_PIDcontrol+1
  4141  0007F6  90D8               	bcf	status,0,c
  4142  0007F8  363A               	rlcf	??_PIDcontrol,f,c
  4143  0007FA  363B               	rlcf	??_PIDcontrol+1,f,c
  4144  0007FC  C036  F012         	movff	PIDcontrol@servoID,___wmul@multiplier
  4145  000800  C037  F013         	movff	PIDcontrol@servoID+1,___wmul@multiplier+1
  4146  000804  0E00               	movlw	0
  4147  000806  6E15               	movwf	___wmul@multiplicand+1,c
  4148  000808  0E06               	movlw	6
  4149  00080A  6E14               	movwf	___wmul@multiplicand,c
  4150  00080C  ECC1  F00F         	call	___wmul	;wreg free
  4151  000810  0E48               	movlw	low _errorDerivative
  4152  000812  6E3C               	movwf	(??_PIDcontrol+2)& (0+255),c
  4153  000814  0E00               	movlw	high _errorDerivative
  4154  000816  6E3D               	movwf	(??_PIDcontrol+3)& (0+255),c
  4155  000818  5012               	movf	?___wmul,w,c
  4156  00081A  263C               	addwf	??_PIDcontrol+2,f,c
  4157  00081C  5013               	movf	?___wmul+1,w,c
  4158  00081E  223D               	addwfc	??_PIDcontrol+3,f,c
  4159  000820  503A               	movf	??_PIDcontrol,w,c
  4160  000822  243C               	addwf	??_PIDcontrol+2,w,c
  4161  000824  6ED9               	movwf	fsr2l,c
  4162  000826  503B               	movf	??_PIDcontrol+1,w,c
  4163  000828  203D               	addwfc	??_PIDcontrol+3,w,c
  4164  00082A  6EDA               	movwf	fsr2h,c
  4165  00082C  0100               	movlb	0	; () banked
  4166  00082E  CFDE F0A9          	movff	postinc2,PIDcontrol@pastError
  4167  000832  0100               	movlb	0	; () banked
  4168  000834  CFDD F0AA          	movff	postdec2,PIDcontrol@pastError+1
  4169  000838  0100               	movlb	0	; () banked
  4170  00083A  0E00               	movlw	0
  4171  00083C  0100               	movlb	0	; () banked
  4172  00083E  BFAA               	btfsc	(PIDcontrol@pastError+1)& (0+255),7,b
  4173  000840  0EFF               	movlw	-1
  4174  000842  0100               	movlb	0	; () banked
  4175  000844  6FAB               	movwf	(PIDcontrol@pastError+2)& (0+255),b
  4176  000846  0100               	movlb	0	; () banked
  4177  000848  6FAC               	movwf	(PIDcontrol@pastError+3)& (0+255),b
  4178                           
  4179                           ; BSR set to: 0
  4180                           ;main.c: 475: diffError = lngError - pastError;
  4181  00084A  0100               	movlb	0	; () banked
  4182  00084C  C0A9  F03A         	movff	PIDcontrol@pastError,??_PIDcontrol
  4183  000850  0100               	movlb	0	; () banked
  4184  000852  C0AA  F03B         	movff	PIDcontrol@pastError+1,??_PIDcontrol+1
  4185  000856  0100               	movlb	0	; () banked
  4186  000858  C0AB  F03C         	movff	PIDcontrol@pastError+2,??_PIDcontrol+2
  4187  00085C  0100               	movlb	0	; () banked
  4188  00085E  C0AC  F03D         	movff	PIDcontrol@pastError+3,??_PIDcontrol+3
  4189  000862  1E3A               	comf	??_PIDcontrol,f,c
  4190  000864  1E3B               	comf	??_PIDcontrol+1,f,c
  4191  000866  1E3C               	comf	??_PIDcontrol+2,f,c
  4192  000868  1E3D               	comf	??_PIDcontrol+3,f,c
  4193  00086A  2A3A               	incf	??_PIDcontrol,f,c
  4194  00086C  0E00               	movlw	0
  4195  00086E  223B               	addwfc	??_PIDcontrol+1,f,c
  4196  000870  223C               	addwfc	??_PIDcontrol+2,f,c
  4197  000872  223D               	addwfc	??_PIDcontrol+3,f,c
  4198  000874  0100               	movlb	0	; () banked
  4199  000876  51C1               	movf	PIDcontrol@lngError& (0+255),w,b
  4200  000878  243A               	addwf	??_PIDcontrol,w,c
  4201  00087A  0100               	movlb	0	; () banked
  4202  00087C  6FA5               	movwf	PIDcontrol@diffError& (0+255),b
  4203  00087E  0100               	movlb	0	; () banked
  4204  000880  51C2               	movf	(PIDcontrol@lngError+1)& (0+255),w,b
  4205  000882  203B               	addwfc	??_PIDcontrol+1,w,c
  4206  000884  0100               	movlb	0	; () banked
  4207  000886  6FA6               	movwf	(PIDcontrol@diffError+1)& (0+255),b
  4208  000888  0100               	movlb	0	; () banked
  4209  00088A  51C3               	movf	(PIDcontrol@lngError+2)& (0+255),w,b
  4210  00088C  203C               	addwfc	??_PIDcontrol+2,w,c
  4211  00088E  0100               	movlb	0	; () banked
  4212  000890  6FA7               	movwf	(PIDcontrol@diffError+2)& (0+255),b
  4213  000892  0100               	movlb	0	; () banked
  4214  000894  51C4               	movf	(PIDcontrol@lngError+3)& (0+255),w,b
  4215  000896  203D               	addwfc	??_PIDcontrol+3,w,c
  4216  000898  0100               	movlb	0	; () banked
  4217  00089A  6FA8               	movwf	(PIDcontrol@diffError+3)& (0+255),b
  4218                           
  4219                           ; BSR set to: 0
  4220                           ;main.c: 477: errorDerivative[servoID][PID[servoID].derIndex] = error;
  4221  00089C  C036  F012         	movff	PIDcontrol@servoID,___wmul@multiplier
  4222  0008A0  C037  F013         	movff	PIDcontrol@servoID+1,___wmul@multiplier+1
  4223  0008A4  0E00               	movlw	0
  4224  0008A6  6E15               	movwf	___wmul@multiplicand+1,c
  4225  0008A8  0E0F               	movlw	15
  4226  0008AA  6E14               	movwf	___wmul@multiplicand,c
  4227  0008AC  ECC1  F00F         	call	___wmul	;wreg free
  4228  0008B0  0E04               	movlw	4
  4229  0008B2  2612               	addwf	?___wmul,f,c
  4230  0008B4  0E00               	movlw	0
  4231  0008B6  2213               	addwfc	?___wmul+1,f,c
  4232  0008B8  0100               	movlb	0	; () banked
  4233  0008BA  0E80               	movlw	low _PID
  4234  0008BC  2412               	addwf	?___wmul,w,c
  4235  0008BE  6ED9               	movwf	fsr2l,c
  4236  0008C0  0100               	movlb	0	; () banked
  4237  0008C2  0E00               	movlw	high _PID
  4238  0008C4  2013               	addwfc	?___wmul+1,w,c
  4239  0008C6  6EDA               	movwf	fsr2h,c
  4240  0008C8  CFDE F03A          	movff	postinc2,??_PIDcontrol
  4241  0008CC  CFDD F03B          	movff	postdec2,??_PIDcontrol+1
  4242  0008D0  90D8               	bcf	status,0,c
  4243  0008D2  363A               	rlcf	??_PIDcontrol,f,c
  4244  0008D4  363B               	rlcf	??_PIDcontrol+1,f,c
  4245  0008D6  C036  F012         	movff	PIDcontrol@servoID,___wmul@multiplier
  4246  0008DA  C037  F013         	movff	PIDcontrol@servoID+1,___wmul@multiplier+1
  4247  0008DE  0E00               	movlw	0
  4248  0008E0  6E15               	movwf	___wmul@multiplicand+1,c
  4249  0008E2  0E06               	movlw	6
  4250  0008E4  6E14               	movwf	___wmul@multiplicand,c
  4251  0008E6  ECC1  F00F         	call	___wmul	;wreg free
  4252  0008EA  0E48               	movlw	low _errorDerivative
  4253  0008EC  6E3C               	movwf	(??_PIDcontrol+2)& (0+255),c
  4254  0008EE  0E00               	movlw	high _errorDerivative
  4255  0008F0  6E3D               	movwf	(??_PIDcontrol+3)& (0+255),c
  4256  0008F2  5012               	movf	?___wmul,w,c
  4257  0008F4  263C               	addwf	??_PIDcontrol+2,f,c
  4258  0008F6  5013               	movf	?___wmul+1,w,c
  4259  0008F8  223D               	addwfc	??_PIDcontrol+3,f,c
  4260  0008FA  503A               	movf	??_PIDcontrol,w,c
  4261  0008FC  243C               	addwf	??_PIDcontrol+2,w,c
  4262  0008FE  6ED9               	movwf	fsr2l,c
  4263  000900  503B               	movf	??_PIDcontrol+1,w,c
  4264  000902  203D               	addwfc	??_PIDcontrol+3,w,c
  4265  000904  6EDA               	movwf	fsr2h,c
  4266  000906  C038  FFDE         	movff	PIDcontrol@error,postinc2
  4267  00090A  C039  FFDD         	movff	PIDcontrol@error+1,postdec2
  4268                           
  4269                           ;main.c: 478: PID[servoID].derIndex++; if (PID[servoID].derIndex >= 3) PID[servoID].derI
      +                          ndex = 0;
  4270  00090E  C036  F012         	movff	PIDcontrol@servoID,___wmul@multiplier
  4271  000912  C037  F013         	movff	PIDcontrol@servoID+1,___wmul@multiplier+1
  4272  000916  0E00               	movlw	0
  4273  000918  6E15               	movwf	___wmul@multiplicand+1,c
  4274  00091A  0E0F               	movlw	15
  4275  00091C  6E14               	movwf	___wmul@multiplicand,c
  4276  00091E  ECC1  F00F         	call	___wmul	;wreg free
  4277  000922  0E04               	movlw	4
  4278  000924  2612               	addwf	?___wmul,f,c
  4279  000926  0E00               	movlw	0
  4280  000928  2213               	addwfc	?___wmul+1,f,c
  4281  00092A  0100               	movlb	0	; () banked
  4282  00092C  0E80               	movlw	low _PID
  4283  00092E  2412               	addwf	?___wmul,w,c
  4284  000930  6ED9               	movwf	fsr2l,c
  4285  000932  0100               	movlb	0	; () banked
  4286  000934  0E00               	movlw	high _PID
  4287  000936  2013               	addwfc	?___wmul+1,w,c
  4288  000938  6EDA               	movwf	fsr2h,c
  4289  00093A  2ADE               	incf	postinc2,f,c
  4290  00093C  0E00               	movlw	0
  4291  00093E  22DD               	addwfc	postdec2,f,c
  4292                           
  4293                           ; BSR set to: 0
  4294  000940  C036  F012         	movff	PIDcontrol@servoID,___wmul@multiplier
  4295  000944  C037  F013         	movff	PIDcontrol@servoID+1,___wmul@multiplier+1
  4296  000948  0E00               	movlw	0
  4297  00094A  6E15               	movwf	___wmul@multiplicand+1,c
  4298  00094C  0E0F               	movlw	15
  4299  00094E  6E14               	movwf	___wmul@multiplicand,c
  4300  000950  ECC1  F00F         	call	___wmul	;wreg free
  4301  000954  0E04               	movlw	4
  4302  000956  2612               	addwf	?___wmul,f,c
  4303  000958  0E00               	movlw	0
  4304  00095A  2213               	addwfc	?___wmul+1,f,c
  4305  00095C  0100               	movlb	0	; () banked
  4306  00095E  0E80               	movlw	low _PID
  4307  000960  2412               	addwf	?___wmul,w,c
  4308  000962  6ED9               	movwf	fsr2l,c
  4309  000964  0100               	movlb	0	; () banked
  4310  000966  0E00               	movlw	high _PID
  4311  000968  2013               	addwfc	?___wmul+1,w,c
  4312  00096A  6EDA               	movwf	fsr2h,c
  4313  00096C  52DE               	movf	postinc2,f,c
  4314  00096E  50DD               	movf	postdec2,w,c
  4315  000970  0A80               	xorlw	128
  4316  000972  0F80               	addlw	128
  4317  000974  0E03               	movlw	3
  4318  000976  B4D8               	btfsc	status,2,c
  4319  000978  5CDF               	subwf	indf2,w,c
  4320  00097A  A0D8               	btfss	status,0,c
  4321  00097C  D01A               	goto	l280
  4322                           
  4323                           ; BSR set to: 0
  4324  00097E  C036  F012         	movff	PIDcontrol@servoID,___wmul@multiplier
  4325  000982  C037  F013         	movff	PIDcontrol@servoID+1,___wmul@multiplier+1
  4326  000986  0E00               	movlw	0
  4327  000988  6E15               	movwf	___wmul@multiplicand+1,c
  4328  00098A  0E0F               	movlw	15
  4329  00098C  6E14               	movwf	___wmul@multiplicand,c
  4330  00098E  ECC1  F00F         	call	___wmul	;wreg free
  4331  000992  0E04               	movlw	4
  4332  000994  2612               	addwf	?___wmul,f,c
  4333  000996  0E00               	movlw	0
  4334  000998  2213               	addwfc	?___wmul+1,f,c
  4335  00099A  0100               	movlb	0	; () banked
  4336  00099C  0E80               	movlw	low _PID
  4337  00099E  2412               	addwf	?___wmul,w,c
  4338  0009A0  6ED9               	movwf	fsr2l,c
  4339  0009A2  0100               	movlb	0	; () banked
  4340  0009A4  0E00               	movlw	high _PID
  4341  0009A6  2013               	addwfc	?___wmul+1,w,c
  4342  0009A8  6EDA               	movwf	fsr2h,c
  4343  0009AA  0E00               	movlw	0
  4344  0009AC  6EDE               	movwf	postinc2,c
  4345  0009AE  0E00               	movlw	0
  4346  0009B0  6EDD               	movwf	postdec2,c
  4347  0009B2                     l280:
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;main.c: 480: PCorr = lngError * (long) PID[servoID].kP;
  4351  0009B2  C036  F012         	movff	PIDcontrol@servoID,___wmul@multiplier
  4352  0009B6  C037  F013         	movff	PIDcontrol@servoID+1,___wmul@multiplier+1
  4353  0009BA  0E00               	movlw	0
  4354  0009BC  6E15               	movwf	___wmul@multiplicand+1,c
  4355  0009BE  0E0F               	movlw	15
  4356  0009C0  6E14               	movwf	___wmul@multiplicand,c
  4357  0009C2  ECC1  F00F         	call	___wmul	;wreg free
  4358  0009C6  0E07               	movlw	7
  4359  0009C8  2612               	addwf	?___wmul,f,c
  4360  0009CA  0E00               	movlw	0
  4361  0009CC  2213               	addwfc	?___wmul+1,f,c
  4362  0009CE  0100               	movlb	0	; () banked
  4363  0009D0  0E80               	movlw	low _PID
  4364  0009D2  2412               	addwf	?___wmul,w,c
  4365  0009D4  6ED9               	movwf	fsr2l,c
  4366  0009D6  0100               	movlb	0	; () banked
  4367  0009D8  0E00               	movlw	high _PID
  4368  0009DA  2013               	addwfc	?___wmul+1,w,c
  4369  0009DC  6EDA               	movwf	fsr2h,c
  4370  0009DE  CFDE F018          	movff	postinc2,___lmul@multiplier
  4371  0009E2  CFDD F019          	movff	postdec2,___lmul@multiplier+1
  4372  0009E6  0E00               	movlw	0
  4373  0009E8  BE19               	btfsc	___lmul@multiplier+1,7,c
  4374  0009EA  0EFF               	movlw	-1
  4375  0009EC  6E1A               	movwf	___lmul@multiplier+2,c
  4376  0009EE  6E1B               	movwf	___lmul@multiplier+3,c
  4377  0009F0  C0C1  F01C         	movff	PIDcontrol@lngError,___lmul@multiplicand
  4378  0009F4  C0C2  F01D         	movff	PIDcontrol@lngError+1,___lmul@multiplicand+1
  4379  0009F8  C0C3  F01E         	movff	PIDcontrol@lngError+2,___lmul@multiplicand+2
  4380  0009FC  C0C4  F01F         	movff	PIDcontrol@lngError+3,___lmul@multiplicand+3
  4381  000A00  ECB3  F00E         	call	___lmul	;wreg free
  4382  000A04  C018  F0B3         	movff	?___lmul,PIDcontrol@PCorr
  4383  000A08  C019  F0B4         	movff	?___lmul+1,PIDcontrol@PCorr+1
  4384  000A0C  C01A  F0B5         	movff	?___lmul+2,PIDcontrol@PCorr+2
  4385  000A10  C01B  F0B6         	movff	?___lmul+3,PIDcontrol@PCorr+3
  4386                           
  4387                           ;main.c: 481: ICorr = PID[servoID].sumError * (long) PID[servoID].kI;
  4388  000A14  C036  F012         	movff	PIDcontrol@servoID,___wmul@multiplier
  4389  000A18  C037  F013         	movff	PIDcontrol@servoID+1,___wmul@multiplier+1
  4390  000A1C  0E00               	movlw	0
  4391  000A1E  6E15               	movwf	___wmul@multiplicand+1,c
  4392  000A20  0E0F               	movlw	15
  4393  000A22  6E14               	movwf	___wmul@multiplicand,c
  4394  000A24  ECC1  F00F         	call	___wmul	;wreg free
  4395  000A28  0E09               	movlw	9
  4396  000A2A  2612               	addwf	?___wmul,f,c
  4397  000A2C  0E00               	movlw	0
  4398  000A2E  2213               	addwfc	?___wmul+1,f,c
  4399  000A30  0100               	movlb	0	; () banked
  4400  000A32  0E80               	movlw	low _PID
  4401  000A34  2412               	addwf	?___wmul,w,c
  4402  000A36  6ED9               	movwf	fsr2l,c
  4403  000A38  0100               	movlb	0	; () banked
  4404  000A3A  0E00               	movlw	high _PID
  4405  000A3C  2013               	addwfc	?___wmul+1,w,c
  4406  000A3E  6EDA               	movwf	fsr2h,c
  4407  000A40  CFDE F018          	movff	postinc2,___lmul@multiplier
  4408  000A44  CFDD F019          	movff	postdec2,___lmul@multiplier+1
  4409  000A48  0E00               	movlw	0
  4410  000A4A  BE19               	btfsc	___lmul@multiplier+1,7,c
  4411  000A4C  0EFF               	movlw	-1
  4412  000A4E  6E1A               	movwf	___lmul@multiplier+2,c
  4413  000A50  6E1B               	movwf	___lmul@multiplier+3,c
  4414  000A52  C036  F012         	movff	PIDcontrol@servoID,___wmul@multiplier
  4415  000A56  C037  F013         	movff	PIDcontrol@servoID+1,___wmul@multiplier+1
  4416  000A5A  0E00               	movlw	0
  4417  000A5C  6E15               	movwf	___wmul@multiplicand+1,c
  4418  000A5E  0E0F               	movlw	15
  4419  000A60  6E14               	movwf	___wmul@multiplicand,c
  4420  000A62  ECC1  F00F         	call	___wmul	;wreg free
  4421  000A66  0100               	movlb	0	; () banked
  4422  000A68  0E80               	movlw	low _PID
  4423  000A6A  2412               	addwf	?___wmul,w,c
  4424  000A6C  6ED9               	movwf	fsr2l,c
  4425  000A6E  0100               	movlb	0	; () banked
  4426  000A70  0E00               	movlw	high _PID
  4427  000A72  2013               	addwfc	?___wmul+1,w,c
  4428  000A74  6EDA               	movwf	fsr2h,c
  4429  000A76  CFDE F01C          	movff	postinc2,___lmul@multiplicand
  4430  000A7A  CFDE F01D          	movff	postinc2,___lmul@multiplicand+1
  4431  000A7E  CFDE F01E          	movff	postinc2,___lmul@multiplicand+2
  4432  000A82  CFDE F01F          	movff	postinc2,___lmul@multiplicand+3
  4433  000A86  ECB3  F00E         	call	___lmul	;wreg free
  4434  000A8A  C018  F0B7         	movff	?___lmul,PIDcontrol@ICorr
  4435  000A8E  C019  F0B8         	movff	?___lmul+1,PIDcontrol@ICorr+1
  4436  000A92  C01A  F0B9         	movff	?___lmul+2,PIDcontrol@ICorr+2
  4437  000A96  C01B  F0BA         	movff	?___lmul+3,PIDcontrol@ICorr+3
  4438                           
  4439                           ;main.c: 482: DCorr = diffError * (long) PID[servoID].kD;
  4440  000A9A  C036  F012         	movff	PIDcontrol@servoID,___wmul@multiplier
  4441  000A9E  C037  F013         	movff	PIDcontrol@servoID+1,___wmul@multiplier+1
  4442  000AA2  0E00               	movlw	0
  4443  000AA4  6E15               	movwf	___wmul@multiplicand+1,c
  4444  000AA6  0E0F               	movlw	15
  4445  000AA8  6E14               	movwf	___wmul@multiplicand,c
  4446  000AAA  ECC1  F00F         	call	___wmul	;wreg free
  4447  000AAE  0E0B               	movlw	11
  4448  000AB0  2612               	addwf	?___wmul,f,c
  4449  000AB2  0E00               	movlw	0
  4450  000AB4  2213               	addwfc	?___wmul+1,f,c
  4451  000AB6  0100               	movlb	0	; () banked
  4452  000AB8  0E80               	movlw	low _PID
  4453  000ABA  2412               	addwf	?___wmul,w,c
  4454  000ABC  6ED9               	movwf	fsr2l,c
  4455  000ABE  0100               	movlb	0	; () banked
  4456  000AC0  0E00               	movlw	high _PID
  4457  000AC2  2013               	addwfc	?___wmul+1,w,c
  4458  000AC4  6EDA               	movwf	fsr2h,c
  4459  000AC6  CFDE F018          	movff	postinc2,___lmul@multiplier
  4460  000ACA  CFDD F019          	movff	postdec2,___lmul@multiplier+1
  4461  000ACE  0E00               	movlw	0
  4462  000AD0  BE19               	btfsc	___lmul@multiplier+1,7,c
  4463  000AD2  0EFF               	movlw	-1
  4464  000AD4  6E1A               	movwf	___lmul@multiplier+2,c
  4465  000AD6  6E1B               	movwf	___lmul@multiplier+3,c
  4466  000AD8  C0A5  F01C         	movff	PIDcontrol@diffError,___lmul@multiplicand
  4467  000ADC  C0A6  F01D         	movff	PIDcontrol@diffError+1,___lmul@multiplicand+1
  4468  000AE0  C0A7  F01E         	movff	PIDcontrol@diffError+2,___lmul@multiplicand+2
  4469  000AE4  C0A8  F01F         	movff	PIDcontrol@diffError+3,___lmul@multiplicand+3
  4470  000AE8  ECB3  F00E         	call	___lmul	;wreg free
  4471  000AEC  C018  F0BB         	movff	?___lmul,PIDcontrol@DCorr
  4472  000AF0  C019  F0BC         	movff	?___lmul+1,PIDcontrol@DCorr+1
  4473  000AF4  C01A  F0BD         	movff	?___lmul+2,PIDcontrol@DCorr+2
  4474  000AF8  C01B  F0BE         	movff	?___lmul+3,PIDcontrol@DCorr+3
  4475                           
  4476                           ;main.c: 484: PIDcorrection = PCorr + ICorr + DCorr;
  4477  000AFC  0100               	movlb	0	; () banked
  4478  000AFE  51B7               	movf	PIDcontrol@ICorr& (0+255),w,b
  4479  000B00  0100               	movlb	0	; () banked
  4480  000B02  25B3               	addwf	PIDcontrol@PCorr& (0+255),w,b
  4481  000B04  6E3A               	movwf	??_PIDcontrol& (0+255),c
  4482  000B06  0100               	movlb	0	; () banked
  4483  000B08  51B8               	movf	(PIDcontrol@ICorr+1)& (0+255),w,b
  4484  000B0A  0100               	movlb	0	; () banked
  4485  000B0C  21B4               	addwfc	(PIDcontrol@PCorr+1)& (0+255),w,b
  4486  000B0E  6E3B               	movwf	(??_PIDcontrol+1)& (0+255),c
  4487  000B10  0100               	movlb	0	; () banked
  4488  000B12  51B9               	movf	(PIDcontrol@ICorr+2)& (0+255),w,b
  4489  000B14  0100               	movlb	0	; () banked
  4490  000B16  21B5               	addwfc	(PIDcontrol@PCorr+2)& (0+255),w,b
  4491  000B18  6E3C               	movwf	(??_PIDcontrol+2)& (0+255),c
  4492  000B1A  0100               	movlb	0	; () banked
  4493  000B1C  51BA               	movf	(PIDcontrol@ICorr+3)& (0+255),w,b
  4494  000B1E  0100               	movlb	0	; () banked
  4495  000B20  21B6               	addwfc	(PIDcontrol@PCorr+3)& (0+255),w,b
  4496  000B22  6E3D               	movwf	(??_PIDcontrol+3)& (0+255),c
  4497  000B24  0100               	movlb	0	; () banked
  4498  000B26  51BB               	movf	PIDcontrol@DCorr& (0+255),w,b
  4499  000B28  243A               	addwf	??_PIDcontrol,w,c
  4500  000B2A  0100               	movlb	0	; () banked
  4501  000B2C  6FC5               	movwf	PIDcontrol@PIDcorrection& (0+255),b
  4502  000B2E  0100               	movlb	0	; () banked
  4503  000B30  51BC               	movf	(PIDcontrol@DCorr+1)& (0+255),w,b
  4504  000B32  203B               	addwfc	??_PIDcontrol+1,w,c
  4505  000B34  0100               	movlb	0	; () banked
  4506  000B36  6FC6               	movwf	(PIDcontrol@PIDcorrection+1)& (0+255),b
  4507  000B38  0100               	movlb	0	; () banked
  4508  000B3A  51BD               	movf	(PIDcontrol@DCorr+2)& (0+255),w,b
  4509  000B3C  203C               	addwfc	??_PIDcontrol+2,w,c
  4510  000B3E  0100               	movlb	0	; () banked
  4511  000B40  6FC7               	movwf	(PIDcontrol@PIDcorrection+2)& (0+255),b
  4512  000B42  0100               	movlb	0	; () banked
  4513  000B44  51BE               	movf	(PIDcontrol@DCorr+3)& (0+255),w,b
  4514  000B46  203D               	addwfc	??_PIDcontrol+3,w,c
  4515  000B48  0100               	movlb	0	; () banked
  4516  000B4A  6FC8               	movwf	(PIDcontrol@PIDcorrection+3)& (0+255),b
  4517                           
  4518                           ; BSR set to: 0
  4519                           ;main.c: 485: PIDcorrection = PIDcorrection / 256;
  4520  000B4C  C0C5  F012         	movff	PIDcontrol@PIDcorrection,___aldiv@dividend
  4521  000B50  C0C6  F013         	movff	PIDcontrol@PIDcorrection+1,___aldiv@dividend+1
  4522  000B54  C0C7  F014         	movff	PIDcontrol@PIDcorrection+2,___aldiv@dividend+2
  4523  000B58  C0C8  F015         	movff	PIDcontrol@PIDcorrection+3,___aldiv@dividend+3
  4524  000B5C  0E00               	movlw	0
  4525  000B5E  6E16               	movwf	___aldiv@divisor,c
  4526  000B60  0E01               	movlw	1
  4527  000B62  6E17               	movwf	___aldiv@divisor+1,c
  4528  000B64  0E00               	movlw	0
  4529  000B66  6E18               	movwf	___aldiv@divisor+2,c
  4530  000B68  0E00               	movlw	0
  4531  000B6A  6E19               	movwf	___aldiv@divisor+3,c
  4532  000B6C  EC56  F00C         	call	___aldiv	;wreg free
  4533  000B70  C012  F0C5         	movff	?___aldiv,PIDcontrol@PIDcorrection
  4534  000B74  C013  F0C6         	movff	?___aldiv+1,PIDcontrol@PIDcorrection+1
  4535  000B78  C014  F0C7         	movff	?___aldiv+2,PIDcontrol@PIDcorrection+2
  4536  000B7C  C015  F0C8         	movff	?___aldiv+3,PIDcontrol@PIDcorrection+3
  4537                           
  4538                           ;main.c: 486: if (PIDcorrection > 1000)
  4539  000B80  0100               	movlb	0	; () banked
  4540  000B82  51C8               	movf	(PIDcontrol@PIDcorrection+3)& (0+255),w,b
  4541  000B84  0A80               	xorlw	128
  4542  000B86  0F80               	addlw	128
  4543  000B88  E10B               	bnz	u2755
  4544  000B8A  0E00               	movlw	0
  4545  000B8C  0100               	movlb	0	; () banked
  4546  000B8E  5DC7               	subwf	(PIDcontrol@PIDcorrection+2)& (0+255),w,b
  4547  000B90  E107               	bnz	u2755
  4548  000B92  0E03               	movlw	3
  4549  000B94  0100               	movlb	0	; () banked
  4550  000B96  5DC6               	subwf	(PIDcontrol@PIDcorrection+1)& (0+255),w,b
  4551  000B98  E103               	bnz	u2755
  4552  000B9A  0EE9               	movlw	233
  4553  000B9C  0100               	movlb	0	; () banked
  4554  000B9E  5DC5               	subwf	PIDcontrol@PIDcorrection& (0+255),w,b
  4555  000BA0                     u2755:
  4556  000BA0  A0D8               	btfss	status,0,c
  4557  000BA2  D017               	goto	l2984
  4558                           
  4559                           ; BSR set to: 0
  4560                           ;main.c: 487: {
  4561                           ;main.c: 488: PIDcorrection = 1000;
  4562  000BA4  0EE8               	movlw	232
  4563  000BA6  0100               	movlb	0	; () banked
  4564  000BA8  6FC5               	movwf	PIDcontrol@PIDcorrection& (0+255),b
  4565  000BAA  0E03               	movlw	3
  4566  000BAC  0100               	movlb	0	; () banked
  4567  000BAE  6FC6               	movwf	(PIDcontrol@PIDcorrection+1)& (0+255),b
  4568  000BB0  0E00               	movlw	0
  4569  000BB2  0100               	movlb	0	; () banked
  4570  000BB4  6FC7               	movwf	(PIDcontrol@PIDcorrection+2)& (0+255),b
  4571  000BB6  0E00               	movlw	0
  4572  000BB8  0100               	movlb	0	; () banked
  4573  000BBA  6FC8               	movwf	(PIDcontrol@PIDcorrection+3)& (0+255),b
  4574                           
  4575                           ; BSR set to: 0
  4576                           ;main.c: 489: PID[servoID].saturationFlag = !0;
  4577  000BBC  C036  F012         	movff	PIDcontrol@servoID,___wmul@multiplier
  4578  000BC0  C037  F013         	movff	PIDcontrol@servoID+1,___wmul@multiplier+1
  4579  000BC4  0E00               	movlw	0
  4580  000BC6  6E15               	movwf	___wmul@multiplicand+1,c
  4581  000BC8  0E0F               	movlw	15
  4582  000BCA  6E14               	movwf	___wmul@multiplicand,c
  4583  000BCC  ECC1  F00F         	call	___wmul	;wreg free
  4584  000BD0  D028               	goto	L16
  4585  000BD2                     l2984:
  4586                           
  4587                           ; BSR set to: 0
  4588                           ;main.c: 491: else if (PIDcorrection < -1000) {
  4589  000BD2  0100               	movlb	0	; () banked
  4590  000BD4  51C8               	movf	(PIDcontrol@PIDcorrection+3)& (0+255),w,b
  4591  000BD6  0A80               	xorlw	128
  4592  000BD8  0F81               	addlw	-127
  4593  000BDA  E10B               	bnz	u2765
  4594  000BDC  0EFF               	movlw	255
  4595  000BDE  0100               	movlb	0	; () banked
  4596  000BE0  5DC7               	subwf	(PIDcontrol@PIDcorrection+2)& (0+255),w,b
  4597  000BE2  E107               	bnz	u2765
  4598  000BE4  0EFC               	movlw	252
  4599  000BE6  0100               	movlb	0	; () banked
  4600  000BE8  5DC6               	subwf	(PIDcontrol@PIDcorrection+1)& (0+255),w,b
  4601  000BEA  E103               	bnz	u2765
  4602  000BEC  0E18               	movlw	24
  4603  000BEE  0100               	movlb	0	; () banked
  4604  000BF0  5DC5               	subwf	PIDcontrol@PIDcorrection& (0+255),w,b
  4605  000BF2                     u2765:
  4606  000BF2  B0D8               	btfsc	status,0,c
  4607  000BF4  D024               	goto	l2990
  4608                           
  4609                           ; BSR set to: 0
  4610                           ;main.c: 492: PIDcorrection = -1000;
  4611  000BF6  0E18               	movlw	24
  4612  000BF8  0100               	movlb	0	; () banked
  4613  000BFA  6FC5               	movwf	PIDcontrol@PIDcorrection& (0+255),b
  4614  000BFC  0EFC               	movlw	252
  4615  000BFE  0100               	movlb	0	; () banked
  4616  000C00  6FC6               	movwf	(PIDcontrol@PIDcorrection+1)& (0+255),b
  4617  000C02  0EFF               	movlw	255
  4618  000C04  0100               	movlb	0	; () banked
  4619  000C06  6FC7               	movwf	(PIDcontrol@PIDcorrection+2)& (0+255),b
  4620  000C08  0EFF               	movlw	255
  4621  000C0A  0100               	movlb	0	; () banked
  4622  000C0C  6FC8               	movwf	(PIDcontrol@PIDcorrection+3)& (0+255),b
  4623                           
  4624                           ; BSR set to: 0
  4625                           ;main.c: 493: PID[servoID].saturationFlag = !0;
  4626  000C0E  C036  F012         	movff	PIDcontrol@servoID,___wmul@multiplier
  4627  000C12  C037  F013         	movff	PIDcontrol@servoID+1,___wmul@multiplier+1
  4628  000C16  0E00               	movlw	0
  4629  000C18  6E15               	movwf	___wmul@multiplicand+1,c
  4630  000C1A  0E0F               	movlw	15
  4631  000C1C  6E14               	movwf	___wmul@multiplicand,c
  4632  000C1E  ECC1  F00F         	call	___wmul	;wreg free
  4633  000C22                     L16:
  4634  000C22  0E06               	movlw	6
  4635  000C24  2612               	addwf	?___wmul,f,c
  4636  000C26  0E00               	movlw	0
  4637  000C28  2213               	addwfc	?___wmul+1,f,c
  4638  000C2A  0100               	movlb	0	; () banked
  4639  000C2C  0E80               	movlw	low _PID
  4640  000C2E  2412               	addwf	?___wmul,w,c
  4641  000C30  6ED9               	movwf	fsr2l,c
  4642  000C32  0100               	movlb	0	; () banked
  4643  000C34  0E00               	movlw	high _PID
  4644  000C36  2013               	addwfc	?___wmul+1,w,c
  4645  000C38  6EDA               	movwf	fsr2h,c
  4646  000C3A  0E01               	movlw	1
  4647  000C3C  D017               	goto	L17
  4648  000C3E                     l2990:
  4649                           
  4650                           ; BSR set to: 0
  4651                           ;main.c: 495: else PID[servoID].saturationFlag = 0;
  4652  000C3E  C036  F012         	movff	PIDcontrol@servoID,___wmul@multiplier
  4653  000C42  C037  F013         	movff	PIDcontrol@servoID+1,___wmul@multiplier+1
  4654  000C46  0E00               	movlw	0
  4655  000C48  6E15               	movwf	___wmul@multiplicand+1,c
  4656  000C4A  0E0F               	movlw	15
  4657  000C4C  6E14               	movwf	___wmul@multiplicand,c
  4658  000C4E  ECC1  F00F         	call	___wmul	;wreg free
  4659  000C52  0E06               	movlw	6
  4660  000C54  2612               	addwf	?___wmul,f,c
  4661  000C56  0E00               	movlw	0
  4662  000C58  2213               	addwfc	?___wmul+1,f,c
  4663  000C5A  0100               	movlb	0	; () banked
  4664  000C5C  0E80               	movlw	low _PID
  4665  000C5E  2412               	addwf	?___wmul,w,c
  4666  000C60  6ED9               	movwf	fsr2l,c
  4667  000C62  0100               	movlb	0	; () banked
  4668  000C64  0E00               	movlw	high _PID
  4669  000C66  2013               	addwfc	?___wmul+1,w,c
  4670  000C68  6EDA               	movwf	fsr2h,c
  4671  000C6A  0E00               	movlw	0
  4672  000C6C                     L17:
  4673  000C6C  6EDF               	movwf	indf2,c
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;main.c: 497: if (PIDcorrection < 0)
  4677                           
  4678                           ; BSR set to: 0
  4679                           
  4680                           ; BSR set to: 0
  4681  000C6E  0100               	movlb	0	; () banked
  4682  000C70  51C8               	movf	(PIDcontrol@PIDcorrection+3)& (0+255),w,b
  4683  000C72  0A80               	xorlw	128
  4684  000C74  0F80               	addlw	128
  4685  000C76  E10B               	bnz	u2775
  4686  000C78  0E00               	movlw	0
  4687  000C7A  0100               	movlb	0	; () banked
  4688  000C7C  5DC7               	subwf	(PIDcontrol@PIDcorrection+2)& (0+255),w,b
  4689  000C7E  E107               	bnz	u2775
  4690  000C80  0E00               	movlw	0
  4691  000C82  0100               	movlb	0	; () banked
  4692  000C84  5DC6               	subwf	(PIDcontrol@PIDcorrection+1)& (0+255),w,b
  4693  000C86  E103               	bnz	u2775
  4694  000C88  0E00               	movlw	0
  4695  000C8A  0100               	movlb	0	; () banked
  4696  000C8C  5DC5               	subwf	PIDcontrol@PIDcorrection& (0+255),w,b
  4697  000C8E                     u2775:
  4698  000C8E  B0D8               	btfsc	status,0,c
  4699  000C90  D01F               	goto	l2996
  4700                           
  4701                           ; BSR set to: 0
  4702                           ;main.c: 498: PWMout = (short) PIDcorrection - PID[servoID].PWMoffset;
  4703  000C92  C036  F012         	movff	PIDcontrol@servoID,___wmul@multiplier
  4704  000C96  C037  F013         	movff	PIDcontrol@servoID+1,___wmul@multiplier+1
  4705  000C9A  0E00               	movlw	0
  4706  000C9C  6E15               	movwf	___wmul@multiplicand+1,c
  4707  000C9E  0E0F               	movlw	15
  4708  000CA0  6E14               	movwf	___wmul@multiplicand,c
  4709  000CA2  ECC1  F00F         	call	___wmul	;wreg free
  4710  000CA6  0E0D               	movlw	13
  4711  000CA8  2612               	addwf	?___wmul,f,c
  4712  000CAA  0E00               	movlw	0
  4713  000CAC  2213               	addwfc	?___wmul+1,f,c
  4714  000CAE  0100               	movlb	0	; () banked
  4715  000CB0  0E80               	movlw	low _PID
  4716  000CB2  2412               	addwf	?___wmul,w,c
  4717  000CB4  6ED9               	movwf	fsr2l,c
  4718  000CB6  0100               	movlb	0	; () banked
  4719  000CB8  0E00               	movlw	high _PID
  4720  000CBA  2013               	addwfc	?___wmul+1,w,c
  4721  000CBC  6EDA               	movwf	fsr2h,c
  4722  000CBE  CFDE F03A          	movff	postinc2,??_PIDcontrol
  4723  000CC2  CFDD F03B          	movff	postdec2,??_PIDcontrol+1
  4724  000CC6  1E3A               	comf	??_PIDcontrol,f,c
  4725  000CC8  1E3B               	comf	??_PIDcontrol+1,f,c
  4726  000CCA  4A3A               	infsnz	??_PIDcontrol,f,c
  4727  000CCC  2A3B               	incf	??_PIDcontrol+1,f,c
  4728  000CCE  D01A               	goto	L18
  4729  000CD0                     l2996:
  4730                           
  4731                           ; BSR set to: 0
  4732                           ;main.c: 499: else PWMout = (short) PIDcorrection + PID[servoID].PWMoffset;
  4733  000CD0  C036  F012         	movff	PIDcontrol@servoID,___wmul@multiplier
  4734  000CD4  C037  F013         	movff	PIDcontrol@servoID+1,___wmul@multiplier+1
  4735  000CD8  0E00               	movlw	0
  4736  000CDA  6E15               	movwf	___wmul@multiplicand+1,c
  4737  000CDC  0E0F               	movlw	15
  4738  000CDE  6E14               	movwf	___wmul@multiplicand,c
  4739  000CE0  ECC1  F00F         	call	___wmul	;wreg free
  4740  000CE4  0E0D               	movlw	13
  4741  000CE6  2612               	addwf	?___wmul,f,c
  4742  000CE8  0E00               	movlw	0
  4743  000CEA  2213               	addwfc	?___wmul+1,f,c
  4744  000CEC  0100               	movlb	0	; () banked
  4745  000CEE  0E80               	movlw	low _PID
  4746  000CF0  2412               	addwf	?___wmul,w,c
  4747  000CF2  6ED9               	movwf	fsr2l,c
  4748  000CF4  0100               	movlb	0	; () banked
  4749  000CF6  0E00               	movlw	high _PID
  4750  000CF8  2013               	addwfc	?___wmul+1,w,c
  4751  000CFA  6EDA               	movwf	fsr2h,c
  4752  000CFC  CFDE F03A          	movff	postinc2,??_PIDcontrol
  4753  000D00  CFDD F03B          	movff	postdec2,??_PIDcontrol+1
  4754  000D04                     L18:
  4755  000D04  0100               	movlb	0	; () banked
  4756  000D06  51C5               	movf	PIDcontrol@PIDcorrection& (0+255),w,b
  4757  000D08  243A               	addwf	??_PIDcontrol,w,c
  4758  000D0A  0100               	movlb	0	; () banked
  4759  000D0C  6FBF               	movwf	PIDcontrol@PWMout& (0+255),b
  4760  000D0E  0100               	movlb	0	; () banked
  4761  000D10  51C6               	movf	(PIDcontrol@PIDcorrection+1)& (0+255),w,b
  4762  000D12  203B               	addwfc	??_PIDcontrol+1,w,c
  4763  000D14  0100               	movlb	0	; () banked
  4764  000D16  6FC0               	movwf	(PIDcontrol@PWMout+1)& (0+255),b
  4765                           
  4766                           ; BSR set to: 0
  4767                           ;main.c: 501: intPCorr = (short) (PCorr / 256);
  4768                           
  4769                           ; BSR set to: 0
  4770  000D18  C0B3  F012         	movff	PIDcontrol@PCorr,___aldiv@dividend
  4771  000D1C  C0B4  F013         	movff	PIDcontrol@PCorr+1,___aldiv@dividend+1
  4772  000D20  C0B5  F014         	movff	PIDcontrol@PCorr+2,___aldiv@dividend+2
  4773  000D24  C0B6  F015         	movff	PIDcontrol@PCorr+3,___aldiv@dividend+3
  4774  000D28  0E00               	movlw	0
  4775  000D2A  6E16               	movwf	___aldiv@divisor,c
  4776  000D2C  0E01               	movlw	1
  4777  000D2E  6E17               	movwf	___aldiv@divisor+1,c
  4778  000D30  0E00               	movlw	0
  4779  000D32  6E18               	movwf	___aldiv@divisor+2,c
  4780  000D34  0E00               	movlw	0
  4781  000D36  6E19               	movwf	___aldiv@divisor+3,c
  4782  000D38  EC56  F00C         	call	___aldiv	;wreg free
  4783  000D3C  C012  F03A         	movff	?___aldiv,??_PIDcontrol
  4784  000D40  C013  F03B         	movff	?___aldiv+1,??_PIDcontrol+1
  4785  000D44  C014  F03C         	movff	?___aldiv+2,??_PIDcontrol+2
  4786  000D48  C015  F03D         	movff	?___aldiv+3,??_PIDcontrol+3
  4787  000D4C  C03A  F0AD         	movff	??_PIDcontrol,PIDcontrol@intPCorr
  4788  000D50  C03B  F0AE         	movff	??_PIDcontrol+1,PIDcontrol@intPCorr+1
  4789                           
  4790                           ;main.c: 502: intICorr = (short) (ICorr / 256);
  4791  000D54  C0B7  F012         	movff	PIDcontrol@ICorr,___aldiv@dividend
  4792  000D58  C0B8  F013         	movff	PIDcontrol@ICorr+1,___aldiv@dividend+1
  4793  000D5C  C0B9  F014         	movff	PIDcontrol@ICorr+2,___aldiv@dividend+2
  4794  000D60  C0BA  F015         	movff	PIDcontrol@ICorr+3,___aldiv@dividend+3
  4795  000D64  0E00               	movlw	0
  4796  000D66  6E16               	movwf	___aldiv@divisor,c
  4797  000D68  0E01               	movlw	1
  4798  000D6A  6E17               	movwf	___aldiv@divisor+1,c
  4799  000D6C  0E00               	movlw	0
  4800  000D6E  6E18               	movwf	___aldiv@divisor+2,c
  4801  000D70  0E00               	movlw	0
  4802  000D72  6E19               	movwf	___aldiv@divisor+3,c
  4803  000D74  EC56  F00C         	call	___aldiv	;wreg free
  4804  000D78  C012  F03A         	movff	?___aldiv,??_PIDcontrol
  4805  000D7C  C013  F03B         	movff	?___aldiv+1,??_PIDcontrol+1
  4806  000D80  C014  F03C         	movff	?___aldiv+2,??_PIDcontrol+2
  4807  000D84  C015  F03D         	movff	?___aldiv+3,??_PIDcontrol+3
  4808  000D88  C03A  F0AF         	movff	??_PIDcontrol,PIDcontrol@intICorr
  4809  000D8C  C03B  F0B0         	movff	??_PIDcontrol+1,PIDcontrol@intICorr+1
  4810                           
  4811                           ;main.c: 503: intDCorr = (short) (DCorr / 256);
  4812  000D90  C0BB  F012         	movff	PIDcontrol@DCorr,___aldiv@dividend
  4813  000D94  C0BC  F013         	movff	PIDcontrol@DCorr+1,___aldiv@dividend+1
  4814  000D98  C0BD  F014         	movff	PIDcontrol@DCorr+2,___aldiv@dividend+2
  4815  000D9C  C0BE  F015         	movff	PIDcontrol@DCorr+3,___aldiv@dividend+3
  4816  000DA0  0E00               	movlw	0
  4817  000DA2  6E16               	movwf	___aldiv@divisor,c
  4818  000DA4  0E01               	movlw	1
  4819  000DA6  6E17               	movwf	___aldiv@divisor+1,c
  4820  000DA8  0E00               	movlw	0
  4821  000DAA  6E18               	movwf	___aldiv@divisor+2,c
  4822  000DAC  0E00               	movlw	0
  4823  000DAE  6E19               	movwf	___aldiv@divisor+3,c
  4824  000DB0  EC56  F00C         	call	___aldiv	;wreg free
  4825  000DB4  C012  F03A         	movff	?___aldiv,??_PIDcontrol
  4826  000DB8  C013  F03B         	movff	?___aldiv+1,??_PIDcontrol+1
  4827  000DBC  C014  F03C         	movff	?___aldiv+2,??_PIDcontrol+2
  4828  000DC0  C015  F03D         	movff	?___aldiv+3,??_PIDcontrol+3
  4829  000DC4  C03A  F0B1         	movff	??_PIDcontrol,PIDcontrol@intDCorr
  4830  000DC8  C03B  F0B2         	movff	??_PIDcontrol+1,PIDcontrol@intDCorr+1
  4831                           
  4832                           ;main.c: 505: if (displayFlag){
  4833  000DCC  0100               	movlb	0	; () banked
  4834  000DCE  51A4               	movf	_displayFlag& (0+255),w,b
  4835  000DD0  B4D8               	btfsc	status,2,c
  4836  000DD2  D026               	goto	l3014
  4837                           
  4838                           ; BSR set to: 0
  4839                           ;main.c: 506: if (DisplayCounter) DisplayCounter--;
  4840  000DD4  5058               	movf	PIDcontrol@DisplayCounter+1,w,c
  4841  000DD6  1057               	iorwf	PIDcontrol@DisplayCounter,w,c
  4842  000DD8  B4D8               	btfsc	status,2,c
  4843  000DDA  D004               	goto	l3010
  4844                           
  4845                           ; BSR set to: 0
  4846  000DDC  0657               	decf	PIDcontrol@DisplayCounter,f,c
  4847  000DDE  A0D8               	btfss	status,0,c
  4848  000DE0  0658               	decf	PIDcontrol@DisplayCounter+1,f,c
  4849  000DE2  D01E               	goto	l3014
  4850  000DE4                     l3010:
  4851                           
  4852                           ; BSR set to: 0
  4853                           ;main.c: 507: else {
  4854                           ;main.c: 509: printf("\rERR: %d, P: %d, I %d, D: %d, PWM: %d", error, intPCorr, intICorr
      +                          , intDCorr, PWMout);
  4855  000DE4  0E06               	movlw	high STR_8
  4856  000DE6  6E1F               	movwf	printf@f+1,c
  4857  000DE8  0E0B               	movlw	low STR_8
  4858  000DEA  6E1E               	movwf	printf@f,c
  4859  000DEC  C038  F020         	movff	PIDcontrol@error,?_printf+2
  4860  000DF0  C039  F021         	movff	PIDcontrol@error+1,?_printf+3
  4861  000DF4  C0AD  F022         	movff	PIDcontrol@intPCorr,?_printf+4
  4862  000DF8  C0AE  F023         	movff	PIDcontrol@intPCorr+1,?_printf+5
  4863  000DFC  C0AF  F024         	movff	PIDcontrol@intICorr,?_printf+6
  4864  000E00  C0B0  F025         	movff	PIDcontrol@intICorr+1,?_printf+7
  4865  000E04  C0B1  F026         	movff	PIDcontrol@intDCorr,?_printf+8
  4866  000E08  C0B2  F027         	movff	PIDcontrol@intDCorr+1,?_printf+9
  4867  000E0C  C0BF  F028         	movff	PIDcontrol@PWMout,?_printf+10
  4868  000E10  C0C0  F029         	movff	PIDcontrol@PWMout+1,?_printf+11
  4869  000E14  EC9A  F00A         	call	_printf	;wreg free
  4870                           
  4871                           ;main.c: 510: DisplayCounter = 25;
  4872  000E18  0E00               	movlw	0
  4873  000E1A  6E58               	movwf	PIDcontrol@DisplayCounter+1,c
  4874  000E1C  0E19               	movlw	25
  4875  000E1E  6E57               	movwf	PIDcontrol@DisplayCounter,c
  4876  000E20                     l3014:
  4877                           
  4878                           ;main.c: 511: }
  4879                           ;main.c: 512: }
  4880                           ;main.c: 514: return (PWMout);
  4881  000E20  C0BF  F036         	movff	PIDcontrol@PWMout,?_PIDcontrol
  4882  000E24  C0C0  F037         	movff	PIDcontrol@PWMout+1,?_PIDcontrol+1
  4883  000E28  0012               	return	
  4884  000E2A                     __end_of_PIDcontrol:
  4885                           	opt stack 0
  4886                           tblptru	equ	0xFF8
  4887                           tblptrh	equ	0xFF7
  4888                           tblptrl	equ	0xFF6
  4889                           tablat	equ	0xFF5
  4890                           prodh	equ	0xFF4
  4891                           prodl	equ	0xFF3
  4892                           intcon	equ	0xFF2
  4893                           intcon2	equ	0xFF1
  4894                           postinc0	equ	0xFEE
  4895                           wreg	equ	0xFE8
  4896                           postinc1	equ	0xFE6
  4897                           postdec1	equ	0xFE5
  4898                           fsr1h	equ	0xFE2
  4899                           fsr1l	equ	0xFE1
  4900                           indf2	equ	0xFDF
  4901                           postinc2	equ	0xFDE
  4902                           postdec2	equ	0xFDD
  4903                           fsr2h	equ	0xFDA
  4904                           fsr2l	equ	0xFD9
  4905                           status	equ	0xFD8
  4906                           
  4907 ;; *************** function _printf *****************
  4908 ;; Defined at:
  4909 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\doprnt.c"
  4910 ;; Parameters:    Size  Location     Type
  4911 ;;  f               2   29[COMRAM] PTR const unsigned char 
  4912 ;;		 -> STR_8(38), STR_7(33), STR_6(13), STR_5(12), 
  4913 ;;		 -> STR_4(13), STR_3(5), STR_2(6), STR_1(25), 
  4914 ;; Auto vars:     Size  Location     Type
  4915 ;;  _val            5   47[COMRAM] struct .
  4916 ;;  ap              2   45[COMRAM] PTR void [1]
  4917 ;;		 -> ?_printf(2), 
  4918 ;;  c               1   52[COMRAM] char 
  4919 ;;  prec            1   44[COMRAM] char 
  4920 ;;  flag            1   43[COMRAM] unsigned char 
  4921 ;; Return value:  Size  Location     Type
  4922 ;;                  2   29[COMRAM] int 
  4923 ;; Registers used:
  4924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4925 ;; Tracked objects:
  4926 ;;		On entry : 0/0
  4927 ;;		On exit  : 0/0
  4928 ;;		Unchanged: 0/0
  4929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4930 ;;      Params:        12       0       0       0       0       0       0
  4931 ;;      Locals:        10       0       0       0       0       0       0
  4932 ;;      Temps:          2       0       0       0       0       0       0
  4933 ;;      Totals:        24       0       0       0       0       0       0
  4934 ;;Total ram usage:       24 bytes
  4935 ;; Hardware stack levels used:    1
  4936 ;; Hardware stack levels required when called:    3
  4937 ;; This function calls:
  4938 ;;		___lwdiv
  4939 ;;		___lwmod
  4940 ;;		_putch
  4941 ;; This function is called by:
  4942 ;;		_main
  4943 ;;		_PIDcontrol
  4944 ;; This function uses a non-reentrant model
  4945 ;;
  4946                           
  4947                           	psect	text17
  4948  001534                     __ptext17:
  4949                           	opt stack 0
  4950  001534                     _printf:
  4951                           	opt stack 27
  4952                           
  4953                           ;doprnt.c: 466: va_list ap;
  4954                           ;doprnt.c: 499: signed char c;
  4955                           ;doprnt.c: 506: signed char prec;
  4956                           ;doprnt.c: 508: unsigned char flag;
  4957                           ;doprnt.c: 527: union {
  4958                           ;doprnt.c: 528: unsigned int _val;
  4959                           ;doprnt.c: 529: struct {
  4960                           ;doprnt.c: 530: const char * _cp;
  4961                           ;doprnt.c: 531: unsigned _len;
  4962                           ;doprnt.c: 532: } _str;
  4963                           ;doprnt.c: 533: } _val;
  4964                           ;doprnt.c: 542: *ap = __va_start();
  4965                           
  4966                           ;incstack = 0
  4967  001534  0E00               	movlw	high (?_printf+2)
  4968  001536  6E2F               	movwf	printf@ap+1,c
  4969  001538  0E20               	movlw	low (?_printf+2)
  4970  00153A  6E2E               	movwf	printf@ap,c
  4971                           
  4972                           ;doprnt.c: 545: while(c = *f++) {
  4973  00153C  D09B               	goto	l2646
  4974  00153E                     l2594:
  4975                           
  4976                           ;doprnt.c: 547: if(c != '%')
  4977  00153E  5035               	movf	printf@c,w,c
  4978  001540  0A25               	xorlw	37
  4979  001542  B4D8               	btfsc	status,2,c
  4980  001544  D004               	goto	l2598
  4981                           
  4982                           ;doprnt.c: 549: {
  4983                           ;doprnt.c: 550: (putch(c) );
  4984  001546  5035               	movf	printf@c,w,c
  4985  001548  EC14  F010         	call	_putch
  4986                           
  4987                           ;doprnt.c: 551: continue;
  4988  00154C  D093               	goto	l2646
  4989  00154E                     l2598:
  4990                           
  4991                           ;doprnt.c: 552: }
  4992                           ;doprnt.c: 557: flag = 0;
  4993  00154E  0E00               	movlw	0
  4994  001550  6E2C               	movwf	printf@flag,c
  4995                           
  4996                           ;doprnt.c: 644: switch(c = *f++) {
  4997  001552  D00E               	goto	l2608
  4998  001554                     l2600:
  4999                           
  5000                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5001  001554  C02E  FFD9         	movff	printf@ap,fsr2l
  5002  001558  C02F  FFDA         	movff	printf@ap+1,fsr2h
  5003  00155C  50DF               	movf	indf2,w,c
  5004  00155E  6E35               	movwf	printf@c,c
  5005  001560  0E02               	movlw	2
  5006  001562  262E               	addwf	printf@ap,f,c
  5007  001564  0E00               	movlw	0
  5008  001566  222F               	addwfc	printf@ap+1,f,c
  5009  001568                     l2604:
  5010                           
  5011                           ;doprnt.c: 818: (putch(c) );
  5012  001568  5035               	movf	printf@c,w,c
  5013  00156A  EC14  F010         	call	_putch
  5014                           
  5015                           ;doprnt.c: 819: continue;
  5016  00156E  D082               	goto	l2646
  5017  001570                     l2608:
  5018  001570  C01E  FFF6         	movff	printf@f,tblptrl
  5019  001574  C01F  FFF7         	movff	printf@f+1,tblptrh
  5020  001578  4A1E               	infsnz	printf@f,f,c
  5021  00157A  2A1F               	incf	printf@f+1,f,c
  5022  00157C                     	if	0	;tblptru may be non-zero
  5023  00157C                     	endif
  5024  00157C                     	if	0	;tblptru may be non-zero
  5025  00157C                     	endif
  5026  00157C  0008               	tblrd		*
  5027  00157E  CFF5 F035          	movff	tablat,printf@c
  5028  001582  5035               	movf	printf@c& (0+255),w,c
  5029                           
  5030                           ; Switch size 1, requested type "space"
  5031                           ; Number of cases is 4, Range of values is 0 to 105
  5032                           ; switch strategies available:
  5033                           ; Name         Instructions Cycles
  5034                           ; simple_byte           13     7 (average)
  5035                           ;	Chosen strategy is simple_byte
  5036  001584  0A00               	xorlw	0	; case 0
  5037  001586  B4D8               	btfsc	status,2,c
  5038  001588  D080               	goto	l338
  5039  00158A  0A63               	xorlw	99	; case 99
  5040  00158C  B4D8               	btfsc	status,2,c
  5041  00158E  D7E2               	goto	l2600
  5042  001590  0A07               	xorlw	7	; case 100
  5043  001592  B4D8               	btfsc	status,2,c
  5044  001594  D003               	goto	l2610
  5045  001596  0A0D               	xorlw	13	; case 105
  5046  001598  A4D8               	btfss	status,2,c
  5047  00159A  D7E6               	goto	l2604
  5048  00159C                     l2610:
  5049                           
  5050                           ;doprnt.c: 1262: {
  5051                           ;doprnt.c: 1268: _val._val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5052  00159C  C02E  FFD9         	movff	printf@ap,fsr2l
  5053  0015A0  C02F  FFDA         	movff	printf@ap+1,fsr2h
  5054  0015A4  CFDE F030          	movff	postinc2,printf@_val
  5055  0015A8  CFDD F031          	movff	postdec2,printf@_val+1
  5056  0015AC  0E02               	movlw	2
  5057  0015AE  262E               	addwf	printf@ap,f,c
  5058  0015B0  0E00               	movlw	0
  5059  0015B2  222F               	addwfc	printf@ap+1,f,c
  5060                           
  5061                           ;doprnt.c: 1270: if((int)_val._val < 0) {
  5062  0015B4  5031               	movf	printf@_val+1,w,c
  5063  0015B6  0A80               	xorlw	128
  5064  0015B8  6EF3               	movwf	prodl,c
  5065  0015BA  0E80               	movlw	128
  5066  0015BC  5CF3               	subwf	prodl,w,c
  5067  0015BE  0E00               	movlw	0
  5068  0015C0  B4D8               	btfsc	status,2,c
  5069  0015C2  5C30               	subwf	printf@_val,w,c
  5070  0015C4  B0D8               	btfsc	status,0,c
  5071  0015C6  D006               	goto	l2620
  5072                           
  5073                           ;doprnt.c: 1271: flag |= 0x03;
  5074  0015C8  0E03               	movlw	3
  5075  0015CA  122C               	iorwf	printf@flag,f,c
  5076                           
  5077                           ;doprnt.c: 1272: _val._val = -_val._val;
  5078  0015CC  6C30               	negf	printf@_val,c
  5079  0015CE  1E31               	comf	printf@_val+1,f,c
  5080  0015D0  B0D8               	btfsc	status,0,c
  5081  0015D2  2A31               	incf	printf@_val+1,f,c
  5082  0015D4                     l2620:
  5083                           
  5084                           ;doprnt.c: 1273: }
  5085                           ;doprnt.c: 1275: }
  5086                           ;doprnt.c: 1314: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5087  0015D4  0E01               	movlw	1
  5088  0015D6  6E35               	movwf	printf@c,c
  5089  0015D8  5035               	movf	printf@c,w,c
  5090  0015DA  0A05               	xorlw	5
  5091  0015DC  B4D8               	btfsc	status,2,c
  5092  0015DE  D016               	goto	l2634
  5093                           
  5094                           ;doprnt.c: 1315: if(_val._val < dpowers[c])
  5095  0015E0  5035               	movf	printf@c,w,c
  5096  0015E2  0D02               	mullw	2
  5097  0015E4  0E01               	movlw	low _dpowers
  5098  0015E6  24F3               	addwf	prodl,w,c
  5099  0015E8  6EF6               	movwf	tblptrl,c
  5100  0015EA  0E06               	movlw	high _dpowers
  5101  0015EC  20F4               	addwfc	prodh,w,c
  5102  0015EE  6EF7               	movwf	tblptrh,c
  5103  0015F0                     	if	0	;There are less than 3 active tblptr bytes
  5104  0015F0                     	endif
  5105  0015F0  0009               	tblrd		*+
  5106  0015F2  CFF5 F02A          	movff	tablat,??_printf
  5107  0015F6  0009               	tblrd		*+
  5108  0015F8  CFF5 F02B          	movff	tablat,??_printf+1
  5109  0015FC  502A               	movf	??_printf,w,c
  5110  0015FE  5C30               	subwf	printf@_val,w,c
  5111  001600  502B               	movf	??_printf+1,w,c
  5112  001602  5831               	subwfb	printf@_val+1,w,c
  5113  001604  A0D8               	btfss	status,0,c
  5114  001606  D002               	goto	l2634
  5115                           
  5116                           ;doprnt.c: 1316: break;
  5117  001608  2A35               	incf	printf@c,f,c
  5118  00160A  D7E6               	goto	L19
  5119  00160C                     l2634:
  5120                           
  5121                           ;doprnt.c: 1431: {
  5122                           ;doprnt.c: 1447: if(flag & 0x03)
  5123  00160C  C02C  F02A         	movff	printf@flag,??_printf
  5124  001610  0E03               	movlw	3
  5125  001612  162A               	andwf	??_printf,f,c
  5126  001614  B4D8               	btfsc	status,2,c
  5127  001616  D003               	goto	l2638
  5128                           
  5129                           ;doprnt.c: 1448: (putch('-') );
  5130  001618  0E2D               	movlw	45
  5131  00161A  EC14  F010         	call	_putch
  5132  00161E                     l2638:
  5133                           
  5134                           ;doprnt.c: 1478: }
  5135                           ;doprnt.c: 1481: prec = c;
  5136  00161E  C035  F02D         	movff	printf@c,printf@prec
  5137                           
  5138                           ;doprnt.c: 1483: while(prec--) {
  5139  001622  D024               	goto	l2644
  5140  001624                     l2640:
  5141                           
  5142                           ;doprnt.c: 1487: {
  5143                           ;doprnt.c: 1498: c = (_val._val / dpowers[prec]) % 10 + '0';
  5144  001624  502D               	movf	printf@prec,w,c
  5145  001626  0D02               	mullw	2
  5146  001628  0E01               	movlw	low _dpowers
  5147  00162A  24F3               	addwf	prodl,w,c
  5148  00162C  6EF6               	movwf	tblptrl,c
  5149  00162E  0E06               	movlw	high _dpowers
  5150  001630  20F4               	addwfc	prodh,w,c
  5151  001632  6EF7               	movwf	tblptrh,c
  5152  001634                     	if	0	;There are less than 3 active tblptr bytes
  5153  001634                     	endif
  5154  001634  0009               	tblrd		*+
  5155  001636  CFF5 F014          	movff	tablat,___lwdiv@divisor
  5156  00163A  000A               	tblrd		*-
  5157  00163C  CFF5 F015          	movff	tablat,___lwdiv@divisor+1
  5158  001640  C030  F012         	movff	printf@_val,___lwdiv@dividend
  5159  001644  C031  F013         	movff	printf@_val+1,___lwdiv@dividend+1
  5160  001648  EC32  F00F         	call	___lwdiv	;wreg free
  5161  00164C  C012  F019         	movff	?___lwdiv,___lwmod@dividend
  5162  001650  C013  F01A         	movff	?___lwdiv+1,___lwmod@dividend+1
  5163  001654  0E00               	movlw	0
  5164  001656  6E1C               	movwf	___lwmod@divisor+1,c
  5165  001658  0E0A               	movlw	10
  5166  00165A  6E1B               	movwf	___lwmod@divisor,c
  5167  00165C  EC5B  F00F         	call	___lwmod	;wreg free
  5168  001660  5019               	movf	?___lwmod,w,c
  5169  001662  0F30               	addlw	48
  5170  001664  6E35               	movwf	printf@c,c
  5171                           
  5172                           ;doprnt.c: 1532: }
  5173                           ;doprnt.c: 1533: (putch(c) );
  5174  001666  5035               	movf	printf@c,w,c
  5175  001668  EC14  F010         	call	_putch
  5176  00166C                     l2644:
  5177  00166C  062D               	decf	printf@prec,f,c
  5178  00166E  282D               	incf	printf@prec& (0+255),w,c
  5179  001670  A4D8               	btfss	status,2,c
  5180  001672  D7D8               	goto	l2640
  5181  001674                     l2646:
  5182  001674  C01E  FFF6         	movff	printf@f,tblptrl
  5183  001678  C01F  FFF7         	movff	printf@f+1,tblptrh
  5184  00167C  4A1E               	infsnz	printf@f,f,c
  5185  00167E  2A1F               	incf	printf@f+1,f,c
  5186  001680                     	if	0	;tblptru may be non-zero
  5187  001680                     	endif
  5188  001680                     	if	0	;tblptru may be non-zero
  5189  001680                     	endif
  5190  001680  0008               	tblrd		*
  5191  001682  CFF5 F035          	movff	tablat,printf@c
  5192  001686  6635               	tstfsz	printf@c& (0+255),c
  5193  001688  D75A               	goto	l2594
  5194  00168A                     l338:
  5195  00168A  0012               	return	
  5196  00168C                     __end_of_printf:
  5197                           	opt stack 0
  5198                           tblptru	equ	0xFF8
  5199                           tblptrh	equ	0xFF7
  5200                           tblptrl	equ	0xFF6
  5201                           tablat	equ	0xFF5
  5202                           prodh	equ	0xFF4
  5203                           prodl	equ	0xFF3
  5204                           intcon	equ	0xFF2
  5205                           intcon2	equ	0xFF1
  5206                           postinc0	equ	0xFEE
  5207                           wreg	equ	0xFE8
  5208                           postinc1	equ	0xFE6
  5209                           postdec1	equ	0xFE5
  5210                           fsr1h	equ	0xFE2
  5211                           fsr1l	equ	0xFE1
  5212                           indf2	equ	0xFDF
  5213                           postinc2	equ	0xFDE
  5214                           postdec2	equ	0xFDD
  5215                           fsr2h	equ	0xFDA
  5216                           fsr2l	equ	0xFD9
  5217                           status	equ	0xFD8
  5218                           
  5219 ;; *************** function _putch *****************
  5220 ;; Defined at:
  5221 ;;		line 416 in file "../main.c"
  5222 ;; Parameters:    Size  Location     Type
  5223 ;;  byte            1    wreg     unsigned char 
  5224 ;; Auto vars:     Size  Location     Type
  5225 ;;  byte            1   17[COMRAM] unsigned char 
  5226 ;; Return value:  Size  Location     Type
  5227 ;;		None               void
  5228 ;; Registers used:
  5229 ;;		wreg
  5230 ;; Tracked objects:
  5231 ;;		On entry : 0/0
  5232 ;;		On exit  : 0/0
  5233 ;;		Unchanged: 0/0
  5234 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5235 ;;      Params:         0       0       0       0       0       0       0
  5236 ;;      Locals:         1       0       0       0       0       0       0
  5237 ;;      Temps:          0       0       0       0       0       0       0
  5238 ;;      Totals:         1       0       0       0       0       0       0
  5239 ;;Total ram usage:        1 bytes
  5240 ;; Hardware stack levels used:    1
  5241 ;; Hardware stack levels required when called:    2
  5242 ;; This function calls:
  5243 ;;		Nothing
  5244 ;; This function is called by:
  5245 ;;		_main
  5246 ;;		_printf
  5247 ;; This function uses a non-reentrant model
  5248 ;;
  5249                           
  5250                           	psect	text18
  5251  002028                     __ptext18:
  5252                           	opt stack 0
  5253  002028                     _putch:
  5254                           	opt stack 28
  5255                           
  5256                           ;incstack = 0
  5257                           ;putch@byte stored from wreg
  5258  002028  6E12               	movwf	putch@byte,c
  5259  00202A                     l262:
  5260  00202A  A89E               	btfss	3998,4,c	;volatile
  5261  00202C  D7FE               	goto	l262
  5262                           
  5263                           ;main.c: 419: TXREG = byte;
  5264  00202E  C012  FFAD         	movff	putch@byte,4013	;volatile
  5265                           
  5266                           ;main.c: 420: return;
  5267  002032  0012               	return	
  5268  002034                     __end_of_putch:
  5269                           	opt stack 0
  5270                           tblptru	equ	0xFF8
  5271                           tblptrh	equ	0xFF7
  5272                           tblptrl	equ	0xFF6
  5273                           tablat	equ	0xFF5
  5274                           prodh	equ	0xFF4
  5275                           prodl	equ	0xFF3
  5276                           intcon	equ	0xFF2
  5277                           intcon2	equ	0xFF1
  5278                           postinc0	equ	0xFEE
  5279                           wreg	equ	0xFE8
  5280                           postinc1	equ	0xFE6
  5281                           postdec1	equ	0xFE5
  5282                           fsr1h	equ	0xFE2
  5283                           fsr1l	equ	0xFE1
  5284                           indf2	equ	0xFDF
  5285                           postinc2	equ	0xFDE
  5286                           postdec2	equ	0xFDD
  5287                           fsr2h	equ	0xFDA
  5288                           fsr2l	equ	0xFD9
  5289                           status	equ	0xFD8
  5290                           
  5291 ;; *************** function ___lwmod *****************
  5292 ;; Defined at:
  5293 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwmod.c"
  5294 ;; Parameters:    Size  Location     Type
  5295 ;;  dividend        2   24[COMRAM] unsigned int 
  5296 ;;  divisor         2   26[COMRAM] unsigned int 
  5297 ;; Auto vars:     Size  Location     Type
  5298 ;;  counter         1   28[COMRAM] unsigned char 
  5299 ;; Return value:  Size  Location     Type
  5300 ;;                  2   24[COMRAM] unsigned int 
  5301 ;; Registers used:
  5302 ;;		wreg, status,2, status,0
  5303 ;; Tracked objects:
  5304 ;;		On entry : 0/0
  5305 ;;		On exit  : 0/0
  5306 ;;		Unchanged: 0/0
  5307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5308 ;;      Params:         4       0       0       0       0       0       0
  5309 ;;      Locals:         1       0       0       0       0       0       0
  5310 ;;      Temps:          0       0       0       0       0       0       0
  5311 ;;      Totals:         5       0       0       0       0       0       0
  5312 ;;Total ram usage:        5 bytes
  5313 ;; Hardware stack levels used:    1
  5314 ;; Hardware stack levels required when called:    2
  5315 ;; This function calls:
  5316 ;;		Nothing
  5317 ;; This function is called by:
  5318 ;;		_printf
  5319 ;; This function uses a non-reentrant model
  5320 ;;
  5321                           
  5322                           	psect	text19
  5323  001EB6                     __ptext19:
  5324                           	opt stack 0
  5325  001EB6                     ___lwmod:
  5326                           	opt stack 27
  5327                           
  5328                           ;incstack = 0
  5329  001EB6  501C               	movf	___lwmod@divisor+1,w,c
  5330  001EB8  101B               	iorwf	___lwmod@divisor,w,c
  5331  001EBA  B4D8               	btfsc	status,2,c
  5332  001EBC  D018               	goto	l899
  5333  001EBE  0E01               	movlw	1
  5334  001EC0  6E1D               	movwf	___lwmod@counter,c
  5335  001EC2  D004               	goto	l2558
  5336  001EC4                     l2556:
  5337  001EC4  90D8               	bcf	status,0,c
  5338  001EC6  361B               	rlcf	___lwmod@divisor,f,c
  5339  001EC8  361C               	rlcf	___lwmod@divisor+1,f,c
  5340  001ECA  2A1D               	incf	___lwmod@counter,f,c
  5341  001ECC                     l2558:
  5342  001ECC  AE1C               	btfss	___lwmod@divisor+1,7,c
  5343  001ECE  D7FA               	goto	l2556
  5344  001ED0                     l2560:
  5345  001ED0  501B               	movf	___lwmod@divisor,w,c
  5346  001ED2  5C19               	subwf	___lwmod@dividend,w,c
  5347  001ED4  501C               	movf	___lwmod@divisor+1,w,c
  5348  001ED6  581A               	subwfb	___lwmod@dividend+1,w,c
  5349  001ED8  A0D8               	btfss	status,0,c
  5350  001EDA  D004               	goto	l2564
  5351  001EDC  501B               	movf	___lwmod@divisor,w,c
  5352  001EDE  5E19               	subwf	___lwmod@dividend,f,c
  5353  001EE0  501C               	movf	___lwmod@divisor+1,w,c
  5354  001EE2  5A1A               	subwfb	___lwmod@dividend+1,f,c
  5355  001EE4                     l2564:
  5356  001EE4  90D8               	bcf	status,0,c
  5357  001EE6  321C               	rrcf	___lwmod@divisor+1,f,c
  5358  001EE8  321B               	rrcf	___lwmod@divisor,f,c
  5359  001EEA  2E1D               	decfsz	___lwmod@counter,f,c
  5360  001EEC  D7F1               	goto	l2560
  5361  001EEE                     l899:
  5362  001EEE  C019  F019         	movff	___lwmod@dividend,?___lwmod
  5363  001EF2  C01A  F01A         	movff	___lwmod@dividend+1,?___lwmod+1
  5364  001EF6  0012               	return	
  5365  001EF8                     __end_of___lwmod:
  5366                           	opt stack 0
  5367                           tblptru	equ	0xFF8
  5368                           tblptrh	equ	0xFF7
  5369                           tblptrl	equ	0xFF6
  5370                           tablat	equ	0xFF5
  5371                           prodh	equ	0xFF4
  5372                           prodl	equ	0xFF3
  5373                           intcon	equ	0xFF2
  5374                           intcon2	equ	0xFF1
  5375                           postinc0	equ	0xFEE
  5376                           wreg	equ	0xFE8
  5377                           postinc1	equ	0xFE6
  5378                           postdec1	equ	0xFE5
  5379                           fsr1h	equ	0xFE2
  5380                           fsr1l	equ	0xFE1
  5381                           indf2	equ	0xFDF
  5382                           postinc2	equ	0xFDE
  5383                           postdec2	equ	0xFDD
  5384                           fsr2h	equ	0xFDA
  5385                           fsr2l	equ	0xFD9
  5386                           status	equ	0xFD8
  5387                           
  5388 ;; *************** function ___lwdiv *****************
  5389 ;; Defined at:
  5390 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\lwdiv.c"
  5391 ;; Parameters:    Size  Location     Type
  5392 ;;  dividend        2   17[COMRAM] unsigned int 
  5393 ;;  divisor         2   19[COMRAM] unsigned int 
  5394 ;; Auto vars:     Size  Location     Type
  5395 ;;  quotient        2   22[COMRAM] unsigned int 
  5396 ;;  counter         1   21[COMRAM] unsigned char 
  5397 ;; Return value:  Size  Location     Type
  5398 ;;                  2   17[COMRAM] unsigned int 
  5399 ;; Registers used:
  5400 ;;		wreg, status,2, status,0
  5401 ;; Tracked objects:
  5402 ;;		On entry : 0/0
  5403 ;;		On exit  : 0/0
  5404 ;;		Unchanged: 0/0
  5405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5406 ;;      Params:         4       0       0       0       0       0       0
  5407 ;;      Locals:         3       0       0       0       0       0       0
  5408 ;;      Temps:          0       0       0       0       0       0       0
  5409 ;;      Totals:         7       0       0       0       0       0       0
  5410 ;;Total ram usage:        7 bytes
  5411 ;; Hardware stack levels used:    1
  5412 ;; Hardware stack levels required when called:    2
  5413 ;; This function calls:
  5414 ;;		Nothing
  5415 ;; This function is called by:
  5416 ;;		_printf
  5417 ;; This function uses a non-reentrant model
  5418 ;;
  5419                           
  5420                           	psect	text20
  5421  001E64                     __ptext20:
  5422                           	opt stack 0
  5423  001E64                     ___lwdiv:
  5424                           	opt stack 27
  5425                           
  5426                           ;incstack = 0
  5427  001E64  0E00               	movlw	0
  5428  001E66  6E18               	movwf	___lwdiv@quotient+1,c
  5429  001E68  0E00               	movlw	0
  5430  001E6A  6E17               	movwf	___lwdiv@quotient,c
  5431  001E6C  5015               	movf	___lwdiv@divisor+1,w,c
  5432  001E6E  1014               	iorwf	___lwdiv@divisor,w,c
  5433  001E70  B4D8               	btfsc	status,2,c
  5434  001E72  D01C               	goto	l889
  5435  001E74  0E01               	movlw	1
  5436  001E76  6E16               	movwf	___lwdiv@counter,c
  5437  001E78  D004               	goto	l2538
  5438  001E7A                     l2536:
  5439  001E7A  90D8               	bcf	status,0,c
  5440  001E7C  3614               	rlcf	___lwdiv@divisor,f,c
  5441  001E7E  3615               	rlcf	___lwdiv@divisor+1,f,c
  5442  001E80  2A16               	incf	___lwdiv@counter,f,c
  5443  001E82                     l2538:
  5444  001E82  AE15               	btfss	___lwdiv@divisor+1,7,c
  5445  001E84  D7FA               	goto	l2536
  5446  001E86                     l2540:
  5447  001E86  90D8               	bcf	status,0,c
  5448  001E88  3617               	rlcf	___lwdiv@quotient,f,c
  5449  001E8A  3618               	rlcf	___lwdiv@quotient+1,f,c
  5450  001E8C  5014               	movf	___lwdiv@divisor,w,c
  5451  001E8E  5C12               	subwf	___lwdiv@dividend,w,c
  5452  001E90  5015               	movf	___lwdiv@divisor+1,w,c
  5453  001E92  5813               	subwfb	___lwdiv@dividend+1,w,c
  5454  001E94  A0D8               	btfss	status,0,c
  5455  001E96  D005               	goto	l2548
  5456  001E98  5014               	movf	___lwdiv@divisor,w,c
  5457  001E9A  5E12               	subwf	___lwdiv@dividend,f,c
  5458  001E9C  5015               	movf	___lwdiv@divisor+1,w,c
  5459  001E9E  5A13               	subwfb	___lwdiv@dividend+1,f,c
  5460  001EA0  8017               	bsf	___lwdiv@quotient,0,c
  5461  001EA2                     l2548:
  5462  001EA2  90D8               	bcf	status,0,c
  5463  001EA4  3215               	rrcf	___lwdiv@divisor+1,f,c
  5464  001EA6  3214               	rrcf	___lwdiv@divisor,f,c
  5465  001EA8  2E16               	decfsz	___lwdiv@counter,f,c
  5466  001EAA  D7ED               	goto	l2540
  5467  001EAC                     l889:
  5468  001EAC  C017  F012         	movff	___lwdiv@quotient,?___lwdiv
  5469  001EB0  C018  F013         	movff	___lwdiv@quotient+1,?___lwdiv+1
  5470  001EB4  0012               	return	
  5471  001EB6                     __end_of___lwdiv:
  5472                           	opt stack 0
  5473                           tblptru	equ	0xFF8
  5474                           tblptrh	equ	0xFF7
  5475                           tblptrl	equ	0xFF6
  5476                           tablat	equ	0xFF5
  5477                           prodh	equ	0xFF4
  5478                           prodl	equ	0xFF3
  5479                           intcon	equ	0xFF2
  5480                           intcon2	equ	0xFF1
  5481                           postinc0	equ	0xFEE
  5482                           wreg	equ	0xFE8
  5483                           postinc1	equ	0xFE6
  5484                           postdec1	equ	0xFE5
  5485                           fsr1h	equ	0xFE2
  5486                           fsr1l	equ	0xFE1
  5487                           indf2	equ	0xFDF
  5488                           postinc2	equ	0xFDE
  5489                           postdec2	equ	0xFDD
  5490                           fsr2h	equ	0xFDA
  5491                           fsr2l	equ	0xFD9
  5492                           status	equ	0xFD8
  5493                           
  5494 ;; *************** function ___wmul *****************
  5495 ;; Defined at:
  5496 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul16.c"
  5497 ;; Parameters:    Size  Location     Type
  5498 ;;  multiplier      2   17[COMRAM] unsigned int 
  5499 ;;  multiplicand    2   19[COMRAM] unsigned int 
  5500 ;; Auto vars:     Size  Location     Type
  5501 ;;  product         2   21[COMRAM] unsigned int 
  5502 ;; Return value:  Size  Location     Type
  5503 ;;                  2   17[COMRAM] unsigned int 
  5504 ;; Registers used:
  5505 ;;		wreg, status,2, status,0, prodl, prodh
  5506 ;; Tracked objects:
  5507 ;;		On entry : 0/0
  5508 ;;		On exit  : 0/0
  5509 ;;		Unchanged: 0/0
  5510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5511 ;;      Params:         4       0       0       0       0       0       0
  5512 ;;      Locals:         2       0       0       0       0       0       0
  5513 ;;      Temps:          0       0       0       0       0       0       0
  5514 ;;      Totals:         6       0       0       0       0       0       0
  5515 ;;Total ram usage:        6 bytes
  5516 ;; Hardware stack levels used:    1
  5517 ;; Hardware stack levels required when called:    2
  5518 ;; This function calls:
  5519 ;;		Nothing
  5520 ;; This function is called by:
  5521 ;;		_initializeErrorArrays
  5522 ;;		_main
  5523 ;;		_readServoPot
  5524 ;;		_PIDcontrol
  5525 ;;		_windowFilter
  5526 ;;		_atoi
  5527 ;; This function uses a non-reentrant model
  5528 ;;
  5529                           
  5530                           	psect	text21
  5531  001F82                     __ptext21:
  5532                           	opt stack 0
  5533  001F82                     ___wmul:
  5534                           	opt stack 26
  5535                           
  5536                           ;incstack = 0
  5537  001F82  5012               	movf	___wmul@multiplier,w,c
  5538  001F84  0214               	mulwf	___wmul@multiplicand,c
  5539  001F86  CFF3 F016          	movff	prodl,___wmul@product
  5540  001F8A  CFF4 F017          	movff	prodh,___wmul@product+1
  5541  001F8E  5012               	movf	___wmul@multiplier,w,c
  5542  001F90  0215               	mulwf	___wmul@multiplicand+1,c
  5543  001F92  50F3               	movf	prodl,w,c
  5544  001F94  2617               	addwf	___wmul@product+1,f,c
  5545  001F96  5013               	movf	___wmul@multiplier+1,w,c
  5546  001F98  0214               	mulwf	___wmul@multiplicand,c
  5547  001F9A  50F3               	movf	prodl,w,c
  5548  001F9C  2617               	addwf	___wmul@product+1,f,c
  5549  001F9E  C016  F012         	movff	___wmul@product,?___wmul
  5550  001FA2  C017  F013         	movff	___wmul@product+1,?___wmul+1
  5551  001FA6  0012               	return	
  5552  001FA8                     __end_of___wmul:
  5553                           	opt stack 0
  5554                           tblptru	equ	0xFF8
  5555                           tblptrh	equ	0xFF7
  5556                           tblptrl	equ	0xFF6
  5557                           tablat	equ	0xFF5
  5558                           prodh	equ	0xFF4
  5559                           prodl	equ	0xFF3
  5560                           intcon	equ	0xFF2
  5561                           intcon2	equ	0xFF1
  5562                           postinc0	equ	0xFEE
  5563                           wreg	equ	0xFE8
  5564                           postinc1	equ	0xFE6
  5565                           postdec1	equ	0xFE5
  5566                           fsr1h	equ	0xFE2
  5567                           fsr1l	equ	0xFE1
  5568                           indf2	equ	0xFDF
  5569                           postinc2	equ	0xFDE
  5570                           postdec2	equ	0xFDD
  5571                           fsr2h	equ	0xFDA
  5572                           fsr2l	equ	0xFD9
  5573                           status	equ	0xFD8
  5574                           
  5575 ;; *************** function ___lmul *****************
  5576 ;; Defined at:
  5577 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\Umul32.c"
  5578 ;; Parameters:    Size  Location     Type
  5579 ;;  multiplier      4   23[COMRAM] unsigned long 
  5580 ;;  multiplicand    4   27[COMRAM] unsigned long 
  5581 ;; Auto vars:     Size  Location     Type
  5582 ;;  product         4   31[COMRAM] unsigned long 
  5583 ;; Return value:  Size  Location     Type
  5584 ;;                  4   23[COMRAM] unsigned long 
  5585 ;; Registers used:
  5586 ;;		wreg, status,2, status,0
  5587 ;; Tracked objects:
  5588 ;;		On entry : 0/0
  5589 ;;		On exit  : 0/0
  5590 ;;		Unchanged: 0/0
  5591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5592 ;;      Params:         8       0       0       0       0       0       0
  5593 ;;      Locals:         4       0       0       0       0       0       0
  5594 ;;      Temps:          0       0       0       0       0       0       0
  5595 ;;      Totals:        12       0       0       0       0       0       0
  5596 ;;Total ram usage:       12 bytes
  5597 ;; Hardware stack levels used:    1
  5598 ;; Hardware stack levels required when called:    2
  5599 ;; This function calls:
  5600 ;;		Nothing
  5601 ;; This function is called by:
  5602 ;;		_PIDcontrol
  5603 ;; This function uses a non-reentrant model
  5604 ;;
  5605                           
  5606                           	psect	text22
  5607  001D66                     __ptext22:
  5608                           	opt stack 0
  5609  001D66                     ___lmul:
  5610                           	opt stack 27
  5611                           
  5612                           ;incstack = 0
  5613  001D66  0E00               	movlw	0
  5614  001D68  6E20               	movwf	___lmul@product,c
  5615  001D6A  0E00               	movlw	0
  5616  001D6C  6E21               	movwf	___lmul@product+1,c
  5617  001D6E  0E00               	movlw	0
  5618  001D70  6E22               	movwf	___lmul@product+2,c
  5619  001D72  0E00               	movlw	0
  5620  001D74  6E23               	movwf	___lmul@product+3,c
  5621  001D76                     l2718:
  5622  001D76  A018               	btfss	___lmul@multiplier,0,c
  5623  001D78  D008               	goto	l2722
  5624  001D7A  501C               	movf	___lmul@multiplicand,w,c
  5625  001D7C  2620               	addwf	___lmul@product,f,c
  5626  001D7E  501D               	movf	___lmul@multiplicand+1,w,c
  5627  001D80  2221               	addwfc	___lmul@product+1,f,c
  5628  001D82  501E               	movf	___lmul@multiplicand+2,w,c
  5629  001D84  2222               	addwfc	___lmul@product+2,f,c
  5630  001D86  501F               	movf	___lmul@multiplicand+3,w,c
  5631  001D88  2223               	addwfc	___lmul@product+3,f,c
  5632  001D8A                     l2722:
  5633  001D8A  90D8               	bcf	status,0,c
  5634  001D8C  361C               	rlcf	___lmul@multiplicand,f,c
  5635  001D8E  361D               	rlcf	___lmul@multiplicand+1,f,c
  5636  001D90  361E               	rlcf	___lmul@multiplicand+2,f,c
  5637  001D92  361F               	rlcf	___lmul@multiplicand+3,f,c
  5638  001D94  90D8               	bcf	status,0,c
  5639  001D96  321B               	rrcf	___lmul@multiplier+3,f,c
  5640  001D98  321A               	rrcf	___lmul@multiplier+2,f,c
  5641  001D9A  3219               	rrcf	___lmul@multiplier+1,f,c
  5642  001D9C  3218               	rrcf	___lmul@multiplier,f,c
  5643  001D9E  501B               	movf	___lmul@multiplier+3,w,c
  5644  001DA0  1018               	iorwf	___lmul@multiplier,w,c
  5645  001DA2  1019               	iorwf	___lmul@multiplier+1,w,c
  5646  001DA4  101A               	iorwf	___lmul@multiplier+2,w,c
  5647  001DA6  A4D8               	btfss	status,2,c
  5648  001DA8  D7E6               	goto	l2718
  5649  001DAA  C020  F018         	movff	___lmul@product,?___lmul
  5650  001DAE  C021  F019         	movff	___lmul@product+1,?___lmul+1
  5651  001DB2  C022  F01A         	movff	___lmul@product+2,?___lmul+2
  5652  001DB6  C023  F01B         	movff	___lmul@product+3,?___lmul+3
  5653  001DBA  0012               	return	
  5654  001DBC                     __end_of___lmul:
  5655                           	opt stack 0
  5656                           tblptru	equ	0xFF8
  5657                           tblptrh	equ	0xFF7
  5658                           tblptrl	equ	0xFF6
  5659                           tablat	equ	0xFF5
  5660                           prodh	equ	0xFF4
  5661                           prodl	equ	0xFF3
  5662                           intcon	equ	0xFF2
  5663                           intcon2	equ	0xFF1
  5664                           postinc0	equ	0xFEE
  5665                           wreg	equ	0xFE8
  5666                           postinc1	equ	0xFE6
  5667                           postdec1	equ	0xFE5
  5668                           fsr1h	equ	0xFE2
  5669                           fsr1l	equ	0xFE1
  5670                           indf2	equ	0xFDF
  5671                           postinc2	equ	0xFDE
  5672                           postdec2	equ	0xFDD
  5673                           fsr2h	equ	0xFDA
  5674                           fsr2l	equ	0xFD9
  5675                           status	equ	0xFD8
  5676                           
  5677 ;; *************** function ___aldiv *****************
  5678 ;; Defined at:
  5679 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\aldiv.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;  dividend        4   17[COMRAM] long 
  5682 ;;  divisor         4   21[COMRAM] long 
  5683 ;; Auto vars:     Size  Location     Type
  5684 ;;  quotient        4   27[COMRAM] long 
  5685 ;;  sign            1   26[COMRAM] unsigned char 
  5686 ;;  counter         1   25[COMRAM] unsigned char 
  5687 ;; Return value:  Size  Location     Type
  5688 ;;                  4   17[COMRAM] long 
  5689 ;; Registers used:
  5690 ;;		wreg, status,2, status,0
  5691 ;; Tracked objects:
  5692 ;;		On entry : 0/0
  5693 ;;		On exit  : 0/0
  5694 ;;		Unchanged: 0/0
  5695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5696 ;;      Params:         8       0       0       0       0       0       0
  5697 ;;      Locals:         6       0       0       0       0       0       0
  5698 ;;      Temps:          0       0       0       0       0       0       0
  5699 ;;      Totals:        14       0       0       0       0       0       0
  5700 ;;Total ram usage:       14 bytes
  5701 ;; Hardware stack levels used:    1
  5702 ;; Hardware stack levels required when called:    2
  5703 ;; This function calls:
  5704 ;;		Nothing
  5705 ;; This function is called by:
  5706 ;;		_main
  5707 ;;		_PIDcontrol
  5708 ;; This function uses a non-reentrant model
  5709 ;;
  5710                           
  5711                           	psect	text23
  5712  0018AC                     __ptext23:
  5713                           	opt stack 0
  5714  0018AC                     ___aldiv:
  5715                           	opt stack 28
  5716                           
  5717                           ;incstack = 0
  5718  0018AC  0E00               	movlw	0
  5719  0018AE  6E1B               	movwf	___aldiv@sign,c
  5720  0018B0  5019               	movf	___aldiv@divisor+3,w,c
  5721  0018B2  0A80               	xorlw	128
  5722  0018B4  0F80               	addlw	128
  5723  0018B6  E108               	bnz	u2465
  5724  0018B8  0E00               	movlw	0
  5725  0018BA  5C18               	subwf	___aldiv@divisor+2,w,c
  5726  0018BC  E105               	bnz	u2465
  5727  0018BE  0E00               	movlw	0
  5728  0018C0  5C17               	subwf	___aldiv@divisor+1,w,c
  5729  0018C2  E102               	bnz	u2465
  5730  0018C4  0E00               	movlw	0
  5731  0018C6  5C16               	subwf	___aldiv@divisor,w,c
  5732  0018C8                     u2465:
  5733  0018C8  B0D8               	btfsc	status,0,c
  5734  0018CA  D00A               	goto	l2734
  5735  0018CC  1E19               	comf	___aldiv@divisor+3,f,c
  5736  0018CE  1E18               	comf	___aldiv@divisor+2,f,c
  5737  0018D0  1E17               	comf	___aldiv@divisor+1,f,c
  5738  0018D2  6C16               	negf	___aldiv@divisor,c
  5739  0018D4  0E00               	movlw	0
  5740  0018D6  2217               	addwfc	___aldiv@divisor+1,f,c
  5741  0018D8  2218               	addwfc	___aldiv@divisor+2,f,c
  5742  0018DA  2219               	addwfc	___aldiv@divisor+3,f,c
  5743  0018DC  0E01               	movlw	1
  5744  0018DE  6E1B               	movwf	___aldiv@sign,c
  5745  0018E0                     l2734:
  5746  0018E0  5015               	movf	___aldiv@dividend+3,w,c
  5747  0018E2  0A80               	xorlw	128
  5748  0018E4  0F80               	addlw	128
  5749  0018E6  E108               	bnz	u2475
  5750  0018E8  0E00               	movlw	0
  5751  0018EA  5C14               	subwf	___aldiv@dividend+2,w,c
  5752  0018EC  E105               	bnz	u2475
  5753  0018EE  0E00               	movlw	0
  5754  0018F0  5C13               	subwf	___aldiv@dividend+1,w,c
  5755  0018F2  E102               	bnz	u2475
  5756  0018F4  0E00               	movlw	0
  5757  0018F6  5C12               	subwf	___aldiv@dividend,w,c
  5758  0018F8                     u2475:
  5759  0018F8  B0D8               	btfsc	status,0,c
  5760  0018FA  D00A               	goto	l2740
  5761  0018FC  1E15               	comf	___aldiv@dividend+3,f,c
  5762  0018FE  1E14               	comf	___aldiv@dividend+2,f,c
  5763  001900  1E13               	comf	___aldiv@dividend+1,f,c
  5764  001902  6C12               	negf	___aldiv@dividend,c
  5765  001904  0E00               	movlw	0
  5766  001906  2213               	addwfc	___aldiv@dividend+1,f,c
  5767  001908  2214               	addwfc	___aldiv@dividend+2,f,c
  5768  00190A  2215               	addwfc	___aldiv@dividend+3,f,c
  5769  00190C  0E01               	movlw	1
  5770  00190E  1A1B               	xorwf	___aldiv@sign,f,c
  5771  001910                     l2740:
  5772  001910  0E00               	movlw	0
  5773  001912  6E1C               	movwf	___aldiv@quotient,c
  5774  001914  0E00               	movlw	0
  5775  001916  6E1D               	movwf	___aldiv@quotient+1,c
  5776  001918  0E00               	movlw	0
  5777  00191A  6E1E               	movwf	___aldiv@quotient+2,c
  5778  00191C  0E00               	movlw	0
  5779  00191E  6E1F               	movwf	___aldiv@quotient+3,c
  5780  001920  5019               	movf	___aldiv@divisor+3,w,c
  5781  001922  1016               	iorwf	___aldiv@divisor,w,c
  5782  001924  1017               	iorwf	___aldiv@divisor+1,w,c
  5783  001926  1018               	iorwf	___aldiv@divisor+2,w,c
  5784  001928  B4D8               	btfsc	status,2,c
  5785  00192A  D02A               	goto	l2762
  5786  00192C  0E01               	movlw	1
  5787  00192E  6E1A               	movwf	___aldiv@counter,c
  5788  001930  D006               	goto	l2748
  5789  001932                     l2746:
  5790  001932  90D8               	bcf	status,0,c
  5791  001934  3616               	rlcf	___aldiv@divisor,f,c
  5792  001936  3617               	rlcf	___aldiv@divisor+1,f,c
  5793  001938  3618               	rlcf	___aldiv@divisor+2,f,c
  5794  00193A  3619               	rlcf	___aldiv@divisor+3,f,c
  5795  00193C  2A1A               	incf	___aldiv@counter,f,c
  5796  00193E                     l2748:
  5797  00193E  AE19               	btfss	___aldiv@divisor+3,7,c
  5798  001940  D7F8               	goto	l2746
  5799  001942                     l2750:
  5800  001942  90D8               	bcf	status,0,c
  5801  001944  361C               	rlcf	___aldiv@quotient,f,c
  5802  001946  361D               	rlcf	___aldiv@quotient+1,f,c
  5803  001948  361E               	rlcf	___aldiv@quotient+2,f,c
  5804  00194A  361F               	rlcf	___aldiv@quotient+3,f,c
  5805  00194C  5016               	movf	___aldiv@divisor,w,c
  5806  00194E  5C12               	subwf	___aldiv@dividend,w,c
  5807  001950  5017               	movf	___aldiv@divisor+1,w,c
  5808  001952  5813               	subwfb	___aldiv@dividend+1,w,c
  5809  001954  5018               	movf	___aldiv@divisor+2,w,c
  5810  001956  5814               	subwfb	___aldiv@dividend+2,w,c
  5811  001958  5019               	movf	___aldiv@divisor+3,w,c
  5812  00195A  5815               	subwfb	___aldiv@dividend+3,w,c
  5813  00195C  A0D8               	btfss	status,0,c
  5814  00195E  D009               	goto	l2758
  5815  001960  5016               	movf	___aldiv@divisor,w,c
  5816  001962  5E12               	subwf	___aldiv@dividend,f,c
  5817  001964  5017               	movf	___aldiv@divisor+1,w,c
  5818  001966  5A13               	subwfb	___aldiv@dividend+1,f,c
  5819  001968  5018               	movf	___aldiv@divisor+2,w,c
  5820  00196A  5A14               	subwfb	___aldiv@dividend+2,f,c
  5821  00196C  5019               	movf	___aldiv@divisor+3,w,c
  5822  00196E  5A15               	subwfb	___aldiv@dividend+3,f,c
  5823  001970  801C               	bsf	___aldiv@quotient,0,c
  5824  001972                     l2758:
  5825  001972  90D8               	bcf	status,0,c
  5826  001974  3219               	rrcf	___aldiv@divisor+3,f,c
  5827  001976  3218               	rrcf	___aldiv@divisor+2,f,c
  5828  001978  3217               	rrcf	___aldiv@divisor+1,f,c
  5829  00197A  3216               	rrcf	___aldiv@divisor,f,c
  5830  00197C  2E1A               	decfsz	___aldiv@counter,f,c
  5831  00197E  D7E1               	goto	l2750
  5832  001980                     l2762:
  5833  001980  501B               	movf	___aldiv@sign,w,c
  5834  001982  B4D8               	btfsc	status,2,c
  5835  001984  D008               	goto	l2766
  5836  001986  1E1F               	comf	___aldiv@quotient+3,f,c
  5837  001988  1E1E               	comf	___aldiv@quotient+2,f,c
  5838  00198A  1E1D               	comf	___aldiv@quotient+1,f,c
  5839  00198C  6C1C               	negf	___aldiv@quotient,c
  5840  00198E  0E00               	movlw	0
  5841  001990  221D               	addwfc	___aldiv@quotient+1,f,c
  5842  001992  221E               	addwfc	___aldiv@quotient+2,f,c
  5843  001994  221F               	addwfc	___aldiv@quotient+3,f,c
  5844  001996                     l2766:
  5845  001996  C01C  F012         	movff	___aldiv@quotient,?___aldiv
  5846  00199A  C01D  F013         	movff	___aldiv@quotient+1,?___aldiv+1
  5847  00199E  C01E  F014         	movff	___aldiv@quotient+2,?___aldiv+2
  5848  0019A2  C01F  F015         	movff	___aldiv@quotient+3,?___aldiv+3
  5849  0019A6  0012               	return	
  5850  0019A8                     __end_of___aldiv:
  5851                           	opt stack 0
  5852                           tblptru	equ	0xFF8
  5853                           tblptrh	equ	0xFF7
  5854                           tblptrl	equ	0xFF6
  5855                           tablat	equ	0xFF5
  5856                           prodh	equ	0xFF4
  5857                           prodl	equ	0xFF3
  5858                           intcon	equ	0xFF2
  5859                           intcon2	equ	0xFF1
  5860                           postinc0	equ	0xFEE
  5861                           wreg	equ	0xFE8
  5862                           postinc1	equ	0xFE6
  5863                           postdec1	equ	0xFE5
  5864                           fsr1h	equ	0xFE2
  5865                           fsr1l	equ	0xFE1
  5866                           indf2	equ	0xFDF
  5867                           postinc2	equ	0xFDE
  5868                           postdec2	equ	0xFDD
  5869                           fsr2h	equ	0xFDA
  5870                           fsr2l	equ	0xFD9
  5871                           status	equ	0xFD8
  5872                           
  5873 ;; *************** function _isr *****************
  5874 ;; Defined at:
  5875 ;;		line 366 in file "../main.c"
  5876 ;; Parameters:    Size  Location     Type
  5877 ;;		None
  5878 ;; Auto vars:     Size  Location     Type
  5879 ;;  ch              1   16[COMRAM] unsigned char 
  5880 ;;  dummy           1   15[COMRAM] unsigned char 
  5881 ;; Return value:  Size  Location     Type
  5882 ;;		None               void
  5883 ;; Registers used:
  5884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5885 ;; Tracked objects:
  5886 ;;		On entry : 0/0
  5887 ;;		On exit  : 0/0
  5888 ;;		Unchanged: 0/0
  5889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5890 ;;      Params:         0       0       0       0       0       0       0
  5891 ;;      Locals:         2       0       0       0       0       0       0
  5892 ;;      Temps:         14       0       0       0       0       0       0
  5893 ;;      Totals:        16       0       0       0       0       0       0
  5894 ;;Total ram usage:       16 bytes
  5895 ;; Hardware stack levels used:    1
  5896 ;; Hardware stack levels required when called:    1
  5897 ;; This function calls:
  5898 ;;		i2_toupper
  5899 ;; This function is called by:
  5900 ;;		Interrupt level 2
  5901 ;; This function uses a non-reentrant model
  5902 ;;
  5903                           
  5904                           	psect	intcode
  5905  000008                     __pintcode:
  5906                           	opt stack 0
  5907  000008                     _isr:
  5908                           	opt stack 26
  5909                           
  5910                           ;incstack = 0
  5911  000008  CFFA F002          	movff	pclath,??_isr
  5912  00000C  CFFB F003          	movff	pclatu,??_isr+1
  5913  000010  CFE9 F004          	movff	fsr0l,??_isr+2
  5914  000014  ED46  F00B         	call	int_func,f	;refresh shadow registers
  5915                           pclatu	equ	0xFFB
  5916                           pclath	equ	0xFFA
  5917                           tblptru	equ	0xFF8
  5918                           tblptrh	equ	0xFF7
  5919                           tblptrl	equ	0xFF6
  5920                           tablat	equ	0xFF5
  5921                           prodh	equ	0xFF4
  5922                           prodl	equ	0xFF3
  5923                           intcon	equ	0xFF2
  5924                           intcon2	equ	0xFF1
  5925                           postinc0	equ	0xFEE
  5926                           fsr0l	equ	0xFE9
  5927                           wreg	equ	0xFE8
  5928                           postinc1	equ	0xFE6
  5929                           postdec1	equ	0xFE5
  5930                           fsr1h	equ	0xFE2
  5931                           fsr1l	equ	0xFE1
  5932                           indf2	equ	0xFDF
  5933                           postinc2	equ	0xFDE
  5934                           postdec2	equ	0xFDD
  5935                           fsr2h	equ	0xFDA
  5936                           fsr2l	equ	0xFD9
  5937                           status	equ	0xFD8
  5938                           
  5939                           	psect	intcode_body
  5940  00168C                     __pintcode_body:
  5941                           	opt stack 26
  5942  00168C                     int_func:
  5943                           	opt stack 26
  5944  00168C  0006               	pop		; remove dummy address from shadow register refresh
  5945  00168E  CFEA F005          	movff	fsr0h,??_isr+3
  5946  001692  CFE1 F006          	movff	fsr1l,??_isr+4
  5947  001696  CFE2 F007          	movff	fsr1h,??_isr+5
  5948  00169A  CFD9 F008          	movff	fsr2l,??_isr+6
  5949  00169E  CFDA F009          	movff	fsr2h,??_isr+7
  5950  0016A2  CFF3 F00A          	movff	prodl,??_isr+8
  5951  0016A6  CFF4 F00B          	movff	prodh,??_isr+9
  5952  0016AA  CFF6 F00C          	movff	tblptrl,??_isr+10
  5953  0016AE  CFF7 F00D          	movff	tblptrh,??_isr+11
  5954  0016B2  CFF8 F00E          	movff	tblptru,??_isr+12
  5955  0016B6  CFF5 F00F          	movff	tablat,??_isr+13
  5956                           
  5957                           ;main.c: 367: unsigned char dummy, ch;
  5958                           ;main.c: 368: static unsigned char i = 0;
  5959                           ;main.c: 370: static unsigned int Timer2Counter = 0;
  5960                           ;main.c: 372: if (OERR == 1) {
  5961  0016BA  A2AB               	btfss	4011,1,c	;volatile
  5962  0016BC  D006               	goto	i2l241
  5963                           
  5964                           ;main.c: 373: CREN = 0;
  5965  0016BE  98AB               	bcf	4011,4,c	;volatile
  5966                           
  5967                           ;main.c: 374: CREN = 1;
  5968  0016C0  88AB               	bsf	4011,4,c	;volatile
  5969                           
  5970                           ;main.c: 375: dummy = RCREG;
  5971  0016C2  CFAE F010          	movff	4014,isr@dummy	;volatile
  5972                           
  5973                           ;main.c: 376: dummy = RCREG;
  5974  0016C6  CFAE F010          	movff	4014,isr@dummy	;volatile
  5975  0016CA                     i2l241:
  5976                           
  5977                           ;main.c: 377: }
  5978                           ;main.c: 379: if (RCIF == 1) {
  5979  0016CA  AA9E               	btfss	3998,5,c	;volatile
  5980  0016CC  D042               	goto	i2l2506
  5981                           
  5982                           ;main.c: 380: RCIF = 0;
  5983  0016CE  9A9E               	bcf	3998,5,c	;volatile
  5984                           
  5985                           ;main.c: 381: ch = RCREG;
  5986  0016D0  CFAE F011          	movff	4014,isr@ch	;volatile
  5987                           
  5988                           ;main.c: 382: if (ch != 0) {
  5989  0016D4  5011               	movf	isr@ch,w,c
  5990  0016D6  B4D8               	btfsc	status,2,c
  5991  0016D8  D03C               	goto	i2l2506
  5992                           
  5993                           ;main.c: 383: if (ch == 8) {
  5994  0016DA  5011               	movf	isr@ch,w,c
  5995  0016DC  0A08               	xorlw	8
  5996  0016DE  A4D8               	btfss	status,2,c
  5997  0016E0  D018               	goto	i2l2494
  5998                           
  5999                           ;main.c: 384: if (i != 0) i--;
  6000  0016E2  5056               	movf	isr@i,w,c
  6001  0016E4  A4D8               	btfss	status,2,c
  6002  0016E6  0656               	decf	isr@i,f,c
  6003                           
  6004                           ;main.c: 385: UARTbuffer[i] = '\0';
  6005  0016E8  5056               	movf	isr@i,w,c
  6006  0016EA  0D01               	mullw	1
  6007  0016EC  0101               	movlb	1	; () banked
  6008  0016EE  0E72               	movlw	low _UARTbuffer
  6009  0016F0  24F3               	addwf	prodl,w,c
  6010  0016F2  6ED9               	movwf	fsr2l,c
  6011  0016F4  0101               	movlb	1	; () banked
  6012  0016F6  0E01               	movlw	high _UARTbuffer
  6013  0016F8  20F4               	addwfc	prodh,w,c
  6014  0016FA  6EDA               	movwf	fsr2h,c
  6015  0016FC  0E00               	movlw	0
  6016  0016FE  6EDF               	movwf	indf2,c
  6017  001700                     i2l246:
  6018  001700  A89E               	btfss	3998,4,c	;volatile
  6019  001702  D7FE               	goto	i2l246
  6020                           
  6021                           ;main.c: 387: TXREG = ' ';
  6022  001704  0E20               	movlw	32
  6023  001706  6EAD               	movwf	4013,c	;volatile
  6024  001708                     i2l249:
  6025  001708  A89E               	btfss	3998,4,c	;volatile
  6026  00170A  D7FE               	goto	i2l249
  6027                           
  6028                           ;main.c: 389: TXREG = 8;
  6029  00170C  0E08               	movlw	8
  6030  00170E  6EAD               	movwf	4013,c	;volatile
  6031                           
  6032                           ;main.c: 390: } else if (i < 8) {
  6033  001710  D013               	goto	i2l2500
  6034  001712                     i2l2494:
  6035  001712  0E08               	movlw	8
  6036  001714  5C56               	subwf	isr@i,w,c
  6037  001716  B0D8               	btfsc	status,0,c
  6038  001718  D00F               	goto	i2l2500
  6039                           
  6040                           ;main.c: 391: UARTbuffer[i] = toupper(ch);
  6041  00171A  5056               	movf	isr@i,w,c
  6042  00171C  0D01               	mullw	1
  6043  00171E  0101               	movlb	1	; () banked
  6044  001720  0E72               	movlw	low _UARTbuffer
  6045  001722  24F3               	addwf	prodl,w,c
  6046  001724  6ED9               	movwf	fsr2l,c
  6047  001726  0101               	movlb	1	; () banked
  6048  001728  0E01               	movlw	high _UARTbuffer
  6049  00172A  20F4               	addwfc	prodh,w,c
  6050  00172C  6EDA               	movwf	fsr2h,c
  6051  00172E  5011               	movf	isr@ch,w,c
  6052  001730  ECFF  F00F         	call	i2_toupper
  6053  001734  6EDF               	movwf	indf2,c
  6054                           
  6055                           ;main.c: 392: i++;
  6056  001736  2A56               	incf	isr@i,f,c
  6057  001738                     i2l2500:
  6058                           
  6059                           ;main.c: 393: }
  6060                           ;main.c: 394: if ('\r' == ch || ch == ' ') {
  6061  001738  5011               	movf	isr@ch,w,c
  6062  00173A  0A0D               	xorlw	13
  6063  00173C  B4D8               	btfsc	status,2,c
  6064  00173E  D004               	goto	i2l2504
  6065  001740  5011               	movf	isr@ch,w,c
  6066  001742  0A20               	xorlw	32
  6067  001744  A4D8               	btfss	status,2,c
  6068  001746  D005               	goto	i2l2506
  6069  001748                     i2l2504:
  6070                           
  6071                           ;main.c: 395: UARTflag = !0;
  6072  001748  0E01               	movlw	1
  6073  00174A  0100               	movlb	0	; () banked
  6074  00174C  6FA3               	movwf	_UARTflag& (0+255),b
  6075                           
  6076                           ;main.c: 396: i = 0;
  6077  00174E  0E00               	movlw	0
  6078  001750  6E56               	movwf	isr@i,c
  6079  001752                     i2l2506:
  6080                           
  6081                           ;main.c: 397: }
  6082                           ;main.c: 398: }
  6083                           ;main.c: 399: }
  6084                           ;main.c: 406: if (TMR2IF) {
  6085  001752  A29E               	btfss	3998,1,c	;volatile
  6086  001754  D010               	goto	i2l259
  6087                           
  6088                           ;main.c: 407: TMR2IF = 0;
  6089  001756  929E               	bcf	3998,1,c	;volatile
  6090                           
  6091                           ;main.c: 408: Timer2Counter++;
  6092  001758  4A54               	infsnz	isr@Timer2Counter,f,c
  6093  00175A  2A55               	incf	isr@Timer2Counter+1,f,c
  6094                           
  6095                           ;main.c: 409: if (Timer2Counter >= 5) {
  6096  00175C  0E05               	movlw	5
  6097  00175E  5C54               	subwf	isr@Timer2Counter,w,c
  6098  001760  0E00               	movlw	0
  6099  001762  5855               	subwfb	isr@Timer2Counter+1,w,c
  6100  001764  A0D8               	btfss	status,0,c
  6101  001766  D007               	goto	i2l259
  6102                           
  6103                           ;main.c: 410: Timer2Counter = 0;
  6104  001768  0E00               	movlw	0
  6105  00176A  6E55               	movwf	isr@Timer2Counter+1,c
  6106  00176C  0E00               	movlw	0
  6107  00176E  6E54               	movwf	isr@Timer2Counter,c
  6108                           
  6109                           ;main.c: 411: Timer2Flag = !0;
  6110  001770  0E01               	movlw	1
  6111  001772  0100               	movlb	0	; () banked
  6112  001774  6FA2               	movwf	_Timer2Flag& (0+255),b
  6113  001776                     i2l259:
  6114  001776  C00F  FFF5         	movff	??_isr+13,tablat
  6115  00177A  C00E  FFF8         	movff	??_isr+12,tblptru
  6116  00177E  C00D  FFF7         	movff	??_isr+11,tblptrh
  6117  001782  C00C  FFF6         	movff	??_isr+10,tblptrl
  6118  001786  C00B  FFF4         	movff	??_isr+9,prodh
  6119  00178A  C00A  FFF3         	movff	??_isr+8,prodl
  6120  00178E  C009  FFDA         	movff	??_isr+7,fsr2h
  6121  001792  C008  FFD9         	movff	??_isr+6,fsr2l
  6122  001796  C007  FFE2         	movff	??_isr+5,fsr1h
  6123  00179A  C006  FFE1         	movff	??_isr+4,fsr1l
  6124  00179E  C005  FFEA         	movff	??_isr+3,fsr0h
  6125  0017A2  C004  FFE9         	movff	??_isr+2,fsr0l
  6126  0017A6  C003  FFFB         	movff	??_isr+1,pclatu
  6127  0017AA  C002  FFFA         	movff	??_isr,pclath
  6128  0017AE  0011               	retfie		f
  6129  0017B0                     __end_of_isr:
  6130                           	opt stack 0
  6131                           pclatu	equ	0xFFB
  6132                           pclath	equ	0xFFA
  6133                           tblptru	equ	0xFF8
  6134                           tblptrh	equ	0xFF7
  6135                           tblptrl	equ	0xFF6
  6136                           tablat	equ	0xFF5
  6137                           prodh	equ	0xFF4
  6138                           prodl	equ	0xFF3
  6139                           intcon	equ	0xFF2
  6140                           intcon2	equ	0xFF1
  6141                           postinc0	equ	0xFEE
  6142                           fsr0h	equ	0xFEA
  6143                           fsr0l	equ	0xFE9
  6144                           wreg	equ	0xFE8
  6145                           postinc1	equ	0xFE6
  6146                           postdec1	equ	0xFE5
  6147                           fsr1h	equ	0xFE2
  6148                           fsr1l	equ	0xFE1
  6149                           indf2	equ	0xFDF
  6150                           postinc2	equ	0xFDE
  6151                           postdec2	equ	0xFDD
  6152                           fsr2h	equ	0xFDA
  6153                           fsr2l	equ	0xFD9
  6154                           status	equ	0xFD8
  6155                           
  6156 ;; *************** function i2_toupper *****************
  6157 ;; Defined at:
  6158 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\toupper.c"
  6159 ;; Parameters:    Size  Location     Type
  6160 ;;  c               1    wreg     unsigned char 
  6161 ;; Auto vars:     Size  Location     Type
  6162 ;;  c               1    0[COMRAM] unsigned char 
  6163 ;; Return value:  Size  Location     Type
  6164 ;;                  1    wreg      unsigned char 
  6165 ;; Registers used:
  6166 ;;		wreg, status,2, status,0
  6167 ;; Tracked objects:
  6168 ;;		On entry : 0/0
  6169 ;;		On exit  : 0/0
  6170 ;;		Unchanged: 0/0
  6171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6172 ;;      Params:         0       0       0       0       0       0       0
  6173 ;;      Locals:         1       0       0       0       0       0       0
  6174 ;;      Temps:          0       0       0       0       0       0       0
  6175 ;;      Totals:         1       0       0       0       0       0       0
  6176 ;;Total ram usage:        1 bytes
  6177 ;; Hardware stack levels used:    1
  6178 ;; This function calls:
  6179 ;;		Nothing
  6180 ;; This function is called by:
  6181 ;;		_isr
  6182 ;; This function uses a non-reentrant model
  6183 ;;
  6184                           
  6185                           	psect	text25
  6186  001FFE                     __ptext25:
  6187                           	opt stack 0
  6188  001FFE                     i2_toupper:
  6189                           	opt stack 26
  6190                           
  6191                           ;incstack = 0
  6192                           ;i2toupper@c stored from wreg
  6193  001FFE  6E01               	movwf	i2toupper@c,c
  6194  002000  0E7B               	movlw	123
  6195  002002  5C01               	subwf	i2toupper@c,w,c
  6196  002004  B0D8               	btfsc	status,0,c
  6197  002006  D004               	goto	i2l2282
  6198  002008  0E60               	movlw	96
  6199  00200A  6401               	cpfsgt	i2toupper@c,c
  6200  00200C  D001               	goto	i2l2282
  6201  00200E  9A01               	bcf	i2toupper@c,5,c
  6202  002010                     i2l2282:
  6203  002010  5001               	movf	i2toupper@c,w,c
  6204  002012  0012               	return	
  6205  002014                     __end_ofi2_toupper:
  6206                           	opt stack 0
  6207                           pclatu	equ	0xFFB
  6208                           pclath	equ	0xFFA
  6209                           tblptru	equ	0xFF8
  6210                           tblptrh	equ	0xFF7
  6211                           tblptrl	equ	0xFF6
  6212                           tablat	equ	0xFF5
  6213                           prodh	equ	0xFF4
  6214                           prodl	equ	0xFF3
  6215                           intcon	equ	0xFF2
  6216                           intcon2	equ	0xFF1
  6217                           postinc0	equ	0xFEE
  6218                           fsr0h	equ	0xFEA
  6219                           fsr0l	equ	0xFE9
  6220                           wreg	equ	0xFE8
  6221                           postinc1	equ	0xFE6
  6222                           postdec1	equ	0xFE5
  6223                           fsr1h	equ	0xFE2
  6224                           fsr1l	equ	0xFE1
  6225                           indf2	equ	0xFDF
  6226                           postinc2	equ	0xFDE
  6227                           postdec2	equ	0xFDD
  6228                           fsr2h	equ	0xFDA
  6229                           fsr2l	equ	0xFD9
  6230                           status	equ	0xFD8
  6231                           pclatu	equ	0xFFB
  6232                           pclath	equ	0xFFA
  6233                           tblptru	equ	0xFF8
  6234                           tblptrh	equ	0xFF7
  6235                           tblptrl	equ	0xFF6
  6236                           tablat	equ	0xFF5
  6237                           prodh	equ	0xFF4
  6238                           prodl	equ	0xFF3
  6239                           intcon	equ	0xFF2
  6240                           intcon2	equ	0xFF1
  6241                           postinc0	equ	0xFEE
  6242                           fsr0h	equ	0xFEA
  6243                           fsr0l	equ	0xFE9
  6244                           wreg	equ	0xFE8
  6245                           postinc1	equ	0xFE6
  6246                           postdec1	equ	0xFE5
  6247                           fsr1h	equ	0xFE2
  6248                           fsr1l	equ	0xFE1
  6249                           indf2	equ	0xFDF
  6250                           postinc2	equ	0xFDE
  6251                           postdec2	equ	0xFDD
  6252                           fsr2h	equ	0xFDA
  6253                           fsr2l	equ	0xFD9
  6254                           status	equ	0xFD8
  6255                           
  6256                           	psect	rparam
  6257  0000                     pclatu	equ	0xFFB
  6258                           pclath	equ	0xFFA
  6259                           tblptru	equ	0xFF8
  6260                           tblptrh	equ	0xFF7
  6261                           tblptrl	equ	0xFF6
  6262                           tablat	equ	0xFF5
  6263                           prodh	equ	0xFF4
  6264                           prodl	equ	0xFF3
  6265                           intcon	equ	0xFF2
  6266                           intcon2	equ	0xFF1
  6267                           postinc0	equ	0xFEE
  6268                           fsr0h	equ	0xFEA
  6269                           fsr0l	equ	0xFE9
  6270                           wreg	equ	0xFE8
  6271                           postinc1	equ	0xFE6
  6272                           postdec1	equ	0xFE5
  6273                           fsr1h	equ	0xFE2
  6274                           fsr1l	equ	0xFE1
  6275                           indf2	equ	0xFDF
  6276                           postinc2	equ	0xFDE
  6277                           postdec2	equ	0xFDD
  6278                           fsr2h	equ	0xFDA
  6279                           fsr2l	equ	0xFD9
  6280                           status	equ	0xFD8


Data Sizes:
    Strings     145
    Constant    10
    Data        5
    BSS         106
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     71      90
    BANK0           128     36      74
    BANK1           256     86     140
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    atoi@s	PTR const unsigned char  size(2) Largest target is 17
		 -> NUMbuffer(BANK1[17]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 38
		 -> STR_8(CODE[38]), STR_7(CODE[33]), STR_6(CODE[13]), STR_5(CODE[12]), 
		 -> STR_4(CODE[13]), STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[25]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    S684$_cp	PTR const unsigned char  size(2) Largest target is 0

    _val._str._cp	PTR const unsigned char  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _main->_PIDcontrol
    _setServoPWM->_SetDutyPWM_A
    _setServoPWM->_SetDutyPWM_B
    _readServoPot->_windowFilter
    _windowFilter->___wmul
    _isalpha->_isupper
    _initializeErrorArrays->___wmul
    _atoi->___wmul
    _PIDcontrol->_printf
    _printf->___lwmod
    ___lwmod->___lwdiv
    ___lmul->___wmul

Critical Paths under _isr in COMRAM

    _isr->i2_toupper

Critical Paths under _main in BANK0

    _main->_PIDcontrol

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                92    92      0   40343
                                             65 COMRAM     6     6      0
                                              0 BANK1     86    86      0
                       _ADsetChannel
                         _PIDcontrol
                       _SetDutyPWM_A
                       _SetDutyPWM_B
                            ___aldiv
                             ___wmul
                               _atoi
              _initializeErrorArrays
                    _initializePorts
                            _isalpha
                            _isdigit
                             _printf
                              _putch
                             _readAD
                       _readServoPot
                        _setServoPWM
                            _toupper
 ---------------------------------------------------------------------------------
 (1) _toupper                                              1     1      0      96
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _setServoPWM                                          3     1      2    1238
                                             26 COMRAM     3     1      2
                       _SetDutyPWM_A
                       _SetDutyPWM_B
                                _abs
 ---------------------------------------------------------------------------------
 (2) _abs                                                  4     2      2     223
                                             17 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _SetDutyPWM_B                                         9     7      2     362
                                             17 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (2) _SetDutyPWM_A                                         9     7      2     297
                                             17 COMRAM     9     7      2
 ---------------------------------------------------------------------------------
 (1) _readServoPot                                         9     6      3    9808
                                             49 COMRAM     9     6      3
                       _ADsetChannel
                             ___wmul
                             _readAD
                       _windowFilter
 ---------------------------------------------------------------------------------
 (2) _windowFilter                                        26    24      2    5125
                                             23 COMRAM    26    24      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _readAD                                               6     4      2      68
                                             17 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _ADsetChannel                                         1     1      0      31
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _isalpha                                              3     3      0     229
                                             20 COMRAM     3     3      0
                            _isupper
 ---------------------------------------------------------------------------------
 (2) _isupper                                              3     3      0      99
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _initializePorts                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initializeErrorArrays                                6     6      0    4658
                                             23 COMRAM     6     6      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _atoi                                                 7     5      2    4760
                                             23 COMRAM     7     5      2
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (1) _isdigit                                              3     3      0      99
                                             17 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (1) _PIDcontrol                                          48    44      4    9436
                                             53 COMRAM    12     8      4
                                              0 BANK0     36    36      0
                            ___aldiv
                             ___lmul
                             ___wmul
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              24    12     12    1915
                                             29 COMRAM    24    12     12
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (1) _putch                                                1     1      0      31
                                             17 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     362
                                             24 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     371
                                             17 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    4262
                                             17 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              12     4      8     616
                                             23 COMRAM    12     4      8
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___aldiv                                             14     6      8    1095
                                             17 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                 16    16      0     180
                                              1 COMRAM    16    16      0
                          i2_toupper
 ---------------------------------------------------------------------------------
 (5) i2_toupper                                            1     1      0      67
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADsetChannel
   _PIDcontrol
     ___aldiv
     ___lmul
       ___wmul (ARG)
     ___wmul
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
   _SetDutyPWM_A
   _SetDutyPWM_B
   ___aldiv
   ___wmul
   _atoi
     ___wmul
     _isdigit
   _initializeErrorArrays
     ___wmul
   _initializePorts
   _isalpha
     _isupper
   _isdigit
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
   _putch
   _readAD
   _readServoPot
     _ADsetChannel
     ___wmul
     _readAD
     _windowFilter
       ___wmul
   _setServoPWM
     _SetDutyPWM_A
     _SetDutyPWM_B
     _abs
   _toupper

 _isr (ROOT)
   i2_toupper

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     56      8C       7       54.7%
BITBANK0            80      0       0       4        0.0%
BANK0               80     24      4A       5       57.8%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     47      5A       1       70.9%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     130      15        0.0%
DATA                 0      0     130       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Sun Feb 25 12:24:32 2018

       PIDcontrol@PIDcorrection 00C5             ___wmul@multiplicand 0014                    __CFG_CP0$OFF 000000  
                  __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000  
                   __CFG_OSC$HS 000000                _servoWindowArray 0156                             l205 1358  
                           l224 1BDC                             l218 1B5C                             l219 1B88  
                           l228 1C12                             l262 202A                             l159 1A8C  
                           l280 09B2                             l338 168A                             l293 1F5C  
                           l279 07C2                             l527 1B4E                             l528 1B56  
                           l388 1F26                             l389 1F2E                             l889 1EAC  
                           l899 1EEE                             _GIE 007F97                             _PR2 000FCB  
                           _PID 0080                             _RX9 007D5E                             _TX9 007D66  
                           _abs 1EF8                             _isr 0008                             fsr2 000FD9  
                           prod 000FF3                             wreg 000FE8                    __CFG_LVP$OFF 000000  
                   main@command 014F                    __CFG_WDT$OFF 000000                            ?_abs 0012  
                          l3010 0DE4                            l3014 0E20                            l3030 1BB0  
                          l3102 10CA                            l3040 1BF6                            l3024 1B8A  
                          l3112 10FC                            l3122 1132                            l3036 1BDE  
                          l3028 1BA2                            l3044 1C04                            l3140 119A  
                          l3132 1176                            l3052 0E86                            l3206 145C  
                          l3118 1126                            l3070 1036                            l2600 1554  
                          l3216 14A8                            l3144 11AC                            l3136 1188  
                          l3128 116C                            l2610 159C                            l3154 11FC  
                          l2540 1E86                            l2620 15D4                            l2604 1568  
                          l3228 1520                            l3164 122C                            l3148 11E0  
                          l3172 1254                            l3092 1088                            l3180 132E  
                          l3084 1066                            l2702 182E                            l2710 188C  
                          l3158 1210                            l3174 127E                            l2536 1E7A  
                          l2560 1ED0                            l2640 1624                            l2608 1570  
                          l2800 1A14                            l3192 135A                            l3184 1342  
                          l3168 123E                            l2722 1D8A                            l2538 1E82  
                          l2634 160C                            l3178 1328                            l3098 10BA  
                          l2740 1910                            l2548 1EA2                            l2564 1EE4  
                          l2556 1EC4                            l2644 166C                            l2804 1A1A  
                          l2708 188A                            l2750 1942                            l2734 18E0  
                          l2718 1D76                            l2558 1ECC                            l2638 161E  
                          l2646 1674                            l2822 1A86                            l2656 1FE0  
                          l2920 1A94                            l2912 1F54                            l2746 1932  
                          l2762 1980                            l2594 153E                            l2930 1AD2  
                          l2748 193E                            l2908 1F46                            l2766 1996  
                          l2758 1972                            l2598 154E                            l2934 1AE2  
                          l2918 1A90                            l2686 17B6                            l2938 1B1C  
                          l2778 1FC0                            l2698 1810                            l2990 0C3E  
                          l2984 0BD2                            l2898 1FFA                            l2996 0CD0  
                          _ADIE 007CEE                            _ADIF 007CF6                            ?_isr 0001  
                          STR_1 0652                            STR_2 0691                            STR_3 0697  
                          STR_4 066B                            STR_5 0685                            STR_6 0678  
                          STR_7 0631                            STR_8 060B                            _BRGH 007D62  
                          _CREN 007D5C                            _PIE1 000F9D                            u2465 18C8  
                          u2475 18F8                            u2755 0BA0                            _PEIE 007F96  
                          u2765 0BF2                            u2775 0C8E                            _RCIE 007CED  
                          _RCIF 007CF5                            _OERR 007D59                            _RBPU 007F8F  
                          _SPEN 007D5F                            _SREN 007D5D                    _windowFilter 17B0  
                          _TXIE 007CEC                            _TXIF 007CF4                            _TXEN 007D65  
                          _SYNC 007D64                    __CFG_PWRT$ON 000000                            abs@a 0012  
                          _atoi 1A8E                            _main 0E2A                            fsr0h 000FEA  
                          fsr1h 000FE2                            fsr0l 000FE9                            fsr2h 000FDA  
                          fsr1l 000FE1                            indf2 000FDF                            fsr2l 000FD9  
                   main@servoID 0151                            isr@i 0056                            pclat 000FFA  
                          prodh 000FF4                            prodl 000FF3                            start 0018  
              PIDcontrol@PWMout 00BF                   __CFG_IESO$OFF 000000                   __CFG_MCLRE$ON 000000  
                         ??_abs 0014                           ??_isr 0002                 __end_of___aldiv 19A8  
                         ?_atoi 0018                           ?_main 0001                           _T2CON 000FCA  
                __CFG_DEBUG$OFF 000000                 __end_of___lwdiv 1EB6                 __end_of___lwmod 1EF8  
                         i2l241 16CA                           i2l246 1700                           i2l249 1708  
                         i2l259 1776                           _RCREG 000FAE         ??_initializeErrorArrays 0018  
                         _SPBRG 000FAF                     ?_PIDcontrol 0036                           _TRISA 000F92  
                         _TRISB 000F93                           _TRISC 000F94                           _SSPIE 007CEB  
                         _TXREG 000FAD             ___lmul@multiplicand 001C               ??_initializePorts 0012  
                __CFG_FCMEN$OFF 000000                 __end_of_dpowers 060B                 __end_of_isalpha 1F5C  
               __end_of_isdigit 1FE8                           _value 00A0                           atoi@a 001D  
                         atoi@s 0018                           _putch 2028                           main@i 014D  
                         main@p 014E                           main@q 0152                           isr@ch 0011  
                  main@servoPot 0140                  __CFG_BOREN$OFF 000000                 __end_of_isupper 1FC8  
                         tablat 000FF5          initializeErrorArrays@i 001A          initializeErrorArrays@j 001C  
                         status 000FD8                 __end_of_toupper 1FFE                 _errorDerivative 0048  
               __initialization 1D06                    __end_of_atoi 1B58                    __end_of_main 1534  
                 ?_ADsetChannel 0001              setServoPWM@servoID 001D                          ??_atoi 001A  
                        ??_main 0042                   main@arrFilter 0100                   __activetblptr 000002  
            __size_ofi2_toupper 0016                      i2toupper@c 0001                   main@filterSum 0149  
                        _ADCON0 000FC2                          _ADCON1 000FC1                          _ADCON2 000FC0  
             PIDcontrol@servoID 0036                          _ADRESH 000FC4                          _ADRESL 000FC3  
                  ?_setServoPWM 001B                          _CCPR1L 000FBE                          _CCPR2L 000FBB  
                        ?_putch 0001                   ?_readServoPot 0032                          i2l2500 1738  
                        i2l2504 1748                          i2l2282 2010                          i2l2506 1752  
                        i2l2494 1712                          _INTCON 000FF2                          _TMR1IE 007CE8  
                        _TMR2IE 007CE9                          _TMR2IF 007CF1                      _Timer2Flag 00A2  
                __CFG_XINST$OFF 000000             __size_of_PIDcontrol 078C           main@windowFilterIndex 0147  
                        ___lmul 1D66                  ??_ADsetChannel 0012                       ??___aldiv 001A  
                        ___wmul 1F82                       ??___lwdiv 0016                       ??___lwmod 001D  
                        _readAD 1F5C                          clear_0 1D0C                          clear_1 1D18  
                        clear_2 1D24                          _printf 1534                          main@ch 0153  
                 main@runEnable 0146                    __pdataCOMRAM 0057                       ??_isalpha 0015  
                     ??_isdigit 0012                    __mediumconst 0000                   ?_SetDutyPWM_A 0012  
                 ?_SetDutyPWM_B 0012                          tblptrh 000FF7                       ??_isupper 0012  
                        tblptrl 000FF6                          tblptru 000FF8                  ??_readServoPot 0035  
                     ??_toupper 0012                      __accesstop 0080         __end_of__initialization 1D5C  
               __CFG_PBADEN$OFF 000000        PIDcontrol@DisplayCounter 0057               __end_ofi2_toupper 2014  
                __pcstackCOMRAM 0001                    __pidataBANK0 2038                   __end_of_putch 2034  
                ??_SetDutyPWM_A 0014                  ??_SetDutyPWM_B 0014                         ??_putch 0012  
              isr@Timer2Counter 0054             windowFilter@midData 002A                      __pbssBANK0 0080  
                    __pbssBANK1 0156    readServoPot@servoPotFiltered 0039             windowFilter@lowData 002C  
         SetDutyPWM_A@dutyCycle 0012              PIDcontrol@intDCorr 00B1              PIDcontrol@intICorr 00AF  
            PIDcontrol@intPCorr 00AD             windowFilter@servoID 0018             SetDutyPWM_A@maskReg 0018  
            PIDcontrol@lngError 00C1             windowFilter@sortArr 001C             SetDutyPWM_A@lowBits 0016  
           SetDutyPWM_B@maskReg 0018             SetDutyPWM_B@lowBits 0016           SetDutyPWM_B@dutyCycle 0012  
                       ?___lmul 0018                         ?___wmul 0012                 _initializePorts 1C14  
                       _CCP1CON 000FBD                         _CCP2CON 000FBA                         ?_readAD 0012  
                ___lmul@product 0020                         ?_printf 001E                    ??_PIDcontrol 003A  
__size_of_initializeErrorArrays 00E6   __end_of_initializeErrorArrays 1A8E                      _commandPot 009E  
          __end_of_ADsetChannel 2028            __size_of_setServoPWM 00BC                         __Hparam 0000  
                       __Lparam 0000              __end_of_PIDcontrol 0E2A                         ___aldiv 18AC  
               __size_of___lmul 0056                 __size_of___wmul 0026                         ___lwdiv 1E64  
                       ___lwmod 1EB6                    __psmallconst 0600            __end_of_readServoPot 1D06  
               __CFG_STVREN$OFF 000000                 __size_of_readAD 0026                         _channel 0059  
                       __pcinit 1D06                         __ramtop 0600                         __ptext0 0E2A  
                       __ptext1 1FE8                         __ptext2 1B58                         __ptext3 1EF8  
                       __ptext4 1DBC                         __ptext5 1E10                         __ptext6 1C8E  
                       __ptext7 17B0                         __ptext8 1F5C                         __ptext9 2014  
               __size_of_printf 0158       readServoPot@servoPotValue 0037                         _dpowers 0601  
                     _T2CONbits 000FCA                    __size_of_abs 0038                         _isalpha 1F30  
                       _isdigit 1FC8                    __size_of_isr 17A8                ___aldiv@dividend 0012  
                       _isupper 1FA8                  __pintcode_body 168C                         _toupper 1FE8  
          end_of_initialization 1D5C                   __Lmediumconst 0000                         int_func 168C  
                 windowFilter@i 0031                   windowFilter@j 0030         __end_of_initializePorts 1C8E  
          __end_of_SetDutyPWM_A 1E64            __end_of_SetDutyPWM_B 1E10                         printf@c 0035  
                       printf@f 001E                ___aldiv@quotient 001C                         postdec1 000FE5  
                       postdec2 000FDD                         postinc0 000FEE                         postinc1 000FE6  
                       postinc2 000FDE                       _PORTCbits 000F82             ADsetChannel@channel 0012  
                    main@PWMout 0144                       _NUMbuffer 017B                     _CCP1CONbits 000FBD  
                   _CCP2CONbits 000FBA                 PIDcontrol@DCorr 00BB                 PIDcontrol@ICorr 00B7  
               PIDcontrol@PCorr 00B3                 PIDcontrol@error 0038                       i2_toupper 1FFE  
                __end_of___lmul 1DBC               setServoPWM@PWMout 001B                  __end_of___wmul 1FA8  
                 __pidataCOMRAM 2034                  __end_of_readAD 1F82                  __end_of_printf 168C  
         __size_of_ADsetChannel 0014             start_initialization 1D06                     __end_of_abs 1F30  
                   __end_of_isr 17B0                   ?_windowFilter 0018                ?_initializePorts 0001  
         __size_of_readServoPot 0078                        ??___lmul 0020                        ??___wmul 0016  
                    ?i2_toupper 0001                    _ADsetChannel 2014                     __pdataBANK0 00C9  
                      ??_readAD 0014                __CFG_LPT1OSC$OFF 000000             PIDcontrol@diffError 00A5  
                      ??_printf 002A            windowFilter@highData 002E                     __pbssCOMRAM 0048  
                 __pcstackBANK0 00A5                   __pcstackBANK1 0100             __end_of__stringdata 069C  
                ??_windowFilter 001A                    _readServoPot 1C8E           __size_of_SetDutyPWM_A 0054  
         __size_of_SetDutyPWM_B 0054                ___lwdiv@dividend 0012          SetDutyPWM_A@ndutyCycle 0019  
             __CFG_CCP2MX$PORTC 000000                       __pintcode 0008                        ?___aldiv 0012  
           PIDcontrol@pastError 00A9                        ?___lwdiv 0012                        ?___lwmod 0019  
               main@filterIndex 0150                     __smallconst 0600                        ?_isalpha 0001  
                      ?_isdigit 0001                        ?_isupper 0001                    _SetDutyPWM_A 1E10  
                  _SetDutyPWM_B 1DBC          SetDutyPWM_B@ndutyCycle 0019                ___lwdiv@quotient 0017  
                 ??_setServoPWM 001D           _initializeErrorArrays 19A8                        ?_toupper 0001  
                __size_of_putch 000C                 ___aldiv@divisor 0016                 ___aldiv@counter 001A  
                ___wmul@product 0016                        _LATBbits 000F8A                        _PIR1bits 000F9E  
       readServoPot@filterIndex 0034                     _displayFlag 00A4                     ??i2_toupper 0001  
                      _UARTflag 00A3                      _ADCON0bits 000FC2                     __stringdata 060B  
                     main@i_552 0154               ___wmul@multiplier 0012                      printf@_val 0030  
                    printf@flag 002C                      printf@prec 002D                       main@error 0142  
             ___lmul@multiplier 0018                       copy_data0 1D50                  readAD@ADresult 0016  
           __end_of_setServoPWM 1C14                        __Hrparam 0000                        __Lrparam 0000  
              __size_of___aldiv 00FC                   _servoIDselect 00C9            __end_of_windowFilter 18AC  
              __size_of___lwdiv 0052                __size_of___lwmod 0042                     _isalpha$975 0016  
                   _isdigit$978 0013                __size_of_isalpha 002C                __size_of_isdigit 0020  
               ___lwdiv@divisor 0014                 ___lwdiv@counter 0016          ?_initializeErrorArrays 0001  
                      __ptext10 1F30                        __ptext11 1FA8                        __ptext20 1E64  
                      __ptext12 1C14                        __ptext21 1F82                        __ptext13 19A8  
                      __ptext22 1D66                        __ptext14 1A8E                        __ptext23 18AC  
                      __ptext15 1FC8                        __ptext16 069E                        __ptext25 1FFE  
                      __ptext17 1534                        __ptext18 2028                        __ptext19 1EB6  
              __size_of_isupper 0020                __size_of_toupper 0016                   __size_of_atoi 00CA  
                 __size_of_main 070A             readServoPot@servoID 0032                        atoi@sign 001C  
                      main@mode 0148                       putch@byte 0012                        isr@dummy 0010  
                      isalpha@c 0017                        isdigit@c 0014                     _setServoPWM 1B58  
                      intlevel2 0000                     _isupper$981 0013                ___lwmod@dividend 0019  
                      isupper@c 0014                        printf@ap 002E        __size_of_initializePorts 007A  
                    _PIDcontrol 069E                 ___lwmod@divisor 001B                 ___lwmod@counter 001D  
                      toupper@c 0012                    ___aldiv@sign 001B                      _UARTbuffer 0172  
         __size_of_windowFilter 00FC  
